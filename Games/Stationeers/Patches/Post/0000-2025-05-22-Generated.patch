diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Clothing/AdvancedSuit.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Clothing/AdvancedSuit.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Clothing/AdvancedSuit.cs	2025-05-22 18:15:37.832979600 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Clothing/AdvancedSuit.cs	2025-05-22 17:53:54.350164300 -0700
@@ -159,7 +159,7 @@
 			}
 		}
 		base.InternalAtmosphere.Sparked = true;
-		global::Explosion.Explode(200f, base.Position, 2.3f);
+		DefaultNamespace.Explosion.Explode(200f, base.Position, 2.3f);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Clothing/SuitBase.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Clothing/SuitBase.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Clothing/SuitBase.cs	2025-05-22 18:15:39.108507400 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Clothing/SuitBase.cs	2025-05-22 17:53:57.111124500 -0700
@@ -1425,7 +1425,7 @@
 			}
 		}
 		base.InternalAtmosphere.Sparked = true;
-		global::Explosion.Explode(200f, base.Position, 2.3f);
+		DefaultNamespace.Explosion.Explode(200f, base.Position, 2.3f);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/DynamicGasCanister.cs Out/Assembly-CSharp/Assets/Scripts/Objects/DynamicGasCanister.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/DynamicGasCanister.cs	2025-05-22 18:15:32.142091100 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/DynamicGasCanister.cs	2025-05-22 17:53:48.919404800 -0700
@@ -523,7 +523,7 @@
 		{
 			if (base.InternalAtmosphere?.PressureGassesAndLiquids > PressurekPa.Zero)
 			{
-				global::Explosion.Explode(_explosionForce * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MaxSetting, radius: Mathf.Clamp(_explosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MaxSetting, 0f, _maxExplosionRadius), pos: base.ThingTransformPosition);
+				DefaultNamespace.Explosion.Explode(_explosionForce * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MaxSetting, radius: Mathf.Clamp(_explosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MaxSetting, 0f, _maxExplosionRadius), pos: base.ThingTransformPosition);
 				AtmosphericEventInstance.CloneGlobalAddGasMix(base.WorldGrid, new GasMixture(base.InternalAtmosphere.GasMixture), spark: true);
 				AtmosphericEventInstance.Reset(base.InternalAtmosphere);
 			}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/CircuitHousing.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/CircuitHousing.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/CircuitHousing.cs	2025-05-22 18:15:36.807127700 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/CircuitHousing.cs	2025-05-22 17:53:59.463069500 -0700
@@ -226,7 +226,7 @@
 			}
 		}
 		AtmosphericEventInstance.CloneGlobal(base.WorldGrid, MoleEnergy.Zero, spark: true);
-		global::Explosion.Explode(50f, base.ThingTransformLocalPosition, 1f);
+		DefaultNamespace.Explosion.Explode(50f, base.ThingTransformLocalPosition, 1f);
 	}
 
 	public List<ILogicable> GetBatchOutput()
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/Laptop.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/Laptop.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/Laptop.cs	2025-05-22 18:15:39.110507800 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/Laptop.cs	2025-05-22 17:54:02.622929500 -0700
@@ -307,7 +307,7 @@
 		}
 		base.InternalAtmosphere.Sparked = true;
 		AtmosphericEventInstance.CloneGlobal(base.WorldGrid, MoleEnergy.Zero, spark: true);
-		global::Explosion.Explode(200f, base.ThingTransformLocalPosition, 4f);
+		DefaultNamespace.Explosion.Explode(200f, base.ThingTransformLocalPosition, 4f);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/StirlingEngine.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/StirlingEngine.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Electrical/StirlingEngine.cs	2025-05-22 18:15:38.537312900 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Electrical/StirlingEngine.cs	2025-05-22 17:54:06.257270300 -0700
@@ -508,7 +508,7 @@
 		base.Explode();
 		if (GameManager.RunSimulation && base.InternalAtmosphere.IsAboveArmstrong())
 		{
-			global::Explosion.Explode(ExplosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / base.MaxPressureDelta).ToFloat(), radius: Mathf.Clamp(ExplosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / base.MaxPressureDelta.ToFloat(), 0f, MaxExplosionRadius), pos: base.Position);
+			DefaultNamespace.Explosion.Explode(ExplosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / base.MaxPressureDelta).ToFloat(), radius: Mathf.Clamp(ExplosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / base.MaxPressureDelta.ToFloat(), 0f, MaxExplosionRadius), pos: base.Position);
 		}
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/AdvancedTablet.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Items/AdvancedTablet.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/AdvancedTablet.cs	2025-05-22 18:15:33.824704300 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Items/AdvancedTablet.cs	2025-05-22 17:54:09.272013500 -0700
@@ -110,7 +110,7 @@
 			}
 		}
 		base.InternalAtmosphere.Sparked = true;
-		global::Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
+		DefaultNamespace.Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/Dynamite.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Items/Dynamite.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/Dynamite.cs	2025-05-22 18:15:37.957857100 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Items/Dynamite.cs	2025-05-22 17:54:12.720695400 -0700
@@ -164,7 +164,7 @@
 		}
 		if (GameManager.RunSimulation)
 		{
-			global::Explosion.Explode(1000f, base.ThingTransformLocalPosition, 4f);
+			DefaultNamespace.Explosion.Explode(1000f, base.ThingTransformLocalPosition, 4f);
 			AtmosphericsManager.Instance.Deregister(this);
 			OnServer.Destroy(this);
 		}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/GasCanister.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Items/GasCanister.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/GasCanister.cs	2025-05-22 18:15:34.651128600 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Items/GasCanister.cs	2025-05-22 17:54:16.079365200 -0700
@@ -308,7 +308,7 @@
 		{
 			if (base.InternalAtmosphere.PressureGassesAndLiquids > PressurekPa.Zero)
 			{
-				global::Explosion.Explode(_explosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / MaxPressure).ToFloat(), radius: Mathf.Clamp(_explosionRadius * (base.InternalAtmosphere.PressureGassesAndLiquids / MaxPressure).ToFloat(), 0f, _maxExplosionRadius), pos: base.transform.position);
+				DefaultNamespace.Explosion.Explode(_explosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / MaxPressure).ToFloat(), radius: Mathf.Clamp(_explosionRadius * (base.InternalAtmosphere.PressureGassesAndLiquids / MaxPressure).ToFloat(), 0f, _maxExplosionRadius), pos: base.transform.position);
 				AtmosphericEventInstance.CloneGlobalAddGasMix(base.WorldGrid, new GasMixture(base.InternalAtmosphere.GasMixture), spark: true);
 				AtmosphericEventInstance.Reset(base.InternalAtmosphere);
 				base.ParentSlot?.Get<WeldingTorch>()?.OnTankExploded();
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/ItemExplosive.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Items/ItemExplosive.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Items/ItemExplosive.cs	2025-05-22 18:15:33.904378400 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Items/ItemExplosive.cs	2025-05-22 17:54:22.375422800 -0700
@@ -351,7 +351,7 @@
 			}
 			if (!base.BeingDestroyed && !token.IsCancellationRequested)
 			{
-				global::Explosion.Explode(ExplosionForce, base.transform.position, ExplosionRadius, 2000f, mineTerrain: true);
+				DefaultNamespace.Explosion.Explode(ExplosionForce, base.transform.position, ExplosionRadius, 2000f, mineTerrain: true);
 				CancelCountdown();
 				OnServer.Destroy(this);
 			}
@@ -377,7 +377,7 @@
 			CancelCountdown();
 			if (GameManager.GameState == GameState.Running)
 			{
-				global::Explosion.Explode(ExplosionForce, base.transform.position, ExplosionRadius, 2000f, mineTerrain: true);
+				DefaultNamespace.Explosion.Explode(ExplosionForce, base.transform.position, ExplosionRadius, 2000f, mineTerrain: true);
 			}
 		}
 		base.OnDestroy();
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputCircuit.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputCircuit.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputCircuit.cs	2025-05-22 18:15:38.629465100 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputCircuit.cs	2025-05-22 17:54:26.528163800 -0700
@@ -490,7 +490,7 @@
 			}
 		}
 		base.InternalAtmosphere.Sparked = true;
-		global::Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
+		DefaultNamespace.Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputImportExportCircuit.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputImportExportCircuit.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputImportExportCircuit.cs	2025-05-22 18:15:34.806947000 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/DeviceInputOutputImportExportCircuit.cs	2025-05-22 17:54:29.912313000 -0700
@@ -449,7 +449,7 @@
 			}
 		}
 		base.InternalAtmosphere.Sparked = true;
-		global::Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
+		DefaultNamespace.Explosion.Explode(ExplosionForce, base.Position, ExplosionRadius);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/FurnaceBase.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/FurnaceBase.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Pipes/FurnaceBase.cs	2025-05-22 18:15:37.402540000 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Pipes/FurnaceBase.cs	2025-05-22 17:53:37.159826400 -0700
@@ -727,7 +727,7 @@
 		base.Explode();
 		if (GameManager.RunSimulation && base.InternalAtmosphere.IsAboveArmstrong())
 		{
-			global::Explosion.Explode(ExplosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / MAXPressureDelta).ToFloat(), radius: Mathf.Clamp(ExplosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MAXPressureDelta.ToFloat(), 0f, MaxExplosionRadius), pos: base.Position);
+			DefaultNamespace.Explosion.Explode(ExplosionForce * (base.InternalAtmosphere.PressureGassesAndLiquids / MAXPressureDelta).ToFloat(), radius: Mathf.Clamp(ExplosionRadius * base.InternalAtmosphere.PressureGassesAndLiquids.ToFloat() / MAXPressureDelta.ToFloat(), 0f, MaxExplosionRadius), pos: base.Position);
 			AtmosphericEventInstance.CloneGlobalAddGasMix(base.WorldGrid, new GasMixture(base.InternalAtmosphere.GasMixture));
 			AtmosphericEventInstance.Reset(base.InternalAtmosphere);
 		}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/RobotMining.cs Out/Assembly-CSharp/Assets/Scripts/Objects/RobotMining.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/RobotMining.cs	2025-05-22 18:15:32.331584300 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/RobotMining.cs	2025-05-22 17:53:52.162007000 -0700
@@ -338,7 +338,7 @@
 		}
 		base.InternalAtmosphere.Sparked = true;
 		AtmosphericEventInstance.CloneGlobal(base.WorldGrid, MoleEnergy.Zero, spark: true);
-		global::Explosion.Explode(200f, base.ThingTransformLocalPosition, 4f);
+		DefaultNamespace.Explosion.Explode(200f, base.ThingTransformLocalPosition, 4f);
 		OnServer.Destroy(this);
 	}
 
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Weapons/Grenade.cs Out/Assembly-CSharp/Assets/Scripts/Objects/Weapons/Grenade.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Objects/Weapons/Grenade.cs	2025-05-22 18:15:33.423039100 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Objects/Weapons/Grenade.cs	2025-05-22 17:54:32.553346300 -0700
@@ -168,7 +168,7 @@
 		}
 		if (GameManager.RunSimulation)
 		{
-			global::Explosion.Explode(1600f, base.transform.position, 4.3f);
+			DefaultNamespace.Explosion.Explode(1600f, base.transform.position, 4.3f);
 			AtmosphericsManager.Instance.Deregister(this);
 			OnServer.Destroy(this);
 		}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Serialization/Settings.cs Out/Assembly-CSharp/Assets/Scripts/Serialization/Settings.cs
--- Temp\PatchSource/Assembly-CSharp/Assets/Scripts/Serialization/Settings.cs	2025-05-22 18:15:29.816587000 -0700
+++ Out/Assembly-CSharp/Assets/Scripts/Serialization/Settings.cs	2025-05-22 17:57:29.857210500 -0700
@@ -517,6 +517,7 @@
 		}
 	}
 
+	[Obsolete("It's actually not, I just need the compiler to shut up.", false)]
 	public void Initialize()
 	{
 		Instance = this;
@@ -607,8 +608,8 @@
 		dropdown.value = list.IndexOf(CurrentData.ScreenWidth + " x " + CurrentData.ScreenHeight);
 		List<int> list2 = availResolutions.Select((Resolution x) => x.refreshRate).Distinct().ToList();
 		List<string> options = (from x in list2
-			orderby x
-			select $"{x}Hz").ToList();
+								orderby x
+								select $"{x}Hz").ToList();
 		TMP_Dropdown dropdown2 = GetDropdown(SettingType.RefreshRate);
 		dropdown2.ClearOptions();
 		dropdown2.AddOptions(options);
@@ -707,6 +708,7 @@
 		}
 	}
 
+	[Obsolete("It's actually not, I just need the compiler to shut up.", false)]
 	public void InitAudioPageValues()
 	{
 		OverallInitialized = false;
@@ -802,7 +804,7 @@
 			unique[value.ToString()] = value;
 		}
 		List<string> list = unique.Keys.ToList();
-		list.Sort(delegate(string a, string b)
+		list.Sort(delegate (string a, string b)
 		{
 			int num = unique[a].width.CompareTo(unique[b].width);
 			return (num != 0) ? num : unique[a].height.CompareTo(unique[b].height);
@@ -1009,27 +1011,27 @@
 			{
 				switch (item.name)
 				{
-				case "Gameplay":
-					InitGameplayPageValues();
-					break;
-				case "Video":
-					InitVideoPageValues();
-					break;
-				case "Advanced":
-					InitAdvancedPageValues();
-					break;
-				case "Audio":
-					InitAudioPageValues();
-					break;
-				case "Controls":
-					InitControlsPageValues();
-					break;
-				case "Multiplayer":
-					InitMultiplayerPageValues();
-					break;
-				case "Misc":
-					InitMiscPageValues();
-					break;
+					case "Gameplay":
+						InitGameplayPageValues();
+						break;
+					case "Video":
+						InitVideoPageValues();
+						break;
+					case "Advanced":
+						InitAdvancedPageValues();
+						break;
+					case "Audio":
+						InitAudioPageValues();
+						break;
+					case "Controls":
+						InitControlsPageValues();
+						break;
+					case "Multiplayer":
+						InitMultiplayerPageValues();
+						break;
+					case "Misc":
+						InitMiscPageValues();
+						break;
 				}
 			}
 		}
@@ -1204,6 +1206,7 @@
 		audioDeviceHashToString.Add(AudioSpeakerMode.Prologic.GetHashCode(), "ProLogic");
 	}
 
+	[Obsolete("It's actually not, I just need the compiler to shut up.", false)]
 	public static void SaveSettings()
 	{
 		CurrentData.SettingsVersion = GameManager.GetGameVersion();
@@ -1359,13 +1362,13 @@
 	{
 		return overAll switch
 		{
-			"Fastest" => "Lowest", 
-			"Fast" => "Low", 
-			"Simple" => "Medium", 
-			"Good" => "Medium", 
-			"Beautiful" => "High", 
-			"Fantastic" => "High", 
-			_ => "High", 
+			"Fastest" => "Lowest",
+			"Fast" => "Low",
+			"Simple" => "Medium",
+			"Good" => "Medium",
+			"Beautiful" => "High",
+			"Fantastic" => "High",
+			_ => "High",
 		};
 	}
 
@@ -1507,415 +1510,415 @@
 		{
 			switch (settingType)
 			{
-			case SettingType.AutoSave:
-				CurrentData.AutoSave = GetToggle(settingType).isOn;
-				StationAutoSave.ResetAutoSave();
-				break;
-			case SettingType.SaveDelay:
-				CurrentData.SaveInterval = (int)GetSlider(settingType).value;
-				StationAutoSave.ResetAutoSave();
-				break;
-			case SettingType.SavePath:
-				if (CurrentData.SavePath != GetInputField(SettingType.SavePath).text && GetInputField(SettingType.SavePath).text != string.Empty)
-				{
-					string text = CheckFolderStructureCorrect(GetInputField(SettingType.SavePath).text);
-					if (text != string.Empty)
+				case SettingType.AutoSave:
+					CurrentData.AutoSave = GetToggle(settingType).isOn;
+					StationAutoSave.ResetAutoSave();
+					break;
+				case SettingType.SaveDelay:
+					CurrentData.SaveInterval = (int)GetSlider(settingType).value;
+					StationAutoSave.ResetAutoSave();
+					break;
+				case SettingType.SavePath:
+					if (CurrentData.SavePath != GetInputField(SettingType.SavePath).text && GetInputField(SettingType.SavePath).text != string.Empty)
 					{
-						CurrentData.SavePath = text;
-						if (ValidateSavePath())
+						string text = CheckFolderStructureCorrect(GetInputField(SettingType.SavePath).text);
+						if (text != string.Empty)
 						{
-							Instance.ShowWarningSavePathNotWritable();
+							CurrentData.SavePath = text;
+							if (ValidateSavePath())
+							{
+								Instance.ShowWarningSavePathNotWritable();
+							}
+							GetInputField(SettingType.SavePath).text = CurrentData.SavePath;
+							if (GameManager.GameState == GameState.Running && CurrentData.AutoSave)
+							{
+								StationAutoSave.ResetAutoSave();
+							}
 						}
-						GetInputField(SettingType.SavePath).text = CurrentData.SavePath;
-						if (GameManager.GameState == GameState.Running && CurrentData.AutoSave)
+						else
 						{
-							StationAutoSave.ResetAutoSave();
+							GetInputField(SettingType.SavePath).text = CurrentData.SavePath;
 						}
 					}
 					else
 					{
 						GetInputField(SettingType.SavePath).text = CurrentData.SavePath;
 					}
-				}
-				else
-				{
-					GetInputField(SettingType.SavePath).text = CurrentData.SavePath;
-				}
-				break;
-			case SettingType.ShowFps:
-				CurrentData.ShowFps = GetToggle(settingType).isOn;
-				WorldManager.Instance.UpdateFrameRate();
-				break;
-			case SettingType.ShowLatency:
-				CurrentData.ShowLatency = GetToggle(settingType).isOn;
-				break;
-			case SettingType.ShowExtendedTooltips:
-				CurrentData.ExtendedTooltips = GetToggle(settingType).isOn;
-				break;
-			case SettingType.HUDScale:
-				CurrentData.HUDScale = (int)GetSlider(settingType).value;
-				WorldManager.Instance.UpdateHUDScale();
-				break;
-			case SettingType.TooltipOpacity:
-				GetSlider(settingType).value = Mathf.Round(GetSlider(settingType).value * 100f) / 100f;
-				CurrentData.TooltipOpacity = GetSlider(settingType).value;
-				WorldManager.Instance.UpdateTooltipOpacity();
-				break;
-			case SettingType.ChatFadeTimer:
-			{
-				Slider slider = GetSlider(settingType);
-				CurrentData.ChatFadeTimer = slider.value;
-				break;
-			}
-			case SettingType.DayLength:
-			{
-				Slider slider2 = GetSlider(settingType);
-				slider2.value = Mathf.Round(slider2.value);
-				CurrentData.DayLength = (int)slider2.value;
-				break;
-			}
-			case SettingType.RoomControlTickSpeed:
-			{
-				Slider slider3 = GetSlider(settingType);
-				slider3.value = Mathf.Round(slider3.value);
-				CurrentData.RoomControlTickSpeed = (int)slider3.value;
-				RoomManager.Instance.TickSpeed = CurrentData.RoomControlTickSpeed;
-				break;
-			}
-			case SettingType.WorldOrigin:
-				CurrentData.WorldOrigin = GetToggle(settingType).isOn;
-				break;
-			case SettingType.SmoothTerrain:
-				CurrentData.SmoothTerrain = GetToggle(settingType).isOn;
-				break;
-			case SettingType.SmoothTerrainAngle:
-				CurrentData.SmoothTerrainAngle = GetSlider(settingType).value;
-				break;
-			case SettingType.OverallQuality:
-				CurrentData.GraphicQuality = GetDropdown(settingType).captionText.text;
-				QualitySettings.SetQualityLevel(GetLevel(CurrentData.GraphicQuality));
-				Instance.OnUpdateOverall();
-				break;
-			case SettingType.AntiAliasing:
-				CurrentData.Antialiasing = GetDropdown(settingType).captionText.text;
-				CameraController.SetAntialiasing();
-				break;
-			case SettingType.TextureQuality:
-			{
-				TMP_Dropdown dropdown = GetDropdown(settingType);
-				CurrentData.TextureQuality = TextureQualities[dropdown.value];
-				QualitySettings.masterTextureLimit = 3 - dropdown.value;
-				break;
-			}
-			case SettingType.Shadow:
-				CurrentData.Shadows = ShadowTypes[GetDropdown(settingType).value];
-				ShadowQualitySetting.GetSetting(CurrentData.Shadows).Apply();
-				break;
-			case SettingType.ShadowResolution:
-				QualitySettings.shadowResolution = (ShadowResolution)ShadowResolutions.IndexOf(CurrentData.ShadowResolution);
-				break;
-			case SettingType.ShadowDistance:
-				QualitySettings.shadowDistance = CurrentData.ShadowDistance;
-				break;
-			case SettingType.VSync:
-				CurrentData.Vsync = GetToggle(settingType).isOn;
-				QualitySettings.vSyncCount = (CurrentData.Vsync ? 1 : 0);
-				break;
-			case SettingType.Brightness:
-				CurrentData.Brightness = (int)GetSlider(settingType).value;
-				WorldManager.Instance.UpdateBrightness();
-				break;
-			case SettingType.FieldOfView:
-				CurrentData.FieldOfView = (int)GetSlider(settingType).value;
-				WorldManager.Instance.UpdateFoV();
-				break;
-			case SettingType.ColorBlind:
-				CurrentData.ColorBlind = BlindTypes[GetDropdown(settingType).value];
-				WorldManager.Instance.UpdateColorBlind();
-				break;
-			case SettingType.ParticleQuality:
-				CurrentData.ParticleQuality = ParticleGrade[GetDropdown(settingType).value];
-				WorldManager.Instance.UpdateParticleQuality();
-				break;
-			case SettingType.SoftParticles:
-				CurrentData.SoftParticles = GetToggle(settingType).isOn;
-				QualitySettings.softParticles = CurrentData.SoftParticles;
-				break;
-			case SettingType.Framelock:
-				CurrentData.FrameLock = FrameLock[GetDropdown(settingType).value];
-				WorldManager.Instance.UpdateFrameLimiter();
-				break;
-			case SettingType.EnvironmentElements:
-				CurrentData.EnvironmentElements = GetToggle(settingType).isOn;
-				WorldManager.Instance.UpdateEnvironmentElements();
-				break;
-			case SettingType.ExtendedTerrain:
-				CurrentData.ExtendedTerrain = GetToggle(SettingType.ExtendedTerrain).isOn;
-				if (GameManager.GameState == GameState.Running && CurrentData.ExtendedTerrain)
-				{
-					TerrainLod.Instance.ApplySettings();
-				}
-				break;
-			case SettingType.VolumeLight:
-				CurrentData.VolumeLight = VolumetricLightModes[GetDropdown(settingType).value];
-				WorldManager.Instance.UpdateVolumeLight();
-				break;
-			case SettingType.PixelLightCount:
-				CurrentData.PixelLightCount = (int)GetSlider(settingType).value;
-				QualitySettings.pixelLightCount = CurrentData.PixelLightCount;
-				break;
-			case SettingType.AtmosphericScattering:
-				CurrentData.AtmosphericScattering = GetToggle(settingType).isOn;
-				CursorManager.UpdateAtmosphericScattering();
-				break;
-			case SettingType.ChunkRenderDistance:
-				CurrentData.ChunkRenderDistance = (int)GetSlider(settingType).value;
-				if (CurrentData.MineableRenderDistance > (float)CurrentData.ChunkRenderDistance)
-				{
-					CurrentData.MineableRenderDistance = CurrentData.ChunkRenderDistance;
-					GetSlider(SettingType.MineableRenderDistance).value = CurrentData.MineableRenderDistance;
-				}
-				break;
-			case SettingType.RenderDistance:
-				CurrentData.RenderDistance = RenderDistanceTypes[GetDropdown(settingType).value];
-				OcclusionManager.Instance.UpdateRenderDistanceMultiplier();
-				break;
-			case SettingType.MasterVolume:
-				CurrentData.MasterVolume = (int)GetSlider(settingType).value;
-				if (!GameManager.IsBatchMode)
-				{
-					AudioManager.UpdateVolume(settingType);
-				}
-				break;
-			case SettingType.SoundVolume:
-				CurrentData.SoundVolume = (int)GetSlider(settingType).value;
-				if (!GameManager.IsBatchMode)
-				{
-					AudioManager.UpdateVolume(settingType);
-				}
-				break;
-			case SettingType.VoiceNotificationVolume:
-				CurrentData.VoiceNotificationVolume = (int)GetSlider(settingType).value;
-				if (!GameManager.IsBatchMode)
-				{
-					AudioManager.UpdateVolume(settingType);
-				}
-				break;
-			case SettingType.MusicVolume:
-				CurrentData.MusicVolume = (int)GetSlider(settingType).value;
-				if (!GameManager.IsBatchMode)
-				{
-					AudioManager.UpdateVolume(settingType);
-				}
-				break;
-			case SettingType.InterfaceVolume:
-				CurrentData.InterfaceVolume = (int)GetSlider(settingType).value;
-				if (!GameManager.IsBatchMode)
-				{
-					AudioManager.UpdateVolume(settingType);
-				}
-				break;
-			case SettingType.ServerName:
-				CurrentData.ServerName = GetInputField(settingType).text;
-				break;
-			case SettingType.ServerVisible:
-				CurrentData.ServerVisible = GetToggle(settingType).isOn;
-				break;
-			case SettingType.ServerPassword:
-				CurrentData.ServerPassword = GetInputField(settingType).text.Trim();
-				break;
-			case SettingType.ServerAdminPassword:
-				CurrentData.AdminPassword = GetInputField(settingType).text;
-				break;
-			case SettingType.ServerMaxPlayers:
-				CurrentData.ServerMaxPlayers = (int)GetSlider(settingType).value;
-				break;
-			case SettingType.ServerGamePort:
-			{
-				int num3 = int.Parse(GetInputField(settingType).text);
-				if (num3 < 0 || num3 > 65535)
-				{
-					AlertPanel.Instance.ShowAlert(AlertStrings.InvalidPort, AlertState.Alert);
-				}
-				CurrentData.GamePort = Mathf.Clamp(int.Parse(GetInputField(settingType).text), 0, 65535).ToString();
-				GetInputField(settingType).text = CurrentData.GamePort;
-				break;
-			}
-			case SettingType.ServerUpdatePort:
-			{
-				if (GameManager.GameState != 0)
-				{
-					AlertPanel.Instance.ShowAlert(AlertStrings.CannotUpdatePort, AlertState.Alert);
-					return;
-				}
-				int num2 = int.Parse(GetInputField(settingType).text);
-				if (num2 < 0 || num2 > 65535)
-				{
-					AlertPanel.Instance.ShowAlert(AlertStrings.InvalidPort, AlertState.Alert);
-				}
-				CurrentData.UpdatePort = Mathf.Clamp(num2, 0, 65535).ToString();
-				GetInputField(settingType).text = CurrentData.UpdatePort;
-				break;
-			}
-			case SettingType.UPNPEnabled:
-				CurrentData.UPNPEnabled = GetToggle(settingType).isOn;
-				if (CurrentData.UPNPEnabled)
-				{
-					Singleton<NatDiscoverer>.Instance.DiscoverDeviceAsync();
-				}
-				else
-				{
-					Singleton<NatDiscoverer>.Instance.DisableDeviceAsync();
-				}
-				break;
-			case SettingType.Language:
-			{
-				LanguageCode code = Instance._languageDropdown[GetDropdown(settingType).value].Code;
-				if (CurrentData.LanguageCode != code)
-				{
-					CurrentData.LanguageCode = code;
-					Localization.SetLanguage(CurrentData.LanguageCode);
-					StatusUpdates.Instance.Initialize();
-				}
-				break;
-			}
-			case SettingType.VoiceLanguage:
-			{
-				LanguageCode languageCode = Instance._voiceLanguageDropdown[GetDropdown(settingType).value];
-				if (CurrentData.VoiceLanguageCode != languageCode)
-				{
-					CurrentData.VoiceLanguageCode = languageCode;
-					StatusUpdates.OnSettingChanged();
-				}
-				break;
-			}
-			case SettingType.VoiceControl:
-				CurrentData.Voice = GetToggle(settingType).isOn && GetWindowVersion() >= 10;
-				break;
-			case SettingType.PopupChat:
-				CurrentData.PopupChat = GetToggle(settingType).isOn;
-				break;
-			case SettingType.MouseWheelZoom:
-				CurrentData.MouseWheelZoom = GetToggle(settingType).isOn;
-				break;
-			case SettingType.CameraSensitivity:
-				CurrentData.CameraSensitivity = (int)GetSlider(settingType).value;
-				WorldManager.Instance.UpdateCameraSensitivity();
-				break;
-			case SettingType.ShowDisplayPortrait:
-				CurrentData.IngamePortrait = GetToggle(settingType).isOn;
-				CameraController.RefreshPortrait();
-				break;
-			case SettingType.InvertMouse:
-				CurrentData.InvertMouse = GetToggle(settingType).isOn;
-				break;
-			case SettingType.InvertMouseWheelInventory:
-				CurrentData.InvertMouseWheelInventory = GetToggle(settingType).isOn;
-				break;
-			case SettingType.MenuLite:
-				CurrentData.MenuLite = GetToggle(settingType).isOn;
-				Singleton<GameManager>.Instance.MenuCutscene.MenuLite(CurrentData.MenuLite);
-				break;
-			case SettingType.AmbientOcclusion:
-				CurrentData.AmbientOcclusion = GetDropdown(settingType).captionText.text;
-				CameraController.SetAmbientOcclusion();
-				break;
-			case SettingType.LensFlares:
-			{
-				if (!RenderSettings.sun)
-				{
 					break;
-				}
-				EasyFlares component = RenderSettings.sun.GetComponent<EasyFlares>();
-				if ((bool)RenderSettings.sun)
-				{
-					CurrentData.LensFlares = GetToggle(SettingType.LensFlares).isOn;
-					if ((bool)component)
+				case SettingType.ShowFps:
+					CurrentData.ShowFps = GetToggle(settingType).isOn;
+					WorldManager.Instance.UpdateFrameRate();
+					break;
+				case SettingType.ShowLatency:
+					CurrentData.ShowLatency = GetToggle(settingType).isOn;
+					break;
+				case SettingType.ShowExtendedTooltips:
+					CurrentData.ExtendedTooltips = GetToggle(settingType).isOn;
+					break;
+				case SettingType.HUDScale:
+					CurrentData.HUDScale = (int)GetSlider(settingType).value;
+					WorldManager.Instance.UpdateHUDScale();
+					break;
+				case SettingType.TooltipOpacity:
+					GetSlider(settingType).value = Mathf.Round(GetSlider(settingType).value * 100f) / 100f;
+					CurrentData.TooltipOpacity = GetSlider(settingType).value;
+					WorldManager.Instance.UpdateTooltipOpacity();
+					break;
+				case SettingType.ChatFadeTimer:
 					{
-						component.enabled = CurrentData.LensFlares && CursorManager.DefaultEasyFlareEnabled;
+						Slider slider = GetSlider(settingType);
+						CurrentData.ChatFadeTimer = slider.value;
+						break;
 					}
-				}
-				break;
-			}
-			case SettingType.Clouds:
-				if (!GameManager.IsBatchMode)
-				{
-					bool isOn = GetToggle(SettingType.Clouds).isOn;
-					CurrentData.Clouds = isOn;
-				}
-				break;
-			case SettingType.LegacyInventory:
-				CurrentData.LegacyInventory = GetToggle(settingType).isOn;
-				break;
-			case SettingType.SlotToolTips:
-				CurrentData.ShowSlotToolTips = GetToggle(settingType).isOn;
-				break;
-			case SettingType.HelmetOverlay:
-				CurrentData.HelmetOverlay = GetToggle(settingType).isOn;
-				if (GameManager.GameState == GameState.Running)
-				{
-					if (CurrentData.HelmetOverlay)
+				case SettingType.DayLength:
+					{
+						Slider slider2 = GetSlider(settingType);
+						slider2.value = Mathf.Round(slider2.value);
+						CurrentData.DayLength = (int)slider2.value;
+						break;
+					}
+				case SettingType.RoomControlTickSpeed:
+					{
+						Slider slider3 = GetSlider(settingType);
+						slider3.value = Mathf.Round(slider3.value);
+						CurrentData.RoomControlTickSpeed = (int)slider3.value;
+						RoomManager.Instance.TickSpeed = CurrentData.RoomControlTickSpeed;
+						break;
+					}
+				case SettingType.WorldOrigin:
+					CurrentData.WorldOrigin = GetToggle(settingType).isOn;
+					break;
+				case SettingType.SmoothTerrain:
+					CurrentData.SmoothTerrain = GetToggle(settingType).isOn;
+					break;
+				case SettingType.SmoothTerrainAngle:
+					CurrentData.SmoothTerrainAngle = GetSlider(settingType).value;
+					break;
+				case SettingType.OverallQuality:
+					CurrentData.GraphicQuality = GetDropdown(settingType).captionText.text;
+					QualitySettings.SetQualityLevel(GetLevel(CurrentData.GraphicQuality));
+					Instance.OnUpdateOverall();
+					break;
+				case SettingType.AntiAliasing:
+					CurrentData.Antialiasing = GetDropdown(settingType).captionText.text;
+					CameraController.SetAntialiasing();
+					break;
+				case SettingType.TextureQuality:
+					{
+						TMP_Dropdown dropdown = GetDropdown(settingType);
+						CurrentData.TextureQuality = TextureQualities[dropdown.value];
+						QualitySettings.masterTextureLimit = 3 - dropdown.value;
+						break;
+					}
+				case SettingType.Shadow:
+					CurrentData.Shadows = ShadowTypes[GetDropdown(settingType).value];
+					ShadowQualitySetting.GetSetting(CurrentData.Shadows).Apply();
+					break;
+				case SettingType.ShadowResolution:
+					QualitySettings.shadowResolution = (ShadowResolution)ShadowResolutions.IndexOf(CurrentData.ShadowResolution);
+					break;
+				case SettingType.ShadowDistance:
+					QualitySettings.shadowDistance = CurrentData.ShadowDistance;
+					break;
+				case SettingType.VSync:
+					CurrentData.Vsync = GetToggle(settingType).isOn;
+					QualitySettings.vSyncCount = (CurrentData.Vsync ? 1 : 0);
+					break;
+				case SettingType.Brightness:
+					CurrentData.Brightness = (int)GetSlider(settingType).value;
+					WorldManager.Instance.UpdateBrightness();
+					break;
+				case SettingType.FieldOfView:
+					CurrentData.FieldOfView = (int)GetSlider(settingType).value;
+					WorldManager.Instance.UpdateFoV();
+					break;
+				case SettingType.ColorBlind:
+					CurrentData.ColorBlind = BlindTypes[GetDropdown(settingType).value];
+					WorldManager.Instance.UpdateColorBlind();
+					break;
+				case SettingType.ParticleQuality:
+					CurrentData.ParticleQuality = ParticleGrade[GetDropdown(settingType).value];
+					WorldManager.Instance.UpdateParticleQuality();
+					break;
+				case SettingType.SoftParticles:
+					CurrentData.SoftParticles = GetToggle(settingType).isOn;
+					QualitySettings.softParticles = CurrentData.SoftParticles;
+					break;
+				case SettingType.Framelock:
+					CurrentData.FrameLock = FrameLock[GetDropdown(settingType).value];
+					WorldManager.Instance.UpdateFrameLimiter();
+					break;
+				case SettingType.EnvironmentElements:
+					CurrentData.EnvironmentElements = GetToggle(settingType).isOn;
+					WorldManager.Instance.UpdateEnvironmentElements();
+					break;
+				case SettingType.ExtendedTerrain:
+					CurrentData.ExtendedTerrain = GetToggle(SettingType.ExtendedTerrain).isOn;
+					if (GameManager.GameState == GameState.Running && CurrentData.ExtendedTerrain)
+					{
+						TerrainLod.Instance.ApplySettings();
+					}
+					break;
+				case SettingType.VolumeLight:
+					CurrentData.VolumeLight = VolumetricLightModes[GetDropdown(settingType).value];
+					WorldManager.Instance.UpdateVolumeLight();
+					break;
+				case SettingType.PixelLightCount:
+					CurrentData.PixelLightCount = (int)GetSlider(settingType).value;
+					QualitySettings.pixelLightCount = CurrentData.PixelLightCount;
+					break;
+				case SettingType.AtmosphericScattering:
+					CurrentData.AtmosphericScattering = GetToggle(settingType).isOn;
+					CursorManager.UpdateAtmosphericScattering();
+					break;
+				case SettingType.ChunkRenderDistance:
+					CurrentData.ChunkRenderDistance = (int)GetSlider(settingType).value;
+					if (CurrentData.MineableRenderDistance > (float)CurrentData.ChunkRenderDistance)
+					{
+						CurrentData.MineableRenderDistance = CurrentData.ChunkRenderDistance;
+						GetSlider(SettingType.MineableRenderDistance).value = CurrentData.MineableRenderDistance;
+					}
+					break;
+				case SettingType.RenderDistance:
+					CurrentData.RenderDistance = RenderDistanceTypes[GetDropdown(settingType).value];
+					OcclusionManager.Instance.UpdateRenderDistanceMultiplier();
+					break;
+				case SettingType.MasterVolume:
+					CurrentData.MasterVolume = (int)GetSlider(settingType).value;
+					if (!GameManager.IsBatchMode)
+					{
+						AudioManager.UpdateVolume(settingType);
+					}
+					break;
+				case SettingType.SoundVolume:
+					CurrentData.SoundVolume = (int)GetSlider(settingType).value;
+					if (!GameManager.IsBatchMode)
+					{
+						AudioManager.UpdateVolume(settingType);
+					}
+					break;
+				case SettingType.VoiceNotificationVolume:
+					CurrentData.VoiceNotificationVolume = (int)GetSlider(settingType).value;
+					if (!GameManager.IsBatchMode)
+					{
+						AudioManager.UpdateVolume(settingType);
+					}
+					break;
+				case SettingType.MusicVolume:
+					CurrentData.MusicVolume = (int)GetSlider(settingType).value;
+					if (!GameManager.IsBatchMode)
+					{
+						AudioManager.UpdateVolume(settingType);
+					}
+					break;
+				case SettingType.InterfaceVolume:
+					CurrentData.InterfaceVolume = (int)GetSlider(settingType).value;
+					if (!GameManager.IsBatchMode)
+					{
+						AudioManager.UpdateVolume(settingType);
+					}
+					break;
+				case SettingType.ServerName:
+					CurrentData.ServerName = GetInputField(settingType).text;
+					break;
+				case SettingType.ServerVisible:
+					CurrentData.ServerVisible = GetToggle(settingType).isOn;
+					break;
+				case SettingType.ServerPassword:
+					CurrentData.ServerPassword = GetInputField(settingType).text.Trim();
+					break;
+				case SettingType.ServerAdminPassword:
+					CurrentData.AdminPassword = GetInputField(settingType).text;
+					break;
+				case SettingType.ServerMaxPlayers:
+					CurrentData.ServerMaxPlayers = (int)GetSlider(settingType).value;
+					break;
+				case SettingType.ServerGamePort:
+					{
+						int num3 = int.Parse(GetInputField(settingType).text);
+						if (num3 < 0 || num3 > 65535)
+						{
+							AlertPanel.Instance.ShowAlert(AlertStrings.InvalidPort, AlertState.Alert);
+						}
+						CurrentData.GamePort = Mathf.Clamp(int.Parse(GetInputField(settingType).text), 0, 65535).ToString();
+						GetInputField(settingType).text = CurrentData.GamePort;
+						break;
+					}
+				case SettingType.ServerUpdatePort:
+					{
+						if (GameManager.GameState != 0)
+						{
+							AlertPanel.Instance.ShowAlert(AlertStrings.CannotUpdatePort, AlertState.Alert);
+							return;
+						}
+						int num2 = int.Parse(GetInputField(settingType).text);
+						if (num2 < 0 || num2 > 65535)
+						{
+							AlertPanel.Instance.ShowAlert(AlertStrings.InvalidPort, AlertState.Alert);
+						}
+						CurrentData.UpdatePort = Mathf.Clamp(num2, 0, 65535).ToString();
+						GetInputField(settingType).text = CurrentData.UpdatePort;
+						break;
+					}
+				case SettingType.UPNPEnabled:
+					CurrentData.UPNPEnabled = GetToggle(settingType).isOn;
+					if (CurrentData.UPNPEnabled)
 					{
-						FirstPersonHelmetOverlay.Instance?.EquippedHelmet(InventoryManager.ParentHuman?.HeadAsSpaceHelmet);
+						Singleton<NatDiscoverer>.Instance.DiscoverDeviceAsync();
 					}
 					else
 					{
-						FirstPersonHelmetOverlay.Instance?.RemoveHelmet();
+						Singleton<NatDiscoverer>.Instance.DisableDeviceAsync();
 					}
-				}
-				break;
-			case SettingType.MineableRenderDistance:
-			{
-				float num = GetSlider(settingType).value;
-				if (num > (float)CurrentData.ChunkRenderDistance)
-				{
-					num = CurrentData.ChunkRenderDistance;
-					GetSlider(settingType).value = num;
-				}
-				CurrentData.MineableRenderDistance = num;
-				break;
-			}
-			case SettingType.WeatherEventQuality:
-				CurrentData.WeatherEventQuality = WeatherEventSettings[GetDropdown(settingType).value];
-				if (GameManager.GameState == GameState.Running)
-				{
-					WeatherManager.ApplyWeatherEventSetting();
-				}
-				break;
-			case SettingType.StartLocalHost:
-				CurrentData.StartLocalHost = GameManager.IsBatchMode || GetToggle(settingType).isOn;
-				NetworkServer.ApplyLocalHostSetting(CurrentData.StartLocalHost);
-				break;
-			case SettingType.RefreshRate:
-			{
-				string s = GetDropdown(SettingType.RefreshRate).captionText.text.ToLower().Replace("hz", string.Empty).Trim();
-				CurrentData.RefreshRate = int.Parse(s);
-				Screen.SetResolution(int.Parse(CurrentData.ScreenWidth), int.Parse(CurrentData.ScreenHeight), CurrentData.FullScreen, CurrentData.RefreshRate);
-				break;
-			}
-			case SettingType.ShadowNearPlaneOffset:
-				QualitySettings.shadowNearPlaneOffset = CurrentData.ShadowNearPlaneOffset;
-				break;
-			case SettingType.ShadowCascades:
-				QualitySettings.shadowCascades = CurrentData.ShadowCascades;
-				break;
-			case SettingType.DisplayHelperHints:
-				CurrentData.DisplayHelperHints = GetToggle(settingType).isOn;
-				HelperHintsTextController.RefreshDisplayState();
-				break;
-			default:
-				Debug.LogError($"Setting {settingType} Not implemented!");
-				break;
-			case SettingType.Resolution:
-			case SettingType.ScreenMode:
-			case SettingType.DisableWaterVisualizer:
-			case SettingType.P2PHostEnabled:
-			case SettingType.TerrainClutter:
-			case SettingType.TerrainClutterMultiplier:
-			case SettingType.DoubleClickDelay:
-			case SettingType.LightShadowDistance:
-			case SettingType.MaxThingLights:
-				break;
+					break;
+				case SettingType.Language:
+					{
+						LanguageCode code = Instance._languageDropdown[GetDropdown(settingType).value].Code;
+						if (CurrentData.LanguageCode != code)
+						{
+							CurrentData.LanguageCode = code;
+							Localization.SetLanguage(CurrentData.LanguageCode);
+							StatusUpdates.Instance.Initialize();
+						}
+						break;
+					}
+				case SettingType.VoiceLanguage:
+					{
+						LanguageCode languageCode = Instance._voiceLanguageDropdown[GetDropdown(settingType).value];
+						if (CurrentData.VoiceLanguageCode != languageCode)
+						{
+							CurrentData.VoiceLanguageCode = languageCode;
+							StatusUpdates.OnSettingChanged();
+						}
+						break;
+					}
+				case SettingType.VoiceControl:
+					CurrentData.Voice = GetToggle(settingType).isOn && GetWindowVersion() >= 10;
+					break;
+				case SettingType.PopupChat:
+					CurrentData.PopupChat = GetToggle(settingType).isOn;
+					break;
+				case SettingType.MouseWheelZoom:
+					CurrentData.MouseWheelZoom = GetToggle(settingType).isOn;
+					break;
+				case SettingType.CameraSensitivity:
+					CurrentData.CameraSensitivity = (int)GetSlider(settingType).value;
+					WorldManager.Instance.UpdateCameraSensitivity();
+					break;
+				case SettingType.ShowDisplayPortrait:
+					CurrentData.IngamePortrait = GetToggle(settingType).isOn;
+					CameraController.RefreshPortrait();
+					break;
+				case SettingType.InvertMouse:
+					CurrentData.InvertMouse = GetToggle(settingType).isOn;
+					break;
+				case SettingType.InvertMouseWheelInventory:
+					CurrentData.InvertMouseWheelInventory = GetToggle(settingType).isOn;
+					break;
+				case SettingType.MenuLite:
+					CurrentData.MenuLite = GetToggle(settingType).isOn;
+					Singleton<GameManager>.Instance.MenuCutscene.MenuLite(CurrentData.MenuLite);
+					break;
+				case SettingType.AmbientOcclusion:
+					CurrentData.AmbientOcclusion = GetDropdown(settingType).captionText.text;
+					CameraController.SetAmbientOcclusion();
+					break;
+				case SettingType.LensFlares:
+					{
+						if (!RenderSettings.sun)
+						{
+							break;
+						}
+						EasyFlares component = RenderSettings.sun.GetComponent<EasyFlares>();
+						if ((bool)RenderSettings.sun)
+						{
+							CurrentData.LensFlares = GetToggle(SettingType.LensFlares).isOn;
+							if ((bool)component)
+							{
+								component.enabled = CurrentData.LensFlares && CursorManager.DefaultEasyFlareEnabled;
+							}
+						}
+						break;
+					}
+				case SettingType.Clouds:
+					if (!GameManager.IsBatchMode)
+					{
+						bool isOn = GetToggle(SettingType.Clouds).isOn;
+						CurrentData.Clouds = isOn;
+					}
+					break;
+				case SettingType.LegacyInventory:
+					CurrentData.LegacyInventory = GetToggle(settingType).isOn;
+					break;
+				case SettingType.SlotToolTips:
+					CurrentData.ShowSlotToolTips = GetToggle(settingType).isOn;
+					break;
+				case SettingType.HelmetOverlay:
+					CurrentData.HelmetOverlay = GetToggle(settingType).isOn;
+					if (GameManager.GameState == GameState.Running)
+					{
+						if (CurrentData.HelmetOverlay)
+						{
+							FirstPersonHelmetOverlay.Instance?.EquippedHelmet(InventoryManager.ParentHuman?.HeadAsSpaceHelmet);
+						}
+						else
+						{
+							FirstPersonHelmetOverlay.Instance?.RemoveHelmet();
+						}
+					}
+					break;
+				case SettingType.MineableRenderDistance:
+					{
+						float num = GetSlider(settingType).value;
+						if (num > (float)CurrentData.ChunkRenderDistance)
+						{
+							num = CurrentData.ChunkRenderDistance;
+							GetSlider(settingType).value = num;
+						}
+						CurrentData.MineableRenderDistance = num;
+						break;
+					}
+				case SettingType.WeatherEventQuality:
+					CurrentData.WeatherEventQuality = WeatherEventSettings[GetDropdown(settingType).value];
+					if (GameManager.GameState == GameState.Running)
+					{
+						WeatherManager.ApplyWeatherEventSetting();
+					}
+					break;
+				case SettingType.StartLocalHost:
+					CurrentData.StartLocalHost = GameManager.IsBatchMode || GetToggle(settingType).isOn;
+					NetworkServer.ApplyLocalHostSetting(CurrentData.StartLocalHost);
+					break;
+				case SettingType.RefreshRate:
+					{
+						string s = GetDropdown(SettingType.RefreshRate).captionText.text.ToLower().Replace("hz", string.Empty).Trim();
+						CurrentData.RefreshRate = int.Parse(s);
+						Screen.SetResolution(int.Parse(CurrentData.ScreenWidth), int.Parse(CurrentData.ScreenHeight), CurrentData.FullScreen, CurrentData.RefreshRate);
+						break;
+					}
+				case SettingType.ShadowNearPlaneOffset:
+					QualitySettings.shadowNearPlaneOffset = CurrentData.ShadowNearPlaneOffset;
+					break;
+				case SettingType.ShadowCascades:
+					QualitySettings.shadowCascades = CurrentData.ShadowCascades;
+					break;
+				case SettingType.DisplayHelperHints:
+					CurrentData.DisplayHelperHints = GetToggle(settingType).isOn;
+					HelperHintsTextController.RefreshDisplayState();
+					break;
+				default:
+					Debug.LogError($"Setting {settingType} Not implemented!");
+					break;
+				case SettingType.Resolution:
+				case SettingType.ScreenMode:
+				case SettingType.DisableWaterVisualizer:
+				case SettingType.P2PHostEnabled:
+				case SettingType.TerrainClutter:
+				case SettingType.TerrainClutterMultiplier:
+				case SettingType.DoubleClickDelay:
+				case SettingType.LightShadowDistance:
+				case SettingType.MaxThingLights:
+					break;
 			}
 			NetworkManager.UpdateSessionData(CurrentData);
 			SaveSettings();
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/CharacterCustomisation/CharacterCustomisationManager.cs Out/Assembly-CSharp/CharacterCustomisation/CharacterCustomisationManager.cs
--- Temp\PatchSource/Assembly-CSharp/CharacterCustomisation/CharacterCustomisationManager.cs	2025-05-22 18:15:26.143729900 -0700
+++ Out/Assembly-CSharp/CharacterCustomisation/CharacterCustomisationManager.cs	2025-05-22 18:05:31.616868700 -0700
@@ -52,18 +52,11 @@
 
 	public static async void LoadScene()
 	{
-		await SceneManager.LoadSceneAsync("CharacterCustomisation", LoadSceneMode.Additive);
-		CharacterCustomisationManager.OnSceneLoaded?.Invoke();
+		// Stub because I'm lazy
 	}
 
 	public static async void UnloadScene()
 	{
-		if (IsSceneLoaded)
-		{
-			await SceneManager.UnloadSceneAsync("CharacterCustomisation", UnloadSceneOptions.UnloadAllEmbeddedSceneObjects);
-		}
-		CharacterCustomisationManager.OnSceneUnloaded?.Invoke();
-		await Resources.UnloadUnusedAssets();
-		GC.Collect();
+		// Stub because I'm lazy
 	}
 }
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/GlobalUsings.cs Out/Assembly-CSharp/GlobalUsings.cs
--- Temp\PatchSource/Assembly-CSharp/GlobalUsings.cs	1969-12-31 16:00:00.000000000 -0800
+++ Out/Assembly-CSharp/GlobalUsings.cs	2025-05-22 17:44:38.950986000 -0700
@@ -0,0 +1 @@
+global using DefaultNamespace;
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/KeyManager.cs Out/Assembly-CSharp/KeyManager.cs
--- Temp\PatchSource/Assembly-CSharp/KeyManager.cs	2025-05-22 18:15:47.138438900 -0700
+++ Out/Assembly-CSharp/KeyManager.cs	2025-05-22 17:42:58.846939100 -0700
@@ -235,7 +235,7 @@
 			_inputStateMap.Remove(key);
 			if (!(_currentKey != key))
 			{
-				var (key2, state) = (KeyValuePair<string, KeyInputState>)(ref _inputStateMap.Last());
+				var (key2, state) = (KeyValuePair<string, KeyInputState>)(_inputStateMap.Last());
 				SetKeyInputStateInternal(key2, state);
 			}
 		}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Meteor.cs Out/Assembly-CSharp/Meteor.cs
--- Temp\PatchSource/Assembly-CSharp/Meteor.cs	2025-05-22 18:15:47.159457500 -0700
+++ Out/Assembly-CSharp/Meteor.cs	2025-05-22 17:53:46.086268700 -0700
@@ -27,7 +27,7 @@
 		float radius = ThingTransform.localScale.magnitude * 4f;
 		if (GameManager.RunSimulation)
 		{
-			global::Explosion.Explode(force, base.ThingTransformPosition, radius);
+			DefaultNamespace.Explosion.Explode(force, base.ThingTransformPosition, radius);
 		}
 		OnServer.Destroy(this);
 	}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Polyfills/ResXResourceReader.cs Out/Assembly-CSharp/Polyfills/ResXResourceReader.cs
--- Temp\PatchSource/Assembly-CSharp/Polyfills/ResXResourceReader.cs	1969-12-31 16:00:00.000000000 -0800
+++ Out/Assembly-CSharp/Polyfills/ResXResourceReader.cs	2025-05-22 17:59:48.848253700 -0700
@@ -0,0 +1,32 @@
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.IO;
+
+public class ResXResourceReader : IDisposable, IEnumerable<DictionaryEntry>
+{
+    public ResXResourceReader()
+    {
+        // Stub
+    }
+
+    public ResXResourceReader(Stream param)
+    {
+        // Stub
+    }
+
+    public void Dispose()
+    {
+        // Stub
+    }
+
+    public IEnumerator<DictionaryEntry> GetEnumerator()
+    {
+        return new List<DictionaryEntry>().GetEnumerator();
+    }
+
+    IEnumerator IEnumerable.GetEnumerator()
+    {
+        return GetEnumerator();
+    }
+}
\ No newline at end of file
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/Assembly-CSharp/Polyfills/ResXResourceWriter.cs Out/Assembly-CSharp/Polyfills/ResXResourceWriter.cs
--- Temp\PatchSource/Assembly-CSharp/Polyfills/ResXResourceWriter.cs	1969-12-31 16:00:00.000000000 -0800
+++ Out/Assembly-CSharp/Polyfills/ResXResourceWriter.cs	2025-05-22 17:58:46.681422200 -0700
@@ -0,0 +1,24 @@
+using System;
+
+public class ResXResourceWriter : IDisposable
+{
+    public ResXResourceWriter()
+    {
+        // Stub
+    }
+
+    public ResXResourceWriter(string param)
+    {
+        // Stub
+    }
+
+    public void AddResource(string name, string value)
+    {
+        // Stub
+    }
+
+    public void Dispose()
+    {
+        // Stub
+    }
+}
\ No newline at end of file
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ColorExtensions.cs Out/RG.ImGui/ImGuiNET/ColorExtensions.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ColorExtensions.cs	2025-05-22 18:15:44.728417900 -0700
+++ Out/RG.ImGui/ImGuiNET/ColorExtensions.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,31 +0,0 @@
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public static class ColorExtensions
-{
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public unsafe static Color32 ToColor32(this uint rgba)
-	{
-		return Unsafe.AsRef<Color32>(&rgba);
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public unsafe static Color ToColor(this uint rgba)
-	{
-		return Unsafe.AsRef<Color32>(&rgba);
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public unsafe static uint ToUint(this Color32 c32)
-	{
-		return Unsafe.AsRef<uint>(&c32);
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public static uint ToUint(this Color color)
-	{
-		return ((Color32)color).ToUint();
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/CustomAssertNative.cs Out/RG.ImGui/ImGuiNET/CustomAssertNative.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/CustomAssertNative.cs	2025-05-22 18:15:44.737924000 -0700
+++ Out/RG.ImGui/ImGuiNET/CustomAssertNative.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-using System.Runtime.InteropServices;
-
-namespace ImGuiNET;
-
-internal static class CustomAssertNative
-{
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void PluginLogAssert(byte* condition, byte* file, int line);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void PluginDebugBreak();
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImBitArray.cs Out/RG.ImGui/ImGuiNET/ImBitArray.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImBitArray.cs	2025-05-22 18:15:44.414605400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImBitArray.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-using System.Runtime.InteropServices;
-
-namespace ImGuiNET;
-
-[StructLayout(LayoutKind.Sequential, Size = 1)]
-public struct ImBitArray
-{
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImBitArrayPtr.cs Out/RG.ImGui/ImGuiNET/ImBitArrayPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImBitArrayPtr.cs	2025-05-22 18:15:44.440243700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImBitArrayPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,75 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImBitArrayPtr
-{
-	public unsafe ImBitArray* NativePtr { get; }
-
-	public unsafe ImBitArrayPtr(ImBitArray* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImBitArrayPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImBitArray*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImBitArrayPtr(ImBitArray* nativePtr)
-	{
-		return new ImBitArrayPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImBitArray*(ImBitArrayPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImBitArrayPtr(IntPtr nativePtr)
-	{
-		return new ImBitArrayPtr(nativePtr);
-	}
-
-	public unsafe void ClearAllBits()
-	{
-		ImGuiDebug.Log("ImBitArray_ClearAllBits #1");
-		ImGuiNative.ImBitArray_ClearAllBits(NativePtr);
-	}
-
-	public unsafe void ClearBit(int n)
-	{
-		ImGuiDebug.Log("ImBitArray_ClearBit #1");
-		ImGuiNative.ImBitArray_ClearBit(NativePtr, n);
-	}
-
-	public unsafe void SetAllBits()
-	{
-		ImGuiDebug.Log("ImBitArray_SetAllBits #1");
-		ImGuiNative.ImBitArray_SetAllBits(NativePtr);
-	}
-
-	public unsafe void SetBit(int n)
-	{
-		ImGuiDebug.Log("ImBitArray_SetBit #1");
-		ImGuiNative.ImBitArray_SetBit(NativePtr, n);
-	}
-
-	public unsafe void SetBitRange(int n, int n2)
-	{
-		ImGuiDebug.Log("ImBitArray_SetBitRange #1");
-		ImGuiNative.ImBitArray_SetBitRange(NativePtr, n, n2);
-	}
-
-	public unsafe bool TestBit(int n)
-	{
-		ImGuiDebug.Log("ImBitArray_TestBit #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImBitArray_TestBit(NativePtr, n));
-	}
-
-	public unsafe void ImBitArray_destroy()
-	{
-		ImGuiDebug.Log("ImBitArray_destroy #1");
-		ImGuiNative.ImBitArray_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImColor.cs Out/RG.ImGui/ImGuiNET/ImColor.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImColor.cs	2025-05-22 18:15:44.414605400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImColor.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImColor
-{
-	public Vector4 Value;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImColorPtr.cs Out/RG.ImGui/ImGuiNET/ImColorPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImColorPtr.cs	2025-05-22 18:15:44.456333200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImColorPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,71 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImColorPtr
-{
-	public unsafe ImColor* NativePtr { get; }
-
-	public unsafe ref Vector4 Value => ref Unsafe.AsRef<Vector4>(&NativePtr->Value);
-
-	public unsafe ImColorPtr(ImColor* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImColorPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImColor*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImColorPtr(ImColor* nativePtr)
-	{
-		return new ImColorPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImColor*(ImColorPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImColorPtr(IntPtr nativePtr)
-	{
-		return new ImColorPtr(nativePtr);
-	}
-
-	public unsafe static ImColorPtr HSV(float h, float s, float v)
-	{
-		ImGuiDebug.Log("ImColor_HSV #1");
-		ImColor imColor = default(ImColor);
-		ImGuiNative.ImColor_HSV(&imColor, h, s, v, 1f);
-		return new ImColorPtr(&imColor);
-	}
-
-	public unsafe static ImColorPtr HSV(float h, float s, float v, float a)
-	{
-		ImGuiDebug.Log("ImColor_HSV #2");
-		ImColor imColor = default(ImColor);
-		ImGuiNative.ImColor_HSV(&imColor, h, s, v, a);
-		return new ImColorPtr(&imColor);
-	}
-
-	public unsafe void SetHSV(float h, float s, float v)
-	{
-		ImGuiDebug.Log("ImColor_SetHSV #1");
-		ImGuiNative.ImColor_SetHSV(NativePtr, h, s, v, 1f);
-	}
-
-	public unsafe void SetHSV(float h, float s, float v, float a)
-	{
-		ImGuiDebug.Log("ImColor_SetHSV #2");
-		ImGuiNative.ImColor_SetHSV(NativePtr, h, s, v, a);
-	}
-
-	public unsafe void ImColor_destroy()
-	{
-		ImGuiDebug.Log("ImColor_destroy #1");
-		ImGuiNative.ImColor_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCallback.cs Out/RG.ImGui/ImGuiNET/ImDrawCallback.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCallback.cs	2025-05-22 18:15:44.738924400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawCallback.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-namespace ImGuiNET;
-
-public unsafe delegate void ImDrawCallback(ImDrawList* parent_list, ImDrawCmd* cmd);
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawChannel.cs Out/RG.ImGui/ImGuiNET/ImDrawChannel.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawChannel.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawChannel.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImDrawChannel
-{
-	public ImVector _CmdBuffer;
-
-	public ImVector _IdxBuffer;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawChannelPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawChannelPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawChannelPtr.cs	2025-05-22 18:15:44.439245700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawChannelPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImDrawChannelPtr
-{
-	public unsafe ImDrawChannel* NativePtr { get; }
-
-	public unsafe ImPtrVector<ImDrawCmdPtr> _CmdBuffer => new ImPtrVector<ImDrawCmdPtr>(NativePtr->_CmdBuffer, Unsafe.SizeOf<ImDrawCmd>());
-
-	public unsafe ImVector<ushort> _IdxBuffer => new ImVector<ushort>(NativePtr->_IdxBuffer);
-
-	public unsafe ImDrawChannelPtr(ImDrawChannel* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawChannelPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawChannel*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawChannelPtr(ImDrawChannel* nativePtr)
-	{
-		return new ImDrawChannelPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawChannel*(ImDrawChannelPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawChannelPtr(IntPtr nativePtr)
-	{
-		return new ImDrawChannelPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmd.cs Out/RG.ImGui/ImGuiNET/ImDrawCmd.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmd.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawCmd.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,21 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawCmd
-{
-	public Vector4 ClipRect;
-
-	public IntPtr TextureId;
-
-	public uint VtxOffset;
-
-	public uint IdxOffset;
-
-	public uint ElemCount;
-
-	public IntPtr UserCallback;
-
-	public unsafe void* UserCallbackData;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdHeader.cs Out/RG.ImGui/ImGuiNET/ImDrawCmdHeader.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdHeader.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawCmdHeader.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,13 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawCmdHeader
-{
-	public Vector4 ClipRect;
-
-	public IntPtr TextureId;
-
-	public uint VtxOffset;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdHeaderPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawCmdHeaderPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdHeaderPtr.cs	2025-05-22 18:15:44.455333800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawCmdHeaderPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,51 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawCmdHeaderPtr
-{
-	public unsafe ImDrawCmdHeader* NativePtr { get; }
-
-	public unsafe ref Vector4 ClipRect => ref Unsafe.AsRef<Vector4>(&NativePtr->ClipRect);
-
-	public unsafe IntPtr TextureId
-	{
-		get
-		{
-			return NativePtr->TextureId;
-		}
-		set
-		{
-			NativePtr->TextureId = value;
-		}
-	}
-
-	public unsafe ref uint VtxOffset => ref Unsafe.AsRef<uint>(&NativePtr->VtxOffset);
-
-	public unsafe ImDrawCmdHeaderPtr(ImDrawCmdHeader* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawCmdHeaderPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawCmdHeader*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawCmdHeaderPtr(ImDrawCmdHeader* nativePtr)
-	{
-		return new ImDrawCmdHeaderPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawCmdHeader*(ImDrawCmdHeaderPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawCmdHeaderPtr(IntPtr nativePtr)
-	{
-		return new ImDrawCmdHeaderPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawCmdPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawCmdPtr.cs	2025-05-22 18:15:44.463839900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawCmdPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,81 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawCmdPtr
-{
-	public unsafe ImDrawCmd* NativePtr { get; }
-
-	public unsafe ref Vector4 ClipRect => ref Unsafe.AsRef<Vector4>(&NativePtr->ClipRect);
-
-	public unsafe IntPtr TextureId
-	{
-		get
-		{
-			return NativePtr->TextureId;
-		}
-		set
-		{
-			NativePtr->TextureId = value;
-		}
-	}
-
-	public unsafe ref uint VtxOffset => ref Unsafe.AsRef<uint>(&NativePtr->VtxOffset);
-
-	public unsafe ref uint IdxOffset => ref Unsafe.AsRef<uint>(&NativePtr->IdxOffset);
-
-	public unsafe ref uint ElemCount => ref Unsafe.AsRef<uint>(&NativePtr->ElemCount);
-
-	public unsafe ref ImDrawCallback? UserCallback => ref Unsafe.AsRef<ImDrawCallback>(&NativePtr->UserCallback);
-
-	public unsafe IntPtr UserCallbackData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->UserCallbackData;
-		}
-		set
-		{
-			NativePtr->UserCallbackData = (void*)value;
-		}
-	}
-
-	public unsafe ImDrawCmdPtr(ImDrawCmd* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawCmdPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawCmd*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawCmdPtr(ImDrawCmd* nativePtr)
-	{
-		return new ImDrawCmdPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawCmd*(ImDrawCmdPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawCmdPtr(IntPtr nativePtr)
-	{
-		return new ImDrawCmdPtr(nativePtr);
-	}
-
-	public unsafe void* GetTexID()
-	{
-		ImGuiDebug.Log("ImDrawCmd_GetTexID #1");
-		return MarshalUtils.IntPtr_to_pointer(ImGuiNative.ImDrawCmd_GetTexID(NativePtr));
-	}
-
-	public unsafe void ImDrawCmd_destroy()
-	{
-		ImGuiDebug.Log("ImDrawCmd_destroy #1");
-		ImGuiNative.ImDrawCmd_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawData.cs Out/RG.ImGui/ImGuiNET/ImDrawData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawData.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,22 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawData
-{
-	public byte Valid;
-
-	public int CmdListsCount;
-
-	public int TotalIdxCount;
-
-	public int TotalVtxCount;
-
-	public unsafe ImDrawList** CmdLists;
-
-	public Vector2 DisplayPos;
-
-	public Vector2 DisplaySize;
-
-	public Vector2 FramebufferScale;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataBuilder.cs Out/RG.ImGui/ImGuiNET/ImDrawDataBuilder.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataBuilder.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawDataBuilder.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImDrawDataBuilder
-{
-	public ImVector Layers_0;
-
-	public ImVector Layers_1;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataBuilderPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawDataBuilderPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataBuilderPtr.cs	2025-05-22 18:15:44.454328700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawDataBuilderPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,59 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImDrawDataBuilderPtr
-{
-	public unsafe ImDrawDataBuilder* NativePtr { get; }
-
-	public unsafe RangeAccessor<ImVector> Layers => new RangeAccessor<ImVector>(&NativePtr->Layers_0, 2);
-
-	public unsafe ImDrawDataBuilderPtr(ImDrawDataBuilder* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawDataBuilderPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawDataBuilder*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawDataBuilderPtr(ImDrawDataBuilder* nativePtr)
-	{
-		return new ImDrawDataBuilderPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawDataBuilder*(ImDrawDataBuilderPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawDataBuilderPtr(IntPtr nativePtr)
-	{
-		return new ImDrawDataBuilderPtr(nativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImDrawDataBuilder_Clear #1");
-		ImGuiNative.ImDrawDataBuilder_Clear(NativePtr);
-	}
-
-	public unsafe void ClearFreeMemory()
-	{
-		ImGuiDebug.Log("ImDrawDataBuilder_ClearFreeMemory #1");
-		ImGuiNative.ImDrawDataBuilder_ClearFreeMemory(NativePtr);
-	}
-
-	public unsafe void FlattenIntoSingleLayer()
-	{
-		ImGuiDebug.Log("ImDrawDataBuilder_FlattenIntoSingleLayer #1");
-		ImGuiNative.ImDrawDataBuilder_FlattenIntoSingleLayer(NativePtr);
-	}
-
-	public unsafe int GetDrawListCount()
-	{
-		ImGuiDebug.Log("ImDrawDataBuilder_GetDrawListCount #1");
-		return ImGuiNative.ImDrawDataBuilder_GetDrawListCount(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawDataPtr.cs	2025-05-22 18:15:44.464838400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,87 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawDataPtr
-{
-	public unsafe ImDrawData* NativePtr { get; }
-
-	public unsafe ref bool Valid => ref Unsafe.AsRef<bool>(&NativePtr->Valid);
-
-	public unsafe ref int CmdListsCount => ref Unsafe.AsRef<int>(&NativePtr->CmdListsCount);
-
-	public unsafe ref int TotalIdxCount => ref Unsafe.AsRef<int>(&NativePtr->TotalIdxCount);
-
-	public unsafe ref int TotalVtxCount => ref Unsafe.AsRef<int>(&NativePtr->TotalVtxCount);
-
-	public unsafe IntPtr CmdLists
-	{
-		get
-		{
-			return (IntPtr)NativePtr->CmdLists;
-		}
-		set
-		{
-			NativePtr->CmdLists = (ImDrawList**)(void*)value;
-		}
-	}
-
-	public unsafe ref Vector2 DisplayPos => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplayPos);
-
-	public unsafe ref Vector2 DisplaySize => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplaySize);
-
-	public unsafe ref Vector2 FramebufferScale => ref Unsafe.AsRef<Vector2>(&NativePtr->FramebufferScale);
-
-	public unsafe RangePtrAccessor<ImDrawListPtr> CmdListsRange => new RangePtrAccessor<ImDrawListPtr>(CmdLists.ToPointer(), CmdListsCount);
-
-	public unsafe ImDrawDataPtr(ImDrawData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawDataPtr(ImDrawData* nativePtr)
-	{
-		return new ImDrawDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawData*(ImDrawDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawDataPtr(IntPtr nativePtr)
-	{
-		return new ImDrawDataPtr(nativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImDrawData_Clear #1");
-		ImGuiNative.ImDrawData_Clear(NativePtr);
-	}
-
-	public unsafe void DeIndexAllBuffers()
-	{
-		ImGuiDebug.Log("ImDrawData_DeIndexAllBuffers #1");
-		ImGuiNative.ImDrawData_DeIndexAllBuffers(NativePtr);
-	}
-
-	public unsafe void ScaleClipRects(Vector2 fb_scale)
-	{
-		ImGuiDebug.Log("ImDrawData_ScaleClipRects #1");
-		ImGuiNative.ImDrawData_ScaleClipRects(NativePtr, fb_scale);
-	}
-
-	public unsafe void ImDrawData_destroy()
-	{
-		ImGuiDebug.Log("ImDrawData_destroy #1");
-		ImGuiNative.ImDrawData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawFlags.cs Out/RG.ImGui/ImGuiNET/ImDrawFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawFlags.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImDrawFlags
-{
-	None = 0,
-	Closed = 1,
-	RoundCornersTopLeft = 16,
-	RoundCornersTopRight = 32,
-	RoundCornersBottomLeft = 64,
-	RoundCornersBottomRight = 128,
-	RoundCornersNone = 256,
-	RoundCornersTop = 48,
-	RoundCornersBottom = 192,
-	RoundCornersLeft = 80,
-	RoundCornersRight = 160,
-	RoundCornersAll = 240,
-	RoundCornersDefault_ = 240,
-	RoundCornersMask_ = 496
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawList.cs Out/RG.ImGui/ImGuiNET/ImDrawList.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawList.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawList.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,34 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImDrawList
-{
-	public ImVector CmdBuffer;
-
-	public ImVector IdxBuffer;
-
-	public ImVector VtxBuffer;
-
-	public ImDrawListFlags Flags;
-
-	public uint _VtxCurrentIdx;
-
-	public unsafe ImDrawListSharedData* _Data;
-
-	public unsafe byte* _OwnerName;
-
-	public unsafe ImDrawVert* _VtxWritePtr;
-
-	public unsafe ushort* _IdxWritePtr;
-
-	public ImVector _ClipRectStack;
-
-	public ImVector _TextureIdStack;
-
-	public ImVector _Path;
-
-	public ImDrawCmdHeader _CmdHeader;
-
-	public ImDrawListSplitter _Splitter;
-
-	public float _FringeScale;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListFlags.cs Out/RG.ImGui/ImGuiNET/ImDrawListFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListFlags.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImDrawListFlags
-{
-	None = 0,
-	AntiAliasedLines = 1,
-	AntiAliasedLinesUseTex = 2,
-	AntiAliasedFill = 4,
-	AllowVtxOffset = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawListPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListPtr.cs	2025-05-22 18:15:44.805176100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,1077 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawListPtr : IEquatable<ImDrawListPtr>
-{
-	public unsafe ImDrawList* NativePtr { get; }
-
-	public unsafe ImPtrVector<ImDrawCmdPtr> CmdBuffer => new ImPtrVector<ImDrawCmdPtr>(NativePtr->CmdBuffer, Unsafe.SizeOf<ImDrawCmd>());
-
-	public unsafe ImVector<ushort> IdxBuffer => new ImVector<ushort>(NativePtr->IdxBuffer);
-
-	public unsafe ImPtrVector<ImDrawVertPtr> VtxBuffer => new ImPtrVector<ImDrawVertPtr>(NativePtr->VtxBuffer, Unsafe.SizeOf<ImDrawVert>());
-
-	public unsafe ref ImDrawListFlags Flags => ref Unsafe.AsRef<ImDrawListFlags>(&NativePtr->Flags);
-
-	public unsafe ref uint _VtxCurrentIdx => ref Unsafe.AsRef<uint>(&NativePtr->_VtxCurrentIdx);
-
-	public unsafe ref ImDrawListSharedDataPtr _Data => ref Unsafe.AsRef<ImDrawListSharedDataPtr>(&NativePtr->_Data);
-
-	public unsafe ref string _OwnerName => ref Unsafe.AsRef<string>(&NativePtr->_OwnerName);
-
-	public unsafe ref ImDrawVertPtr _VtxWritePtr => ref Unsafe.AsRef<ImDrawVertPtr>(&NativePtr->_VtxWritePtr);
-
-	public unsafe IntPtr _IdxWritePtr
-	{
-		get
-		{
-			return (IntPtr)NativePtr->_IdxWritePtr;
-		}
-		set
-		{
-			NativePtr->_IdxWritePtr = (ushort*)(void*)value;
-		}
-	}
-
-	public unsafe ImPtrVector<Vector4> _ClipRectStack => new ImPtrVector<Vector4>(NativePtr->_ClipRectStack, Unsafe.SizeOf<Vector4>());
-
-	public unsafe ImVector<IntPtr> _TextureIdStack => new ImVector<IntPtr>(NativePtr->_TextureIdStack);
-
-	public unsafe ImPtrVector<Vector2> _Path => new ImPtrVector<Vector2>(NativePtr->_Path, Unsafe.SizeOf<Vector2>());
-
-	public unsafe ref ImDrawCmdHeader _CmdHeader => ref Unsafe.AsRef<ImDrawCmdHeader>(&NativePtr->_CmdHeader);
-
-	public unsafe ref ImDrawListSplitter _Splitter => ref Unsafe.AsRef<ImDrawListSplitter>(&NativePtr->_Splitter);
-
-	public unsafe ref float _FringeScale => ref Unsafe.AsRef<float>(&NativePtr->_FringeScale);
-
-	public unsafe ImDrawListPtr(ImDrawList* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawListPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawList*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawListPtr(ImDrawList* nativePtr)
-	{
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawList*(ImDrawListPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawListPtr(IntPtr nativePtr)
-	{
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddBezierCubic #1");
-		ImGuiNative.ImDrawList_AddBezierCubic(NativePtr, p1, p2, p3, p4, col, thickness, 0);
-	}
-
-	public unsafe void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddBezierCubic #2");
-		ImGuiNative.ImDrawList_AddBezierCubic(NativePtr, p1, p2, p3, p4, col, thickness, num_segments);
-	}
-
-	public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddBezierQuadratic #1");
-		ImGuiNative.ImDrawList_AddBezierQuadratic(NativePtr, p1, p2, p3, col, thickness, 0);
-	}
-
-	public unsafe void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddBezierQuadratic #2");
-		ImGuiNative.ImDrawList_AddBezierQuadratic(NativePtr, p1, p2, p3, col, thickness, num_segments);
-	}
-
-	public unsafe void AddCallback(ImDrawCallback? callback, IntPtr callback_data)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCallback #1");
-		ImGuiNative.ImDrawList_AddCallback(NativePtr, callback, callback_data);
-	}
-
-	public unsafe void AddCircle(Vector2 center, float radius, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircle #1");
-		ImGuiNative.ImDrawList_AddCircle(NativePtr, center, radius, col, 0, 1f);
-	}
-
-	public unsafe void AddCircle(Vector2 center, float radius, uint col, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircle #2");
-		ImGuiNative.ImDrawList_AddCircle(NativePtr, center, radius, col, num_segments, 1f);
-	}
-
-	public unsafe void AddCircle(Vector2 center, float radius, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircle #3");
-		ImGuiNative.ImDrawList_AddCircle(NativePtr, center, radius, col, 0, thickness);
-	}
-
-	public unsafe void AddCircle(Vector2 center, float radius, uint col, int num_segments, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircle #4");
-		ImGuiNative.ImDrawList_AddCircle(NativePtr, center, radius, col, num_segments, thickness);
-	}
-
-	public unsafe void AddCircleFilled(Vector2 center, float radius, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircleFilled #1");
-		ImGuiNative.ImDrawList_AddCircleFilled(NativePtr, center, radius, col, 0);
-	}
-
-	public unsafe void AddCircleFilled(Vector2 center, float radius, uint col, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddCircleFilled #2");
-		ImGuiNative.ImDrawList_AddCircleFilled(NativePtr, center, radius, col, num_segments);
-	}
-
-	public unsafe void AddConvexPolyFilled(ref Vector2 points, int num_points, uint col)
-	{
-		fixed (Vector2* points2 = &points)
-		{
-			ImGuiDebug.Log("ImDrawList_AddConvexPolyFilled #1");
-			ImGuiNative.ImDrawList_AddConvexPolyFilled(NativePtr, points2, num_points, col);
-		}
-	}
-
-	public unsafe void AddDrawCmd()
-	{
-		ImGuiDebug.Log("ImDrawList_AddDrawCmd #1");
-		ImGuiNative.ImDrawList_AddDrawCmd(NativePtr);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max)
-	{
-		Vector2 uv_min = new Vector2(0f, 0f);
-		Vector2 uv_max = new Vector2(1f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImage #1");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, uint.MaxValue);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min)
-	{
-		Vector2 uv_max = new Vector2(1f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImage #2");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, uint.MaxValue);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, uint col)
-	{
-		Vector2 uv_min = new Vector2(0f, 0f);
-		Vector2 uv_max = new Vector2(1f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImage #3");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, col);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImage #4");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, uint.MaxValue);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, uint col)
-	{
-		Vector2 uv_max = new Vector2(1f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImage #5");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, col);
-	}
-
-	public unsafe void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImage #6");
-		ImGuiNative.ImDrawList_AddImage(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, col);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 0f);
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #1");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv, uv2, uv3, uv4, uint.MaxValue);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
-	{
-		Vector2 uv2 = new Vector2(1f, 0f);
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #2");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, uint.MaxValue);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 0f);
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #3");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv, uv2, uv3, uv4, col);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
-	{
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #4");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, uint.MaxValue);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, uint col)
-	{
-		Vector2 uv2 = new Vector2(1f, 0f);
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #5");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
-	{
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #6");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, uint.MaxValue);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, uint col)
-	{
-		Vector2 uv3 = new Vector2(1f, 1f);
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #7");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #8");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, uint.MaxValue);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, uint col)
-	{
-		Vector2 uv4 = new Vector2(0f, 1f);
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #9");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
-	}
-
-	public unsafe void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImageQuad #10");
-		ImGuiNative.ImDrawList_AddImageQuad(NativePtr, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
-	}
-
-	public unsafe void AddImageRounded(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col, float rounding)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImageRounded #1");
-		ImGuiNative.ImDrawList_AddImageRounded(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, ImDrawFlags.None);
-	}
-
-	public unsafe void AddImageRounded(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col, float rounding, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_AddImageRounded #2");
-		ImGuiNative.ImDrawList_AddImageRounded(NativePtr, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags);
-	}
-
-	public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddLine #1");
-		ImGuiNative.ImDrawList_AddLine(NativePtr, p1, p2, col, 1f);
-	}
-
-	public unsafe void AddLine(Vector2 p1, Vector2 p2, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddLine #2");
-		ImGuiNative.ImDrawList_AddLine(NativePtr, p1, p2, col, thickness);
-	}
-
-	public unsafe void AddNgon(Vector2 center, float radius, uint col, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddNgon #1");
-		ImGuiNative.ImDrawList_AddNgon(NativePtr, center, radius, col, num_segments, 1f);
-	}
-
-	public unsafe void AddNgon(Vector2 center, float radius, uint col, int num_segments, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddNgon #2");
-		ImGuiNative.ImDrawList_AddNgon(NativePtr, center, radius, col, num_segments, thickness);
-	}
-
-	public unsafe void AddNgonFilled(Vector2 center, float radius, uint col, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_AddNgonFilled #1");
-		ImGuiNative.ImDrawList_AddNgonFilled(NativePtr, center, radius, col, num_segments);
-	}
-
-	public unsafe void AddPolyline(ref Vector2 points, int num_points, uint col, ImDrawFlags flags, float thickness)
-	{
-		fixed (Vector2* points2 = &points)
-		{
-			ImGuiDebug.Log("ImDrawList_AddPolyline #1");
-			ImGuiNative.ImDrawList_AddPolyline(NativePtr, points2, num_points, col, flags, thickness);
-		}
-	}
-
-	public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddQuad #1");
-		ImGuiNative.ImDrawList_AddQuad(NativePtr, p1, p2, p3, p4, col, 1f);
-	}
-
-	public unsafe void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddQuad #2");
-		ImGuiNative.ImDrawList_AddQuad(NativePtr, p1, p2, p3, p4, col, thickness);
-	}
-
-	public unsafe void AddQuadFilled(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddQuadFilled #1");
-		ImGuiNative.ImDrawList_AddQuadFilled(NativePtr, p1, p2, p3, p4, col);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #1");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, 0f, ImDrawFlags.None, 1f);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, float rounding)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #2");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, rounding, ImDrawFlags.None, 1f);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #3");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, 0f, flags, 1f);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #4");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, rounding, flags, 1f);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, float rounding, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #5");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, rounding, ImDrawFlags.None, thickness);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, ImDrawFlags flags, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #6");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, 0f, flags, thickness);
-	}
-
-	public unsafe void AddRect(Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRect #7");
-		ImGuiNative.ImDrawList_AddRect(NativePtr, p_min, p_max, col, rounding, flags, thickness);
-	}
-
-	public unsafe void AddRectFilled(Vector2 p_min, Vector2 p_max, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRectFilled #1");
-		ImGuiNative.ImDrawList_AddRectFilled(NativePtr, p_min, p_max, col, 0f, ImDrawFlags.None);
-	}
-
-	public unsafe void AddRectFilled(Vector2 p_min, Vector2 p_max, uint col, float rounding)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRectFilled #2");
-		ImGuiNative.ImDrawList_AddRectFilled(NativePtr, p_min, p_max, col, rounding, ImDrawFlags.None);
-	}
-
-	public unsafe void AddRectFilled(Vector2 p_min, Vector2 p_max, uint col, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRectFilled #3");
-		ImGuiNative.ImDrawList_AddRectFilled(NativePtr, p_min, p_max, col, 0f, flags);
-	}
-
-	public unsafe void AddRectFilled(Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRectFilled #4");
-		ImGuiNative.ImDrawList_AddRectFilled(NativePtr, p_min, p_max, col, rounding, flags);
-	}
-
-	public unsafe void AddRectFilledMultiColor(Vector2 p_min, Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left)
-	{
-		ImGuiDebug.Log("ImDrawList_AddRectFilledMultiColor #1");
-		ImGuiNative.ImDrawList_AddRectFilledMultiColor(NativePtr, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
-	}
-
-	public unsafe void AddText(Vector2 pos, uint col, string text_begin)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_Vec2 #1");
-		ImGuiNative.ImDrawList_AddText_Vec2(NativePtr, pos, col, ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(Vector2 pos, uint col, string text_begin, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_Vec2 #2");
-		ImGuiNative.ImDrawList_AddText_Vec2(NativePtr, pos, col, ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_FontPtr #2");
-		ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, null, 0f, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_FontPtr #3");
-		ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, ptr2, 0f, null);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_FontPtr #4");
-		ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, null, wrap_width, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, ref Vector4 cpu_fine_clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (Vector4* cpu_fine_clip_rect2 = &cpu_fine_clip_rect)
-		{
-			ImGuiDebug.Log("ImDrawList_AddText_FontPtr #5");
-			ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, null, 0f, cpu_fine_clip_rect2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, string text_end, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImDrawList_AddText_FontPtr #6");
-		ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, ptr2, wrap_width, null);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, string text_end, ref Vector4 cpu_fine_clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector4* cpu_fine_clip_rect2 = &cpu_fine_clip_rect)
-		{
-			ImGuiDebug.Log("ImDrawList_AddText_FontPtr #7");
-			ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, ptr2, 0f, cpu_fine_clip_rect2);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, float wrap_width, ref Vector4 cpu_fine_clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (Vector4* cpu_fine_clip_rect2 = &cpu_fine_clip_rect)
-		{
-			ImGuiDebug.Log("ImDrawList_AddText_FontPtr #8");
-			ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, null, wrap_width, cpu_fine_clip_rect2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(ImFontPtr font, float font_size, Vector2 pos, uint col, string text_begin, string text_end, float wrap_width, ref Vector4 cpu_fine_clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector4* cpu_fine_clip_rect2 = &cpu_fine_clip_rect)
-		{
-			ImGuiDebug.Log("ImDrawList_AddText_FontPtr #9");
-			ImGuiNative.ImDrawList_AddText_FontPtr(NativePtr, font, font_size, pos, col, ptr, ptr2, wrap_width, cpu_fine_clip_rect2);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddTriangle #1");
-		ImGuiNative.ImDrawList_AddTriangle(NativePtr, p1, p2, p3, col, 1f);
-	}
-
-	public unsafe void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_AddTriangle #2");
-		ImGuiNative.ImDrawList_AddTriangle(NativePtr, p1, p2, p3, col, thickness);
-	}
-
-	public unsafe void AddTriangleFilled(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_AddTriangleFilled #1");
-		ImGuiNative.ImDrawList_AddTriangleFilled(NativePtr, p1, p2, p3, col);
-	}
-
-	public unsafe void ChannelsMerge()
-	{
-		ImGuiDebug.Log("ImDrawList_ChannelsMerge #1");
-		ImGuiNative.ImDrawList_ChannelsMerge(NativePtr);
-	}
-
-	public unsafe void ChannelsSetCurrent(int n)
-	{
-		ImGuiDebug.Log("ImDrawList_ChannelsSetCurrent #1");
-		ImGuiNative.ImDrawList_ChannelsSetCurrent(NativePtr, n);
-	}
-
-	public unsafe void ChannelsSplit(int count)
-	{
-		ImGuiDebug.Log("ImDrawList_ChannelsSplit #1");
-		ImGuiNative.ImDrawList_ChannelsSplit(NativePtr, count);
-	}
-
-	public unsafe ImDrawListPtr CloneOutput()
-	{
-		ImGuiDebug.Log("ImDrawList_CloneOutput #1");
-		ImDrawList* nativePtr = ImGuiNative.ImDrawList_CloneOutput(NativePtr);
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe Vector2 GetClipRectMax()
-	{
-		ImGuiDebug.Log("ImDrawList_GetClipRectMax #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImDrawList_GetClipRectMax(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe Vector2 GetClipRectMin()
-	{
-		ImGuiDebug.Log("ImDrawList_GetClipRectMin #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImDrawList_GetClipRectMin(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe void PathArcTo(Vector2 center, float radius, float a_min, float a_max)
-	{
-		ImGuiDebug.Log("ImDrawList_PathArcTo #1");
-		ImGuiNative.ImDrawList_PathArcTo(NativePtr, center, radius, a_min, a_max, 0);
-	}
-
-	public unsafe void PathArcTo(Vector2 center, float radius, float a_min, float a_max, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_PathArcTo #2");
-		ImGuiNative.ImDrawList_PathArcTo(NativePtr, center, radius, a_min, a_max, num_segments);
-	}
-
-	public unsafe void PathArcToFast(Vector2 center, float radius, int a_min_of_12, int a_max_of_12)
-	{
-		ImGuiDebug.Log("ImDrawList_PathArcToFast #1");
-		ImGuiNative.ImDrawList_PathArcToFast(NativePtr, center, radius, a_min_of_12, a_max_of_12);
-	}
-
-	public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4)
-	{
-		ImGuiDebug.Log("ImDrawList_PathBezierCubicCurveTo #1");
-		ImGuiNative.ImDrawList_PathBezierCubicCurveTo(NativePtr, p2, p3, p4, 0);
-	}
-
-	public unsafe void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_PathBezierCubicCurveTo #2");
-		ImGuiNative.ImDrawList_PathBezierCubicCurveTo(NativePtr, p2, p3, p4, num_segments);
-	}
-
-	public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3)
-	{
-		ImGuiDebug.Log("ImDrawList_PathBezierQuadraticCurveTo #1");
-		ImGuiNative.ImDrawList_PathBezierQuadraticCurveTo(NativePtr, p2, p3, 0);
-	}
-
-	public unsafe void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList_PathBezierQuadraticCurveTo #2");
-		ImGuiNative.ImDrawList_PathBezierQuadraticCurveTo(NativePtr, p2, p3, num_segments);
-	}
-
-	public unsafe void PathClear()
-	{
-		ImGuiDebug.Log("ImDrawList_PathClear #1");
-		ImGuiNative.ImDrawList_PathClear(NativePtr);
-	}
-
-	public unsafe void PathFillConvex(uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PathFillConvex #1");
-		ImGuiNative.ImDrawList_PathFillConvex(NativePtr, col);
-	}
-
-	public unsafe void PathLineTo(Vector2 pos)
-	{
-		ImGuiDebug.Log("ImDrawList_PathLineTo #1");
-		ImGuiNative.ImDrawList_PathLineTo(NativePtr, pos);
-	}
-
-	public unsafe void PathLineToMergeDuplicate(Vector2 pos)
-	{
-		ImGuiDebug.Log("ImDrawList_PathLineToMergeDuplicate #1");
-		ImGuiNative.ImDrawList_PathLineToMergeDuplicate(NativePtr, pos);
-	}
-
-	public unsafe void PathRect(Vector2 rect_min, Vector2 rect_max)
-	{
-		ImGuiDebug.Log("ImDrawList_PathRect #1");
-		ImGuiNative.ImDrawList_PathRect(NativePtr, rect_min, rect_max, 0f, ImDrawFlags.None);
-	}
-
-	public unsafe void PathRect(Vector2 rect_min, Vector2 rect_max, float rounding)
-	{
-		ImGuiDebug.Log("ImDrawList_PathRect #2");
-		ImGuiNative.ImDrawList_PathRect(NativePtr, rect_min, rect_max, rounding, ImDrawFlags.None);
-	}
-
-	public unsafe void PathRect(Vector2 rect_min, Vector2 rect_max, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_PathRect #3");
-		ImGuiNative.ImDrawList_PathRect(NativePtr, rect_min, rect_max, 0f, flags);
-	}
-
-	public unsafe void PathRect(Vector2 rect_min, Vector2 rect_max, float rounding, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_PathRect #4");
-		ImGuiNative.ImDrawList_PathRect(NativePtr, rect_min, rect_max, rounding, flags);
-	}
-
-	public unsafe void PathStroke(uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PathStroke #1");
-		ImGuiNative.ImDrawList_PathStroke(NativePtr, col, ImDrawFlags.None, 1f);
-	}
-
-	public unsafe void PathStroke(uint col, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("ImDrawList_PathStroke #2");
-		ImGuiNative.ImDrawList_PathStroke(NativePtr, col, flags, 1f);
-	}
-
-	public unsafe void PathStroke(uint col, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_PathStroke #3");
-		ImGuiNative.ImDrawList_PathStroke(NativePtr, col, ImDrawFlags.None, thickness);
-	}
-
-	public unsafe void PathStroke(uint col, ImDrawFlags flags, float thickness)
-	{
-		ImGuiDebug.Log("ImDrawList_PathStroke #4");
-		ImGuiNative.ImDrawList_PathStroke(NativePtr, col, flags, thickness);
-	}
-
-	public unsafe void PopClipRect()
-	{
-		ImGuiDebug.Log("ImDrawList_PopClipRect #1");
-		ImGuiNative.ImDrawList_PopClipRect(NativePtr);
-	}
-
-	public unsafe void PopTextureID()
-	{
-		ImGuiDebug.Log("ImDrawList_PopTextureID #1");
-		ImGuiNative.ImDrawList_PopTextureID(NativePtr);
-	}
-
-	public unsafe void PrimQuadUV(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uv_a, Vector2 uv_b, Vector2 uv_c, Vector2 uv_d, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimQuadUV #1");
-		ImGuiNative.ImDrawList_PrimQuadUV(NativePtr, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
-	}
-
-	public unsafe void PrimRect(Vector2 a, Vector2 b, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimRect #1");
-		ImGuiNative.ImDrawList_PrimRect(NativePtr, a, b, col);
-	}
-
-	public unsafe void PrimRectUV(Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimRectUV #1");
-		ImGuiNative.ImDrawList_PrimRectUV(NativePtr, a, b, uv_a, uv_b, col);
-	}
-
-	public unsafe void PrimReserve(int idx_count, int vtx_count)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimReserve #1");
-		ImGuiNative.ImDrawList_PrimReserve(NativePtr, idx_count, vtx_count);
-	}
-
-	public unsafe void PrimUnreserve(int idx_count, int vtx_count)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimUnreserve #1");
-		ImGuiNative.ImDrawList_PrimUnreserve(NativePtr, idx_count, vtx_count);
-	}
-
-	public unsafe void PrimVtx(Vector2 pos, Vector2 uv, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimVtx #1");
-		ImGuiNative.ImDrawList_PrimVtx(NativePtr, pos, uv, col);
-	}
-
-	public unsafe void PrimWriteIdx(ushort idx)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimWriteIdx #1");
-		ImGuiNative.ImDrawList_PrimWriteIdx(NativePtr, idx);
-	}
-
-	public unsafe void PrimWriteVtx(Vector2 pos, Vector2 uv, uint col)
-	{
-		ImGuiDebug.Log("ImDrawList_PrimWriteVtx #1");
-		ImGuiNative.ImDrawList_PrimWriteVtx(NativePtr, pos, uv, col);
-	}
-
-	public unsafe void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max)
-	{
-		byte intersect_with_current_clip_rect = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("ImDrawList_PushClipRect #1");
-		ImGuiNative.ImDrawList_PushClipRect(NativePtr, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
-	}
-
-	public unsafe void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, bool intersect_with_current_clip_rect)
-	{
-		byte intersect_with_current_clip_rect2 = MarshalUtils.bool_to_byte(intersect_with_current_clip_rect);
-		ImGuiDebug.Log("ImDrawList_PushClipRect #2");
-		ImGuiNative.ImDrawList_PushClipRect(NativePtr, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect2);
-	}
-
-	public unsafe void PushClipRectFullScreen()
-	{
-		ImGuiDebug.Log("ImDrawList_PushClipRectFullScreen #1");
-		ImGuiNative.ImDrawList_PushClipRectFullScreen(NativePtr);
-	}
-
-	public unsafe void PushTextureID(IntPtr texture_id)
-	{
-		ImGuiDebug.Log("ImDrawList_PushTextureID #1");
-		ImGuiNative.ImDrawList_PushTextureID(NativePtr, texture_id);
-	}
-
-	public unsafe int _CalcCircleAutoSegmentCount(float radius)
-	{
-		ImGuiDebug.Log("ImDrawList__CalcCircleAutoSegmentCount #1");
-		return ImGuiNative.ImDrawList__CalcCircleAutoSegmentCount(NativePtr, radius);
-	}
-
-	public unsafe void _ClearFreeMemory()
-	{
-		ImGuiDebug.Log("ImDrawList__ClearFreeMemory #1");
-		ImGuiNative.ImDrawList__ClearFreeMemory(NativePtr);
-	}
-
-	public unsafe void _OnChangedClipRect()
-	{
-		ImGuiDebug.Log("ImDrawList__OnChangedClipRect #1");
-		ImGuiNative.ImDrawList__OnChangedClipRect(NativePtr);
-	}
-
-	public unsafe void _OnChangedTextureID()
-	{
-		ImGuiDebug.Log("ImDrawList__OnChangedTextureID #1");
-		ImGuiNative.ImDrawList__OnChangedTextureID(NativePtr);
-	}
-
-	public unsafe void _OnChangedVtxOffset()
-	{
-		ImGuiDebug.Log("ImDrawList__OnChangedVtxOffset #1");
-		ImGuiNative.ImDrawList__OnChangedVtxOffset(NativePtr);
-	}
-
-	public unsafe void _PathArcToFastEx(Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
-	{
-		ImGuiDebug.Log("ImDrawList__PathArcToFastEx #1");
-		ImGuiNative.ImDrawList__PathArcToFastEx(NativePtr, center, radius, a_min_sample, a_max_sample, a_step);
-	}
-
-	public unsafe void _PathArcToN(Vector2 center, float radius, float a_min, float a_max, int num_segments)
-	{
-		ImGuiDebug.Log("ImDrawList__PathArcToN #1");
-		ImGuiNative.ImDrawList__PathArcToN(NativePtr, center, radius, a_min, a_max, num_segments);
-	}
-
-	public unsafe void _PopUnusedDrawCmd()
-	{
-		ImGuiDebug.Log("ImDrawList__PopUnusedDrawCmd #1");
-		ImGuiNative.ImDrawList__PopUnusedDrawCmd(NativePtr);
-	}
-
-	public unsafe void _ResetForNewFrame()
-	{
-		ImGuiDebug.Log("ImDrawList__ResetForNewFrame #1");
-		ImGuiNative.ImDrawList__ResetForNewFrame(NativePtr);
-	}
-
-	public unsafe void _TryMergeDrawCmds()
-	{
-		ImGuiDebug.Log("ImDrawList__TryMergeDrawCmds #1");
-		ImGuiNative.ImDrawList__TryMergeDrawCmds(NativePtr);
-	}
-
-	public unsafe void ImDrawList_destroy()
-	{
-		ImGuiDebug.Log("ImDrawList_destroy #1");
-		ImGuiNative.ImDrawList_destroy(NativePtr);
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public unsafe bool Equals(ImDrawListPtr other)
-	{
-		return NativePtr == other.NativePtr;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSharedData.cs Out/RG.ImGui/ImGuiNET/ImDrawListSharedData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSharedData.cs	2025-05-22 18:15:44.427186400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListSharedData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,248 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawListSharedData
-{
-	public Vector2 TexUvWhitePixel;
-
-	public unsafe ImFont* Font;
-
-	public float FontSize;
-
-	public float CurveTessellationTol;
-
-	public float CircleSegmentMaxError;
-
-	public Vector4 ClipRectFullscreen;
-
-	public ImDrawListFlags InitialFlags;
-
-	public Vector2 ArcFastVtx_0;
-
-	public Vector2 ArcFastVtx_1;
-
-	public Vector2 ArcFastVtx_2;
-
-	public Vector2 ArcFastVtx_3;
-
-	public Vector2 ArcFastVtx_4;
-
-	public Vector2 ArcFastVtx_5;
-
-	public Vector2 ArcFastVtx_6;
-
-	public Vector2 ArcFastVtx_7;
-
-	public Vector2 ArcFastVtx_8;
-
-	public Vector2 ArcFastVtx_9;
-
-	public Vector2 ArcFastVtx_10;
-
-	public Vector2 ArcFastVtx_11;
-
-	public Vector2 ArcFastVtx_12;
-
-	public Vector2 ArcFastVtx_13;
-
-	public Vector2 ArcFastVtx_14;
-
-	public Vector2 ArcFastVtx_15;
-
-	public Vector2 ArcFastVtx_16;
-
-	public Vector2 ArcFastVtx_17;
-
-	public Vector2 ArcFastVtx_18;
-
-	public Vector2 ArcFastVtx_19;
-
-	public Vector2 ArcFastVtx_20;
-
-	public Vector2 ArcFastVtx_21;
-
-	public Vector2 ArcFastVtx_22;
-
-	public Vector2 ArcFastVtx_23;
-
-	public Vector2 ArcFastVtx_24;
-
-	public Vector2 ArcFastVtx_25;
-
-	public Vector2 ArcFastVtx_26;
-
-	public Vector2 ArcFastVtx_27;
-
-	public Vector2 ArcFastVtx_28;
-
-	public Vector2 ArcFastVtx_29;
-
-	public Vector2 ArcFastVtx_30;
-
-	public Vector2 ArcFastVtx_31;
-
-	public Vector2 ArcFastVtx_32;
-
-	public Vector2 ArcFastVtx_33;
-
-	public Vector2 ArcFastVtx_34;
-
-	public Vector2 ArcFastVtx_35;
-
-	public Vector2 ArcFastVtx_36;
-
-	public Vector2 ArcFastVtx_37;
-
-	public Vector2 ArcFastVtx_38;
-
-	public Vector2 ArcFastVtx_39;
-
-	public Vector2 ArcFastVtx_40;
-
-	public Vector2 ArcFastVtx_41;
-
-	public Vector2 ArcFastVtx_42;
-
-	public Vector2 ArcFastVtx_43;
-
-	public Vector2 ArcFastVtx_44;
-
-	public Vector2 ArcFastVtx_45;
-
-	public Vector2 ArcFastVtx_46;
-
-	public Vector2 ArcFastVtx_47;
-
-	public float ArcFastRadiusCutoff;
-
-	public byte CircleSegmentCounts_0;
-
-	public byte CircleSegmentCounts_1;
-
-	public byte CircleSegmentCounts_2;
-
-	public byte CircleSegmentCounts_3;
-
-	public byte CircleSegmentCounts_4;
-
-	public byte CircleSegmentCounts_5;
-
-	public byte CircleSegmentCounts_6;
-
-	public byte CircleSegmentCounts_7;
-
-	public byte CircleSegmentCounts_8;
-
-	public byte CircleSegmentCounts_9;
-
-	public byte CircleSegmentCounts_10;
-
-	public byte CircleSegmentCounts_11;
-
-	public byte CircleSegmentCounts_12;
-
-	public byte CircleSegmentCounts_13;
-
-	public byte CircleSegmentCounts_14;
-
-	public byte CircleSegmentCounts_15;
-
-	public byte CircleSegmentCounts_16;
-
-	public byte CircleSegmentCounts_17;
-
-	public byte CircleSegmentCounts_18;
-
-	public byte CircleSegmentCounts_19;
-
-	public byte CircleSegmentCounts_20;
-
-	public byte CircleSegmentCounts_21;
-
-	public byte CircleSegmentCounts_22;
-
-	public byte CircleSegmentCounts_23;
-
-	public byte CircleSegmentCounts_24;
-
-	public byte CircleSegmentCounts_25;
-
-	public byte CircleSegmentCounts_26;
-
-	public byte CircleSegmentCounts_27;
-
-	public byte CircleSegmentCounts_28;
-
-	public byte CircleSegmentCounts_29;
-
-	public byte CircleSegmentCounts_30;
-
-	public byte CircleSegmentCounts_31;
-
-	public byte CircleSegmentCounts_32;
-
-	public byte CircleSegmentCounts_33;
-
-	public byte CircleSegmentCounts_34;
-
-	public byte CircleSegmentCounts_35;
-
-	public byte CircleSegmentCounts_36;
-
-	public byte CircleSegmentCounts_37;
-
-	public byte CircleSegmentCounts_38;
-
-	public byte CircleSegmentCounts_39;
-
-	public byte CircleSegmentCounts_40;
-
-	public byte CircleSegmentCounts_41;
-
-	public byte CircleSegmentCounts_42;
-
-	public byte CircleSegmentCounts_43;
-
-	public byte CircleSegmentCounts_44;
-
-	public byte CircleSegmentCounts_45;
-
-	public byte CircleSegmentCounts_46;
-
-	public byte CircleSegmentCounts_47;
-
-	public byte CircleSegmentCounts_48;
-
-	public byte CircleSegmentCounts_49;
-
-	public byte CircleSegmentCounts_50;
-
-	public byte CircleSegmentCounts_51;
-
-	public byte CircleSegmentCounts_52;
-
-	public byte CircleSegmentCounts_53;
-
-	public byte CircleSegmentCounts_54;
-
-	public byte CircleSegmentCounts_55;
-
-	public byte CircleSegmentCounts_56;
-
-	public byte CircleSegmentCounts_57;
-
-	public byte CircleSegmentCounts_58;
-
-	public byte CircleSegmentCounts_59;
-
-	public byte CircleSegmentCounts_60;
-
-	public byte CircleSegmentCounts_61;
-
-	public byte CircleSegmentCounts_62;
-
-	public byte CircleSegmentCounts_63;
-
-	public unsafe Vector4* TexUvLines;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSharedDataPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawListSharedDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSharedDataPtr.cs	2025-05-22 18:15:44.471347400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListSharedDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,79 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawListSharedDataPtr
-{
-	public unsafe ImDrawListSharedData* NativePtr { get; }
-
-	public unsafe ref Vector2 TexUvWhitePixel => ref Unsafe.AsRef<Vector2>(&NativePtr->TexUvWhitePixel);
-
-	public unsafe ref ImFontPtr Font => ref Unsafe.AsRef<ImFontPtr>(&NativePtr->Font);
-
-	public unsafe ref float FontSize => ref Unsafe.AsRef<float>(&NativePtr->FontSize);
-
-	public unsafe ref float CurveTessellationTol => ref Unsafe.AsRef<float>(&NativePtr->CurveTessellationTol);
-
-	public unsafe ref float CircleSegmentMaxError => ref Unsafe.AsRef<float>(&NativePtr->CircleSegmentMaxError);
-
-	public unsafe ref Vector4 ClipRectFullscreen => ref Unsafe.AsRef<Vector4>(&NativePtr->ClipRectFullscreen);
-
-	public unsafe ref ImDrawListFlags InitialFlags => ref Unsafe.AsRef<ImDrawListFlags>(&NativePtr->InitialFlags);
-
-	public unsafe RangeAccessor<Vector2> ArcFastVtx => new RangeAccessor<Vector2>(&NativePtr->ArcFastVtx_0, 48);
-
-	public unsafe ref float ArcFastRadiusCutoff => ref Unsafe.AsRef<float>(&NativePtr->ArcFastRadiusCutoff);
-
-	public unsafe RangeAccessor<byte> CircleSegmentCounts => new RangeAccessor<byte>(&NativePtr->CircleSegmentCounts_0, 64);
-
-	public unsafe IntPtr TexUvLines
-	{
-		get
-		{
-			return (IntPtr)NativePtr->TexUvLines;
-		}
-		set
-		{
-			NativePtr->TexUvLines = (Vector4*)(void*)value;
-		}
-	}
-
-	public unsafe ImDrawListSharedDataPtr(ImDrawListSharedData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawListSharedDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawListSharedData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawListSharedDataPtr(ImDrawListSharedData* nativePtr)
-	{
-		return new ImDrawListSharedDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawListSharedData*(ImDrawListSharedDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawListSharedDataPtr(IntPtr nativePtr)
-	{
-		return new ImDrawListSharedDataPtr(nativePtr);
-	}
-
-	public unsafe void SetCircleTessellationMaxError(float max_error)
-	{
-		ImGuiDebug.Log("ImDrawListSharedData_SetCircleTessellationMaxError #1");
-		ImGuiNative.ImDrawListSharedData_SetCircleTessellationMaxError(NativePtr, max_error);
-	}
-
-	public unsafe void ImDrawListSharedData_destroy()
-	{
-		ImGuiDebug.Log("ImDrawListSharedData_destroy #1");
-		ImGuiNative.ImDrawListSharedData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSplitter.cs Out/RG.ImGui/ImGuiNET/ImDrawListSplitter.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSplitter.cs	2025-05-22 18:15:44.426181400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListSplitter.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImDrawListSplitter
-{
-	public int _Current;
-
-	public int _Count;
-
-	public ImVector _Channels;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSplitterPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawListSplitterPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawListSplitterPtr.cs	2025-05-22 18:15:44.462835400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawListSplitterPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,76 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImDrawListSplitterPtr
-{
-	public unsafe ImDrawListSplitter* NativePtr { get; }
-
-	public unsafe ref int _Current => ref Unsafe.AsRef<int>(&NativePtr->_Current);
-
-	public unsafe ref int _Count => ref Unsafe.AsRef<int>(&NativePtr->_Count);
-
-	public unsafe ImPtrVector<ImDrawChannelPtr> _Channels => new ImPtrVector<ImDrawChannelPtr>(NativePtr->_Channels, Unsafe.SizeOf<ImDrawChannel>());
-
-	public unsafe ImDrawListSplitterPtr(ImDrawListSplitter* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawListSplitterPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawListSplitter*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawListSplitterPtr(ImDrawListSplitter* nativePtr)
-	{
-		return new ImDrawListSplitterPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawListSplitter*(ImDrawListSplitterPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawListSplitterPtr(IntPtr nativePtr)
-	{
-		return new ImDrawListSplitterPtr(nativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_Clear #1");
-		ImGuiNative.ImDrawListSplitter_Clear(NativePtr);
-	}
-
-	public unsafe void ClearFreeMemory()
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_ClearFreeMemory #1");
-		ImGuiNative.ImDrawListSplitter_ClearFreeMemory(NativePtr);
-	}
-
-	public unsafe void Merge(ImDrawListPtr draw_list)
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_Merge #1");
-		ImGuiNative.ImDrawListSplitter_Merge(NativePtr, draw_list);
-	}
-
-	public unsafe void SetCurrentChannel(ImDrawListPtr draw_list, int channel_idx)
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_SetCurrentChannel #1");
-		ImGuiNative.ImDrawListSplitter_SetCurrentChannel(NativePtr, draw_list, channel_idx);
-	}
-
-	public unsafe void Split(ImDrawListPtr draw_list, int count)
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_Split #1");
-		ImGuiNative.ImDrawListSplitter_Split(NativePtr, draw_list, count);
-	}
-
-	public unsafe void ImDrawListSplitter_destroy()
-	{
-		ImGuiDebug.Log("ImDrawListSplitter_destroy #1");
-		ImGuiNative.ImDrawListSplitter_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawVert.cs Out/RG.ImGui/ImGuiNET/ImDrawVert.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawVert.cs	2025-05-22 18:15:44.438245100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawVert.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawVert
-{
-	public Vector2 pos;
-
-	public Vector2 uv;
-
-	public uint col;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawVertPtr.cs Out/RG.ImGui/ImGuiNET/ImDrawVertPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImDrawVertPtr.cs	2025-05-22 18:15:44.455333800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImDrawVertPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,41 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImDrawVertPtr
-{
-	public unsafe ImDrawVert* NativePtr { get; }
-
-	public unsafe ref Vector2 pos => ref Unsafe.AsRef<Vector2>(&NativePtr->pos);
-
-	public unsafe ref Vector2 uv => ref Unsafe.AsRef<Vector2>(&NativePtr->uv);
-
-	public unsafe ref uint col => ref Unsafe.AsRef<uint>(&NativePtr->col);
-
-	public unsafe ImDrawVertPtr(ImDrawVert* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImDrawVertPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImDrawVert*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImDrawVertPtr(ImDrawVert* nativePtr)
-	{
-		return new ImDrawVertPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImDrawVert*(ImDrawVertPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImDrawVertPtr(IntPtr nativePtr)
-	{
-		return new ImDrawVertPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFont.cs Out/RG.ImGui/ImGuiNET/ImFont.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFont.cs	2025-05-22 18:15:44.438245100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFont.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImFont
-{
-	public ImVector IndexAdvanceX;
-
-	public float FallbackAdvanceX;
-
-	public float FontSize;
-
-	public ImVector IndexLookup;
-
-	public ImVector Glyphs;
-
-	public unsafe ImFontGlyph* FallbackGlyph;
-
-	public unsafe ImFontAtlas* ContainerAtlas;
-
-	public unsafe ImFontConfig* ConfigData;
-
-	public short ConfigDataCount;
-
-	public ushort FallbackChar;
-
-	public ushort EllipsisChar;
-
-	public ushort DotChar;
-
-	public byte DirtyLookupTables;
-
-	public float Scale;
-
-	public float Ascent;
-
-	public float Descent;
-
-	public int MetricsTotalSurface;
-
-	public byte Used4kPagesMap_0;
-
-	public byte Used4kPagesMap_1;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlas.cs Out/RG.ImGui/ImGuiNET/ImFontAtlas.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlas.cs	2025-05-22 18:15:44.439245700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontAtlas.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,175 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontAtlas
-{
-	public ImFontAtlasFlags Flags;
-
-	public IntPtr TexID;
-
-	public int TexDesiredWidth;
-
-	public int TexGlyphPadding;
-
-	public byte Locked;
-
-	public byte TexReady;
-
-	public byte TexPixelsUseColors;
-
-	public unsafe byte* TexPixelsAlpha8;
-
-	public unsafe uint* TexPixelsRGBA32;
-
-	public int TexWidth;
-
-	public int TexHeight;
-
-	public Vector2 TexUvScale;
-
-	public Vector2 TexUvWhitePixel;
-
-	public ImVector Fonts;
-
-	public ImVector CustomRects;
-
-	public ImVector ConfigData;
-
-	public Vector4 TexUvLines_0;
-
-	public Vector4 TexUvLines_1;
-
-	public Vector4 TexUvLines_2;
-
-	public Vector4 TexUvLines_3;
-
-	public Vector4 TexUvLines_4;
-
-	public Vector4 TexUvLines_5;
-
-	public Vector4 TexUvLines_6;
-
-	public Vector4 TexUvLines_7;
-
-	public Vector4 TexUvLines_8;
-
-	public Vector4 TexUvLines_9;
-
-	public Vector4 TexUvLines_10;
-
-	public Vector4 TexUvLines_11;
-
-	public Vector4 TexUvLines_12;
-
-	public Vector4 TexUvLines_13;
-
-	public Vector4 TexUvLines_14;
-
-	public Vector4 TexUvLines_15;
-
-	public Vector4 TexUvLines_16;
-
-	public Vector4 TexUvLines_17;
-
-	public Vector4 TexUvLines_18;
-
-	public Vector4 TexUvLines_19;
-
-	public Vector4 TexUvLines_20;
-
-	public Vector4 TexUvLines_21;
-
-	public Vector4 TexUvLines_22;
-
-	public Vector4 TexUvLines_23;
-
-	public Vector4 TexUvLines_24;
-
-	public Vector4 TexUvLines_25;
-
-	public Vector4 TexUvLines_26;
-
-	public Vector4 TexUvLines_27;
-
-	public Vector4 TexUvLines_28;
-
-	public Vector4 TexUvLines_29;
-
-	public Vector4 TexUvLines_30;
-
-	public Vector4 TexUvLines_31;
-
-	public Vector4 TexUvLines_32;
-
-	public Vector4 TexUvLines_33;
-
-	public Vector4 TexUvLines_34;
-
-	public Vector4 TexUvLines_35;
-
-	public Vector4 TexUvLines_36;
-
-	public Vector4 TexUvLines_37;
-
-	public Vector4 TexUvLines_38;
-
-	public Vector4 TexUvLines_39;
-
-	public Vector4 TexUvLines_40;
-
-	public Vector4 TexUvLines_41;
-
-	public Vector4 TexUvLines_42;
-
-	public Vector4 TexUvLines_43;
-
-	public Vector4 TexUvLines_44;
-
-	public Vector4 TexUvLines_45;
-
-	public Vector4 TexUvLines_46;
-
-	public Vector4 TexUvLines_47;
-
-	public Vector4 TexUvLines_48;
-
-	public Vector4 TexUvLines_49;
-
-	public Vector4 TexUvLines_50;
-
-	public Vector4 TexUvLines_51;
-
-	public Vector4 TexUvLines_52;
-
-	public Vector4 TexUvLines_53;
-
-	public Vector4 TexUvLines_54;
-
-	public Vector4 TexUvLines_55;
-
-	public Vector4 TexUvLines_56;
-
-	public Vector4 TexUvLines_57;
-
-	public Vector4 TexUvLines_58;
-
-	public Vector4 TexUvLines_59;
-
-	public Vector4 TexUvLines_60;
-
-	public Vector4 TexUvLines_61;
-
-	public Vector4 TexUvLines_62;
-
-	public Vector4 TexUvLines_63;
-
-	public unsafe ImFontBuilderIO* FontBuilderIO;
-
-	public uint FontBuilderFlags;
-
-	public int PackIdMouseCursors;
-
-	public int PackIdLines;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasCustomRect.cs Out/RG.ImGui/ImGuiNET/ImFontAtlasCustomRect.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasCustomRect.cs	2025-05-22 18:15:44.438245100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontAtlasCustomRect.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,22 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontAtlasCustomRect
-{
-	public ushort Width;
-
-	public ushort Height;
-
-	public ushort X;
-
-	public ushort Y;
-
-	public uint GlyphID;
-
-	public float GlyphAdvanceX;
-
-	public Vector2 GlyphOffset;
-
-	public unsafe ImFont* Font;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasCustomRectPtr.cs Out/RG.ImGui/ImGuiNET/ImFontAtlasCustomRectPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasCustomRectPtr.cs	2025-05-22 18:15:44.463839900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontAtlasCustomRectPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,63 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontAtlasCustomRectPtr
-{
-	public unsafe ImFontAtlasCustomRect* NativePtr { get; }
-
-	public unsafe ref ushort Width => ref Unsafe.AsRef<ushort>(&NativePtr->Width);
-
-	public unsafe ref ushort Height => ref Unsafe.AsRef<ushort>(&NativePtr->Height);
-
-	public unsafe ref ushort X => ref Unsafe.AsRef<ushort>(&NativePtr->X);
-
-	public unsafe ref ushort Y => ref Unsafe.AsRef<ushort>(&NativePtr->Y);
-
-	public unsafe ref uint GlyphID => ref Unsafe.AsRef<uint>(&NativePtr->GlyphID);
-
-	public unsafe ref float GlyphAdvanceX => ref Unsafe.AsRef<float>(&NativePtr->GlyphAdvanceX);
-
-	public unsafe ref Vector2 GlyphOffset => ref Unsafe.AsRef<Vector2>(&NativePtr->GlyphOffset);
-
-	public unsafe ref ImFontPtr Font => ref Unsafe.AsRef<ImFontPtr>(&NativePtr->Font);
-
-	public unsafe ImFontAtlasCustomRectPtr(ImFontAtlasCustomRect* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontAtlasCustomRectPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontAtlasCustomRect*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontAtlasCustomRectPtr(ImFontAtlasCustomRect* nativePtr)
-	{
-		return new ImFontAtlasCustomRectPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontAtlasCustomRect*(ImFontAtlasCustomRectPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontAtlasCustomRectPtr(IntPtr nativePtr)
-	{
-		return new ImFontAtlasCustomRectPtr(nativePtr);
-	}
-
-	public unsafe bool IsPacked()
-	{
-		ImGuiDebug.Log("ImFontAtlasCustomRect_IsPacked #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFontAtlasCustomRect_IsPacked(NativePtr));
-	}
-
-	public unsafe void ImFontAtlasCustomRect_destroy()
-	{
-		ImGuiDebug.Log("ImFontAtlasCustomRect_destroy #1");
-		ImGuiNative.ImFontAtlasCustomRect_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasFlags.cs Out/RG.ImGui/ImGuiNET/ImFontAtlasFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasFlags.cs	2025-05-22 18:15:44.438245100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontAtlasFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImFontAtlasFlags
-{
-	None = 0,
-	NoPowerOfTwoHeight = 1,
-	NoMouseCursors = 2,
-	NoBakedLines = 4
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasPtr.cs Out/RG.ImGui/ImGuiNET/ImFontAtlasPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontAtlasPtr.cs	2025-05-22 18:15:44.684317000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontAtlasPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,640 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontAtlasPtr
-{
-	public unsafe ImFontAtlas* NativePtr { get; }
-
-	public unsafe ref ImFontAtlasFlags Flags => ref Unsafe.AsRef<ImFontAtlasFlags>(&NativePtr->Flags);
-
-	public unsafe IntPtr TexID
-	{
-		get
-		{
-			return NativePtr->TexID;
-		}
-		set
-		{
-			NativePtr->TexID = value;
-		}
-	}
-
-	public unsafe ref int TexDesiredWidth => ref Unsafe.AsRef<int>(&NativePtr->TexDesiredWidth);
-
-	public unsafe ref int TexGlyphPadding => ref Unsafe.AsRef<int>(&NativePtr->TexGlyphPadding);
-
-	public unsafe ref bool Locked => ref Unsafe.AsRef<bool>(&NativePtr->Locked);
-
-	public unsafe ref bool TexReady => ref Unsafe.AsRef<bool>(&NativePtr->TexReady);
-
-	public unsafe ref bool TexPixelsUseColors => ref Unsafe.AsRef<bool>(&NativePtr->TexPixelsUseColors);
-
-	public unsafe IntPtr TexPixelsAlpha8
-	{
-		get
-		{
-			return (IntPtr)NativePtr->TexPixelsAlpha8;
-		}
-		set
-		{
-			NativePtr->TexPixelsAlpha8 = (byte*)(void*)value;
-		}
-	}
-
-	public unsafe IntPtr TexPixelsRGBA32
-	{
-		get
-		{
-			return (IntPtr)NativePtr->TexPixelsRGBA32;
-		}
-		set
-		{
-			NativePtr->TexPixelsRGBA32 = (uint*)(void*)value;
-		}
-	}
-
-	public unsafe ref int TexWidth => ref Unsafe.AsRef<int>(&NativePtr->TexWidth);
-
-	public unsafe ref int TexHeight => ref Unsafe.AsRef<int>(&NativePtr->TexHeight);
-
-	public unsafe ref Vector2 TexUvScale => ref Unsafe.AsRef<Vector2>(&NativePtr->TexUvScale);
-
-	public unsafe ref Vector2 TexUvWhitePixel => ref Unsafe.AsRef<Vector2>(&NativePtr->TexUvWhitePixel);
-
-	public unsafe ImVector<ImFontPtr> Fonts => new ImVector<ImFontPtr>(NativePtr->Fonts);
-
-	public unsafe ImPtrVector<ImFontAtlasCustomRectPtr> CustomRects => new ImPtrVector<ImFontAtlasCustomRectPtr>(NativePtr->CustomRects, Unsafe.SizeOf<ImFontAtlasCustomRect>());
-
-	public unsafe ImPtrVector<ImFontConfigPtr> ConfigData => new ImPtrVector<ImFontConfigPtr>(NativePtr->ConfigData, Unsafe.SizeOf<ImFontConfig>());
-
-	public unsafe RangeAccessor<Vector4> TexUvLines => new RangeAccessor<Vector4>(&NativePtr->TexUvLines_0, 64);
-
-	public unsafe ref ImFontBuilderIOPtr FontBuilderIO => ref Unsafe.AsRef<ImFontBuilderIOPtr>(&NativePtr->FontBuilderIO);
-
-	public unsafe ref uint FontBuilderFlags => ref Unsafe.AsRef<uint>(&NativePtr->FontBuilderFlags);
-
-	public unsafe ref int PackIdMouseCursors => ref Unsafe.AsRef<int>(&NativePtr->PackIdMouseCursors);
-
-	public unsafe ref int PackIdLines => ref Unsafe.AsRef<int>(&NativePtr->PackIdLines);
-
-	public unsafe ImFontAtlasPtr(ImFontAtlas* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontAtlasPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontAtlas*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontAtlasPtr(ImFontAtlas* nativePtr)
-	{
-		return new ImFontAtlasPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontAtlas*(ImFontAtlasPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontAtlasPtr(IntPtr nativePtr)
-	{
-		return new ImFontAtlasPtr(nativePtr);
-	}
-
-	public unsafe int AddCustomRectFontGlyph(ImFontPtr font, ushort id, int width, int height, float advance_x)
-	{
-		Vector2 offset = new Vector2(0f, 0f);
-		ImGuiDebug.Log("ImFontAtlas_AddCustomRectFontGlyph #1");
-		return ImGuiNative.ImFontAtlas_AddCustomRectFontGlyph(NativePtr, font, id, width, height, advance_x, offset);
-	}
-
-	public unsafe int AddCustomRectFontGlyph(ImFontPtr font, ushort id, int width, int height, float advance_x, Vector2 offset)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddCustomRectFontGlyph #2");
-		return ImGuiNative.ImFontAtlas_AddCustomRectFontGlyph(NativePtr, font, id, width, height, advance_x, offset);
-	}
-
-	public unsafe int AddCustomRectRegular(int width, int height)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddCustomRectRegular #1");
-		return ImGuiNative.ImFontAtlas_AddCustomRectRegular(NativePtr, width, height);
-	}
-
-	public unsafe ImFontPtr AddFont(ImFontConfigPtr font_cfg)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFont #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFont(NativePtr, font_cfg);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontDefault()
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontDefault #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontDefault(NativePtr, null);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontDefault(ImFontConfigPtr font_cfg)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontDefault #2");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontDefault(NativePtr, font_cfg);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontFromFileTTF(string filename, float size_pixels)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromFileTTF #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromFileTTF(NativePtr, ptr, size_pixels, null, null);
-		ImFontPtr result = new ImFontPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ImFontConfigPtr font_cfg)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromFileTTF #2");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromFileTTF(NativePtr, ptr, size_pixels, font_cfg, null);
-		ImFontPtr result = new ImFontPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ref ushort glyph_ranges)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromFileTTF #3");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromFileTTF(NativePtr, ptr, size_pixels, null, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromFileTTF #4");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromFileTTF(NativePtr, ptr, size_pixels, font_cfg, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels)
-	{
-		int num = 0;
-		byte* ptr;
-		if (compressed_font_data_base85 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(compressed_font_data_base85);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(compressed_font_data_base85, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(NativePtr, ptr, size_pixels, null, null);
-		ImFontPtr result = new ImFontPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfigPtr font_cfg)
-	{
-		int num = 0;
-		byte* ptr;
-		if (compressed_font_data_base85 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(compressed_font_data_base85);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(compressed_font_data_base85, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF #2");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(NativePtr, ptr, size_pixels, font_cfg, null);
-		ImFontPtr result = new ImFontPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ref ushort glyph_ranges)
-	{
-		int num = 0;
-		byte* ptr;
-		if (compressed_font_data_base85 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(compressed_font_data_base85);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(compressed_font_data_base85, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF #3");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(NativePtr, ptr, size_pixels, null, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges)
-	{
-		int num = 0;
-		byte* ptr;
-		if (compressed_font_data_base85 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(compressed_font_data_base85);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(compressed_font_data_base85, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF #4");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(NativePtr, ptr, size_pixels, font_cfg, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_size, float size_pixels)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedTTF #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedTTF(NativePtr, compressed_font_data, compressed_font_size, size_pixels, null, null);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfigPtr font_cfg)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedTTF #2");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedTTF(NativePtr, compressed_font_data, compressed_font_size, size_pixels, font_cfg, null);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ref ushort glyph_ranges)
-	{
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedTTF #3");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedTTF(NativePtr, compressed_font_data, compressed_font_size, size_pixels, null, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges)
-	{
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryCompressedTTF #4");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryCompressedTTF(NativePtr, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryTTF(IntPtr font_data, int font_size, float size_pixels)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryTTF #1");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryTTF(NativePtr, font_data, font_size, size_pixels, null, null);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryTTF(IntPtr font_data, int font_size, float size_pixels, ImFontConfigPtr font_cfg)
-	{
-		ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryTTF #2");
-		ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryTTF(NativePtr, font_data, font_size, size_pixels, font_cfg, null);
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryTTF(IntPtr font_data, int font_size, float size_pixels, ref ushort glyph_ranges)
-	{
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryTTF #3");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryTTF(NativePtr, font_data, font_size, size_pixels, null, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		return result;
-	}
-
-	public unsafe ImFontPtr AddFontFromMemoryTTF(IntPtr font_data, int font_size, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges)
-	{
-		ImFontPtr result;
-		fixed (ushort* glyph_ranges2 = &glyph_ranges)
-		{
-			ImGuiDebug.Log("ImFontAtlas_AddFontFromMemoryTTF #4");
-			ImFont* nativePtr = ImGuiNative.ImFontAtlas_AddFontFromMemoryTTF(NativePtr, font_data, font_size, size_pixels, font_cfg, glyph_ranges2);
-			result = new ImFontPtr(nativePtr);
-		}
-		return result;
-	}
-
-	public unsafe bool Build()
-	{
-		ImGuiDebug.Log("ImFontAtlas_Build #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFontAtlas_Build(NativePtr));
-	}
-
-	public unsafe void CalcCustomRectUV(ImFontAtlasCustomRectPtr rect, out Vector2 out_uv_min, out Vector2 out_uv_max)
-	{
-		fixed (Vector2* out_uv_min2 = &out_uv_min)
-		{
-			fixed (Vector2* out_uv_max2 = &out_uv_max)
-			{
-				ImGuiDebug.Log("ImFontAtlas_CalcCustomRectUV #1");
-				ImGuiNative.ImFontAtlas_CalcCustomRectUV(NativePtr, rect, out_uv_min2, out_uv_max2);
-			}
-		}
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImFontAtlas_Clear #1");
-		ImGuiNative.ImFontAtlas_Clear(NativePtr);
-	}
-
-	public unsafe void ClearFonts()
-	{
-		ImGuiDebug.Log("ImFontAtlas_ClearFonts #1");
-		ImGuiNative.ImFontAtlas_ClearFonts(NativePtr);
-	}
-
-	public unsafe void ClearInputData()
-	{
-		ImGuiDebug.Log("ImFontAtlas_ClearInputData #1");
-		ImGuiNative.ImFontAtlas_ClearInputData(NativePtr);
-	}
-
-	public unsafe void ClearTexData()
-	{
-		ImGuiDebug.Log("ImFontAtlas_ClearTexData #1");
-		ImGuiNative.ImFontAtlas_ClearTexData(NativePtr);
-	}
-
-	public unsafe ImFontAtlasCustomRectPtr GetCustomRectByIndex(int index)
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetCustomRectByIndex #1");
-		ImFontAtlasCustomRect* nativePtr = ImGuiNative.ImFontAtlas_GetCustomRectByIndex(NativePtr, index);
-		return new ImFontAtlasCustomRectPtr(nativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesChineseFull()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesChineseFull #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesChineseFull(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesChineseSimplifiedCommon()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesCyrillic()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesCyrillic #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesCyrillic(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesDefault()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesDefault #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesDefault(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesJapanese()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesJapanese #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesJapanese(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesKorean()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesKorean #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesKorean(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesThai()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesThai #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesThai(NativePtr);
-	}
-
-	public unsafe ushort* GetGlyphRangesVietnamese()
-	{
-		ImGuiDebug.Log("ImFontAtlas_GetGlyphRangesVietnamese #1");
-		return ImGuiNative.ImFontAtlas_GetGlyphRangesVietnamese(NativePtr);
-	}
-
-	public unsafe bool GetMouseCursorTexData(ImGuiMouseCursor cursor, out Vector2 out_offset, out Vector2 out_size, out Vector2 out_uv_border, out Vector2 out_uv_fill)
-	{
-		bool result;
-		fixed (Vector2* out_offset2 = &out_offset)
-		{
-			fixed (Vector2* out_size2 = &out_size)
-			{
-				fixed (Vector2* out_uv_border2 = &out_uv_border)
-				{
-					fixed (Vector2* out_uv_fill2 = &out_uv_fill)
-					{
-						ImGuiDebug.Log("ImFontAtlas_GetMouseCursorTexData #1");
-						result = MarshalUtils.byte_to_bool(ImGuiNative.ImFontAtlas_GetMouseCursorTexData(NativePtr, cursor, out_offset2, out_size2, out_uv_border2, out_uv_fill2));
-					}
-				}
-			}
-		}
-		return result;
-	}
-
-	public unsafe void GetTexDataAsAlpha8(out byte* out_pixels, out int out_width, out int out_height)
-	{
-		fixed (byte** out_pixels2 = &out_pixels)
-		{
-			fixed (int* out_width2 = &out_width)
-			{
-				fixed (int* out_height2 = &out_height)
-				{
-					ImGuiDebug.Log("ImFontAtlas_GetTexDataAsAlpha8 #1");
-					ImGuiNative.ImFontAtlas_GetTexDataAsAlpha8(NativePtr, out_pixels2, out_width2, out_height2, null);
-				}
-			}
-		}
-	}
-
-	public unsafe void GetTexDataAsAlpha8(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel)
-	{
-		fixed (byte** out_pixels2 = &out_pixels)
-		{
-			fixed (int* out_width2 = &out_width)
-			{
-				fixed (int* out_height2 = &out_height)
-				{
-					fixed (int* out_bytes_per_pixel2 = &out_bytes_per_pixel)
-					{
-						ImGuiDebug.Log("ImFontAtlas_GetTexDataAsAlpha8 #2");
-						ImGuiNative.ImFontAtlas_GetTexDataAsAlpha8(NativePtr, out_pixels2, out_width2, out_height2, out_bytes_per_pixel2);
-					}
-				}
-			}
-		}
-	}
-
-	public unsafe void GetTexDataAsRGBA32(out byte* out_pixels, out int out_width, out int out_height)
-	{
-		fixed (byte** out_pixels2 = &out_pixels)
-		{
-			fixed (int* out_width2 = &out_width)
-			{
-				fixed (int* out_height2 = &out_height)
-				{
-					ImGuiDebug.Log("ImFontAtlas_GetTexDataAsRGBA32 #1");
-					ImGuiNative.ImFontAtlas_GetTexDataAsRGBA32(NativePtr, out_pixels2, out_width2, out_height2, null);
-				}
-			}
-		}
-	}
-
-	public unsafe void GetTexDataAsRGBA32(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel)
-	{
-		fixed (byte** out_pixels2 = &out_pixels)
-		{
-			fixed (int* out_width2 = &out_width)
-			{
-				fixed (int* out_height2 = &out_height)
-				{
-					fixed (int* out_bytes_per_pixel2 = &out_bytes_per_pixel)
-					{
-						ImGuiDebug.Log("ImFontAtlas_GetTexDataAsRGBA32 #2");
-						ImGuiNative.ImFontAtlas_GetTexDataAsRGBA32(NativePtr, out_pixels2, out_width2, out_height2, out_bytes_per_pixel2);
-					}
-				}
-			}
-		}
-	}
-
-	public unsafe bool IsBuilt()
-	{
-		ImGuiDebug.Log("ImFontAtlas_IsBuilt #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFontAtlas_IsBuilt(NativePtr));
-	}
-
-	public unsafe void SetTexID(IntPtr id)
-	{
-		ImGuiDebug.Log("ImFontAtlas_SetTexID #1");
-		ImGuiNative.ImFontAtlas_SetTexID(NativePtr, id);
-	}
-
-	public unsafe void ImFontAtlas_destroy()
-	{
-		ImGuiDebug.Log("ImFontAtlas_destroy #1");
-		ImGuiNative.ImFontAtlas_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontBuilderIO.cs Out/RG.ImGui/ImGuiNET/ImFontBuilderIO.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontBuilderIO.cs	2025-05-22 18:15:44.439245700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontBuilderIO.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImFontBuilderIO
-{
-	public IntPtr FontBuilder_Build;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontBuilderIOPtr.cs Out/RG.ImGui/ImGuiNET/ImFontBuilderIOPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontBuilderIOPtr.cs	2025-05-22 18:15:44.463839900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontBuilderIOPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,45 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImFontBuilderIOPtr
-{
-	public unsafe ImFontBuilderIO* NativePtr { get; }
-
-	public unsafe IntPtr FontBuilder_Build
-	{
-		get
-		{
-			return NativePtr->FontBuilder_Build;
-		}
-		set
-		{
-			NativePtr->FontBuilder_Build = value;
-		}
-	}
-
-	public unsafe ImFontBuilderIOPtr(ImFontBuilderIO* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontBuilderIOPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontBuilderIO*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontBuilderIOPtr(ImFontBuilderIO* nativePtr)
-	{
-		return new ImFontBuilderIOPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontBuilderIO*(ImFontBuilderIOPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontBuilderIOPtr(IntPtr nativePtr)
-	{
-		return new ImFontBuilderIOPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontConfig.cs Out/RG.ImGui/ImGuiNET/ImFontConfig.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontConfig.cs	2025-05-22 18:15:44.454328700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontConfig.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,122 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontConfig
-{
-	public unsafe void* FontData;
-
-	public int FontDataSize;
-
-	public byte FontDataOwnedByAtlas;
-
-	public int FontNo;
-
-	public float SizePixels;
-
-	public int OversampleH;
-
-	public int OversampleV;
-
-	public byte PixelSnapH;
-
-	public Vector2 GlyphExtraSpacing;
-
-	public Vector2 GlyphOffset;
-
-	public unsafe ushort* GlyphRanges;
-
-	public float GlyphMinAdvanceX;
-
-	public float GlyphMaxAdvanceX;
-
-	public byte MergeMode;
-
-	public uint FontBuilderFlags;
-
-	public float RasterizerMultiply;
-
-	public ushort EllipsisChar;
-
-	public byte Name_0;
-
-	public byte Name_1;
-
-	public byte Name_2;
-
-	public byte Name_3;
-
-	public byte Name_4;
-
-	public byte Name_5;
-
-	public byte Name_6;
-
-	public byte Name_7;
-
-	public byte Name_8;
-
-	public byte Name_9;
-
-	public byte Name_10;
-
-	public byte Name_11;
-
-	public byte Name_12;
-
-	public byte Name_13;
-
-	public byte Name_14;
-
-	public byte Name_15;
-
-	public byte Name_16;
-
-	public byte Name_17;
-
-	public byte Name_18;
-
-	public byte Name_19;
-
-	public byte Name_20;
-
-	public byte Name_21;
-
-	public byte Name_22;
-
-	public byte Name_23;
-
-	public byte Name_24;
-
-	public byte Name_25;
-
-	public byte Name_26;
-
-	public byte Name_27;
-
-	public byte Name_28;
-
-	public byte Name_29;
-
-	public byte Name_30;
-
-	public byte Name_31;
-
-	public byte Name_32;
-
-	public byte Name_33;
-
-	public byte Name_34;
-
-	public byte Name_35;
-
-	public byte Name_36;
-
-	public byte Name_37;
-
-	public byte Name_38;
-
-	public byte Name_39;
-
-	public unsafe ImFont* DstFont;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontConfigPtr.cs Out/RG.ImGui/ImGuiNET/ImFontConfigPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontConfigPtr.cs	2025-05-22 18:15:44.516544400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontConfigPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,104 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontConfigPtr
-{
-	public unsafe ImFontConfig* NativePtr { get; }
-
-	public unsafe IntPtr FontData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->FontData;
-		}
-		set
-		{
-			NativePtr->FontData = (void*)value;
-		}
-	}
-
-	public unsafe ref int FontDataSize => ref Unsafe.AsRef<int>(&NativePtr->FontDataSize);
-
-	public unsafe ref bool FontDataOwnedByAtlas => ref Unsafe.AsRef<bool>(&NativePtr->FontDataOwnedByAtlas);
-
-	public unsafe ref int FontNo => ref Unsafe.AsRef<int>(&NativePtr->FontNo);
-
-	public unsafe ref float SizePixels => ref Unsafe.AsRef<float>(&NativePtr->SizePixels);
-
-	public unsafe ref int OversampleH => ref Unsafe.AsRef<int>(&NativePtr->OversampleH);
-
-	public unsafe ref int OversampleV => ref Unsafe.AsRef<int>(&NativePtr->OversampleV);
-
-	public unsafe ref bool PixelSnapH => ref Unsafe.AsRef<bool>(&NativePtr->PixelSnapH);
-
-	public unsafe ref Vector2 GlyphExtraSpacing => ref Unsafe.AsRef<Vector2>(&NativePtr->GlyphExtraSpacing);
-
-	public unsafe ref Vector2 GlyphOffset => ref Unsafe.AsRef<Vector2>(&NativePtr->GlyphOffset);
-
-	public unsafe IntPtr GlyphRanges
-	{
-		get
-		{
-			return (IntPtr)NativePtr->GlyphRanges;
-		}
-		set
-		{
-			NativePtr->GlyphRanges = (ushort*)(void*)value;
-		}
-	}
-
-	public unsafe ref float GlyphMinAdvanceX => ref Unsafe.AsRef<float>(&NativePtr->GlyphMinAdvanceX);
-
-	public unsafe ref float GlyphMaxAdvanceX => ref Unsafe.AsRef<float>(&NativePtr->GlyphMaxAdvanceX);
-
-	public unsafe ref bool MergeMode => ref Unsafe.AsRef<bool>(&NativePtr->MergeMode);
-
-	public unsafe ref uint FontBuilderFlags => ref Unsafe.AsRef<uint>(&NativePtr->FontBuilderFlags);
-
-	public unsafe ref float RasterizerMultiply => ref Unsafe.AsRef<float>(&NativePtr->RasterizerMultiply);
-
-	public unsafe ref ushort EllipsisChar => ref Unsafe.AsRef<ushort>(&NativePtr->EllipsisChar);
-
-	public unsafe RangeAccessor<byte> Name => new RangeAccessor<byte>(&NativePtr->Name_0, 40);
-
-	public unsafe ref ImFontPtr DstFont => ref Unsafe.AsRef<ImFontPtr>(&NativePtr->DstFont);
-
-	public unsafe ImFontConfigPtr(ImFontConfig* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontConfigPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontConfig*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontConfigPtr(ImFontConfig* nativePtr)
-	{
-		return new ImFontConfigPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontConfig*(ImFontConfigPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontConfigPtr(IntPtr nativePtr)
-	{
-		return new ImFontConfigPtr(nativePtr);
-	}
-
-	public unsafe void ImFontConfig_destroy()
-	{
-		ImGuiDebug.Log("ImFontConfig_destroy #1");
-		ImGuiNative.ImFontConfig_destroy(NativePtr);
-	}
-
-	public unsafe ImFontConfigPtr(ref ImFontConfig fontConfig)
-	{
-		NativePtr = (ImFontConfig*)Unsafe.AsPointer(ref fontConfig);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyph.cs Out/RG.ImGui/ImGuiNET/ImFontGlyph.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyph.cs	2025-05-22 18:15:44.454328700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontGlyph.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,28 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImFontGlyph
-{
-	public uint Colored;
-
-	public uint Visible;
-
-	public uint Codepoint;
-
-	public float AdvanceX;
-
-	public float X0;
-
-	public float Y0;
-
-	public float X1;
-
-	public float Y1;
-
-	public float U0;
-
-	public float V0;
-
-	public float U1;
-
-	public float V1;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphPtr.cs Out/RG.ImGui/ImGuiNET/ImFontGlyphPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphPtr.cs	2025-05-22 18:15:44.485876300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontGlyphPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,58 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImFontGlyphPtr
-{
-	public unsafe ImFontGlyph* NativePtr { get; }
-
-	public unsafe ref uint Colored => ref Unsafe.AsRef<uint>(&NativePtr->Colored);
-
-	public unsafe ref uint Visible => ref Unsafe.AsRef<uint>(&NativePtr->Visible);
-
-	public unsafe ref uint Codepoint => ref Unsafe.AsRef<uint>(&NativePtr->Codepoint);
-
-	public unsafe ref float AdvanceX => ref Unsafe.AsRef<float>(&NativePtr->AdvanceX);
-
-	public unsafe ref float X0 => ref Unsafe.AsRef<float>(&NativePtr->X0);
-
-	public unsafe ref float Y0 => ref Unsafe.AsRef<float>(&NativePtr->Y0);
-
-	public unsafe ref float X1 => ref Unsafe.AsRef<float>(&NativePtr->X1);
-
-	public unsafe ref float Y1 => ref Unsafe.AsRef<float>(&NativePtr->Y1);
-
-	public unsafe ref float U0 => ref Unsafe.AsRef<float>(&NativePtr->U0);
-
-	public unsafe ref float V0 => ref Unsafe.AsRef<float>(&NativePtr->V0);
-
-	public unsafe ref float U1 => ref Unsafe.AsRef<float>(&NativePtr->U1);
-
-	public unsafe ref float V1 => ref Unsafe.AsRef<float>(&NativePtr->V1);
-
-	public unsafe ImFontGlyphPtr(ImFontGlyph* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontGlyphPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontGlyph*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontGlyphPtr(ImFontGlyph* nativePtr)
-	{
-		return new ImFontGlyphPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontGlyph*(ImFontGlyphPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontGlyphPtr(IntPtr nativePtr)
-	{
-		return new ImFontGlyphPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilder.cs Out/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilder.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilder.cs	2025-05-22 18:15:44.456333200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilder.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImFontGlyphRangesBuilder
-{
-	public ImVector UsedChars;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilderPtr.cs Out/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilderPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilderPtr.cs	2025-05-22 18:15:44.517541400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontGlyphRangesBuilderPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,143 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImFontGlyphRangesBuilderPtr
-{
-	public unsafe ImFontGlyphRangesBuilder* NativePtr { get; }
-
-	public unsafe ImVector<uint> UsedChars => new ImVector<uint>(NativePtr->UsedChars);
-
-	public unsafe ImFontGlyphRangesBuilderPtr(ImFontGlyphRangesBuilder* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontGlyphRangesBuilderPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFontGlyphRangesBuilder*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontGlyphRangesBuilderPtr(ImFontGlyphRangesBuilder* nativePtr)
-	{
-		return new ImFontGlyphRangesBuilderPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFontGlyphRangesBuilder*(ImFontGlyphRangesBuilderPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontGlyphRangesBuilderPtr(IntPtr nativePtr)
-	{
-		return new ImFontGlyphRangesBuilderPtr(nativePtr);
-	}
-
-	public unsafe void AddChar(ushort c)
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_AddChar #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_AddChar(NativePtr, c);
-	}
-
-	public unsafe void AddRanges(ref ushort ranges)
-	{
-		fixed (ushort* ranges2 = &ranges)
-		{
-			ImGuiDebug.Log("ImFontGlyphRangesBuilder_AddRanges #1");
-			ImGuiNative.ImFontGlyphRangesBuilder_AddRanges(NativePtr, ranges2);
-		}
-	}
-
-	public unsafe void AddText(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_AddText #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_AddText(NativePtr, ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddText(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_AddText #2");
-		ImGuiNative.ImFontGlyphRangesBuilder_AddText(NativePtr, ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void BuildRanges(ImVector out_ranges)
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_BuildRanges #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_BuildRanges(NativePtr, out_ranges);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_Clear #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_Clear(NativePtr);
-	}
-
-	public unsafe bool GetBit(uint n)
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_GetBit #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFontGlyphRangesBuilder_GetBit(NativePtr, n));
-	}
-
-	public unsafe void SetBit(uint n)
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_SetBit #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_SetBit(NativePtr, n);
-	}
-
-	public unsafe void ImFontGlyphRangesBuilder_destroy()
-	{
-		ImGuiDebug.Log("ImFontGlyphRangesBuilder_destroy #1");
-		ImGuiNative.ImFontGlyphRangesBuilder_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontPtr.cs Out/RG.ImGui/ImGuiNET/ImFontPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFontPtr.cs	2025-05-22 18:15:44.695355000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFontPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,573 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using System.Text;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImFontPtr
-{
-	public unsafe ImFont* NativePtr { get; }
-
-	public unsafe ImVector<float> IndexAdvanceX => new ImVector<float>(NativePtr->IndexAdvanceX);
-
-	public unsafe ref float FallbackAdvanceX => ref Unsafe.AsRef<float>(&NativePtr->FallbackAdvanceX);
-
-	public unsafe ref float FontSize => ref Unsafe.AsRef<float>(&NativePtr->FontSize);
-
-	public unsafe ImVector<ushort> IndexLookup => new ImVector<ushort>(NativePtr->IndexLookup);
-
-	public unsafe ImPtrVector<ImFontGlyphPtr> Glyphs => new ImPtrVector<ImFontGlyphPtr>(NativePtr->Glyphs, Unsafe.SizeOf<ImFontGlyph>());
-
-	public unsafe ref ImFontGlyphPtr FallbackGlyph => ref Unsafe.AsRef<ImFontGlyphPtr>(&NativePtr->FallbackGlyph);
-
-	public unsafe ref ImFontAtlasPtr ContainerAtlas => ref Unsafe.AsRef<ImFontAtlasPtr>(&NativePtr->ContainerAtlas);
-
-	public unsafe ref ImFontConfigPtr ConfigData => ref Unsafe.AsRef<ImFontConfigPtr>(&NativePtr->ConfigData);
-
-	public unsafe ref short ConfigDataCount => ref Unsafe.AsRef<short>(&NativePtr->ConfigDataCount);
-
-	public unsafe ref ushort FallbackChar => ref Unsafe.AsRef<ushort>(&NativePtr->FallbackChar);
-
-	public unsafe ref ushort EllipsisChar => ref Unsafe.AsRef<ushort>(&NativePtr->EllipsisChar);
-
-	public unsafe ref ushort DotChar => ref Unsafe.AsRef<ushort>(&NativePtr->DotChar);
-
-	public unsafe ref bool DirtyLookupTables => ref Unsafe.AsRef<bool>(&NativePtr->DirtyLookupTables);
-
-	public unsafe ref float Scale => ref Unsafe.AsRef<float>(&NativePtr->Scale);
-
-	public unsafe ref float Ascent => ref Unsafe.AsRef<float>(&NativePtr->Ascent);
-
-	public unsafe ref float Descent => ref Unsafe.AsRef<float>(&NativePtr->Descent);
-
-	public unsafe ref int MetricsTotalSurface => ref Unsafe.AsRef<int>(&NativePtr->MetricsTotalSurface);
-
-	public unsafe RangeAccessor<byte> Used4kPagesMap => new RangeAccessor<byte>(&NativePtr->Used4kPagesMap_0, 2);
-
-	public unsafe ImFontPtr(ImFont* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImFontPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImFont*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImFontPtr(ImFont* nativePtr)
-	{
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImFont*(ImFontPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImFontPtr(IntPtr nativePtr)
-	{
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe void AddGlyph(ImFontConfigPtr src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
-	{
-		ImGuiDebug.Log("ImFont_AddGlyph #1");
-		ImGuiNative.ImFont_AddGlyph(NativePtr, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
-	}
-
-	public unsafe void AddRemapChar(ushort dst, ushort src)
-	{
-		byte overwrite_dst = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("ImFont_AddRemapChar #1");
-		ImGuiNative.ImFont_AddRemapChar(NativePtr, dst, src, overwrite_dst);
-	}
-
-	public unsafe void AddRemapChar(ushort dst, ushort src, bool overwrite_dst)
-	{
-		byte overwrite_dst2 = MarshalUtils.bool_to_byte(overwrite_dst);
-		ImGuiDebug.Log("ImFont_AddRemapChar #2");
-		ImGuiNative.ImFont_AddRemapChar(NativePtr, dst, src, overwrite_dst2);
-	}
-
-	public unsafe void BuildLookupTable()
-	{
-		ImGuiDebug.Log("ImFont_BuildLookupTable #1");
-		ImGuiNative.ImFont_BuildLookupTable(NativePtr);
-	}
-
-	public unsafe Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImFont_CalcTextSizeA #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImFont_CalcTextSizeA(&result, NativePtr, size, max_width, wrap_width, ptr, null, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImFont_CalcTextSizeA #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImFont_CalcTextSizeA(&result, NativePtr, size, max_width, wrap_width, ptr, ptr2, null);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, ref byte* remaining)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 result = default(Vector2);
-		fixed (byte** remaining2 = &remaining)
-		{
-			ImGuiDebug.Log("ImFont_CalcTextSizeA #3");
-			ImGuiNative.ImFont_CalcTextSizeA(&result, NativePtr, size, max_width, wrap_width, ptr, null, remaining2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end, ref byte* remaining)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 result = default(Vector2);
-		fixed (byte** remaining2 = &remaining)
-		{
-			ImGuiDebug.Log("ImFont_CalcTextSizeA #4");
-			ImGuiNative.ImFont_CalcTextSizeA(&result, NativePtr, size, max_width, wrap_width, ptr, ptr2, remaining2);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe string CalcWordWrapPositionA(float scale, string text, string text_end, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImFont_CalcWordWrapPositionA #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.ImFont_CalcWordWrapPositionA(NativePtr, scale, ptr, ptr2, wrap_width));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe void ClearOutputData()
-	{
-		ImGuiDebug.Log("ImFont_ClearOutputData #1");
-		ImGuiNative.ImFont_ClearOutputData(NativePtr);
-	}
-
-	public unsafe ImFontGlyphPtr FindGlyph(ushort c)
-	{
-		ImGuiDebug.Log("ImFont_FindGlyph #1");
-		ImFontGlyph* nativePtr = ImGuiNative.ImFont_FindGlyph(NativePtr, c);
-		return new ImFontGlyphPtr(nativePtr);
-	}
-
-	public unsafe ImFontGlyphPtr FindGlyphNoFallback(ushort c)
-	{
-		ImGuiDebug.Log("ImFont_FindGlyphNoFallback #1");
-		ImFontGlyph* nativePtr = ImGuiNative.ImFont_FindGlyphNoFallback(NativePtr, c);
-		return new ImFontGlyphPtr(nativePtr);
-	}
-
-	public unsafe float GetCharAdvance(ushort c)
-	{
-		ImGuiDebug.Log("ImFont_GetCharAdvance #1");
-		return ImGuiNative.ImFont_GetCharAdvance(NativePtr, c);
-	}
-
-	public unsafe string GetDebugName()
-	{
-		ImGuiDebug.Log("ImFont_GetDebugName #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.ImFont_GetDebugName(NativePtr));
-	}
-
-	public unsafe void GrowIndex(int new_size)
-	{
-		ImGuiDebug.Log("ImFont_GrowIndex #1");
-		ImGuiNative.ImFont_GrowIndex(NativePtr, new_size);
-	}
-
-	public unsafe bool IsGlyphRangeUnused(uint c_begin, uint c_last)
-	{
-		ImGuiDebug.Log("ImFont_IsGlyphRangeUnused #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFont_IsGlyphRangeUnused(NativePtr, c_begin, c_last));
-	}
-
-	public unsafe bool IsLoaded()
-	{
-		ImGuiDebug.Log("ImFont_IsLoaded #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImFont_IsLoaded(NativePtr));
-	}
-
-	public unsafe void RenderChar(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, ushort c)
-	{
-		ImGuiDebug.Log("ImFont_RenderChar #1");
-		ImGuiNative.ImFont_RenderChar(NativePtr, draw_list, size, pos, col, c);
-	}
-
-	public unsafe void RenderText(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text_begin, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte cpu_fine_clip = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("ImFont_RenderText #1");
-		ImGuiNative.ImFont_RenderText(NativePtr, draw_list, size, pos, col, clip_rect, ptr, ptr2, 0f, cpu_fine_clip);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void RenderText(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text_begin, string text_end, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte cpu_fine_clip = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("ImFont_RenderText #2");
-		ImGuiNative.ImFont_RenderText(NativePtr, draw_list, size, pos, col, clip_rect, ptr, ptr2, wrap_width, cpu_fine_clip);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void RenderText(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text_begin, string text_end, bool cpu_fine_clip)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte cpu_fine_clip2 = MarshalUtils.bool_to_byte(cpu_fine_clip);
-		ImGuiDebug.Log("ImFont_RenderText #3");
-		ImGuiNative.ImFont_RenderText(NativePtr, draw_list, size, pos, col, clip_rect, ptr, ptr2, 0f, cpu_fine_clip2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void RenderText(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text_begin, string text_end, float wrap_width, bool cpu_fine_clip)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte cpu_fine_clip2 = MarshalUtils.bool_to_byte(cpu_fine_clip);
-		ImGuiDebug.Log("ImFont_RenderText #4");
-		ImGuiNative.ImFont_RenderText(NativePtr, draw_list, size, pos, col, clip_rect, ptr, ptr2, wrap_width, cpu_fine_clip2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void SetGlyphVisible(ushort c, bool visible)
-	{
-		byte visible2 = MarshalUtils.bool_to_byte(visible);
-		ImGuiDebug.Log("ImFont_SetGlyphVisible #1");
-		ImGuiNative.ImFont_SetGlyphVisible(NativePtr, c, visible2);
-	}
-
-	public unsafe void ImFont_destroy()
-	{
-		ImGuiDebug.Log("ImFont_destroy #1");
-		ImGuiNative.ImFont_destroy(NativePtr);
-	}
-
-	public unsafe Vector2 CalcTextSizeA(float font_size, float max_width, float wrap_width, char ch)
-	{
-		int num = 0;
-		num = Encoding.UTF8.GetByteCount(&ch, 1);
-		byte* ptr = stackalloc byte[(int)(uint)(num + 1)];
-		int bytes = Encoding.UTF8.GetBytes(&ch, 1, ptr, num);
-		ptr[bytes] = 0;
-		byte* text_end = null;
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImFont_CalcTextSizeA(&result, NativePtr, font_size, max_width, wrap_width, ptr, text_end, null);
-		return result;
-	}
-
-	public unsafe int CalcWordWrapPositionA(float scale, string text, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text != null)
-		{
-			num = Encoding.UTF8.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : Util.Allocate(num + 1));
-			int utf = Util.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		else
-		{
-			ptr = null;
-		}
-		byte* text_end = null;
-		byte* ptr2 = ImGuiNative.ImFont_CalcWordWrapPositionA(NativePtr, scale, ptr, text_end, wrap_width);
-		if (num > 2048)
-		{
-			Util.Free(ptr);
-		}
-		return Encoding.UTF8.GetCharCount(ptr, (int)(ptr2 - ptr));
-	}
-
-	public unsafe void RenderText(ImDrawListPtr draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text, float wrap_width = 0f, bool cpu_fine_clip = false)
-	{
-		ImDrawList* nativePtr = draw_list.NativePtr;
-		int num = 0;
-		byte* ptr;
-		if (text != null)
-		{
-			num = Encoding.UTF8.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : Util.Allocate(num + 1));
-			int utf = Util.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		else
-		{
-			ptr = null;
-		}
-		byte* text_end = null;
-		ImGuiNative.ImFont_RenderText(NativePtr, nativePtr, size, pos, col, clip_rect, ptr, text_end, wrap_width, (byte)(cpu_fine_clip ? 1 : 0));
-		if (num > 2048)
-		{
-			Util.Free(ptr);
-		}
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFreetype.cs Out/RG.ImGui/ImGuiNET/ImFreetype.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFreetype.cs	2025-05-22 18:15:44.727418100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFreetype.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,25 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public static class ImFreetype
-{
-	[Flags]
-	public enum RasterizerFlags : uint
-	{
-		None = 0u,
-		NoHinting = 1u,
-		NoAutoHint = 2u,
-		ForceAutoHint = 4u,
-		LightHinting = 8u,
-		MonoHinting = 0x10u,
-		Bold = 0x20u,
-		Oblique = 0x40u,
-		MonoChrome = 0x80u
-	}
-
-	public unsafe static bool BuildFontAtlas(ImFontAtlasPtr atlas, RasterizerFlags extra_flags)
-	{
-		return ImFreetypeNative.frBuildFontAtlas(atlas.NativePtr, (uint)extra_flags);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImFreetypeNative.cs Out/RG.ImGui/ImGuiNET/ImFreetypeNative.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImFreetypeNative.cs	2025-05-22 18:15:44.736918800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImFreetypeNative.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-using System.Runtime.InteropServices;
-
-namespace ImGuiNET;
-
-internal static class ImFreetypeNative
-{
-	[DllImport("cimgui-freetype", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern bool frBuildFontAtlas(ImFontAtlas* atlas, uint extra_flags);
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGui.cs Out/RG.ImGui/ImGuiNET/ImGui.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGui.cs	2025-05-22 18:15:46.768065100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGui.cs	2025-05-22 17:35:18.322472000 -0700
@@ -1,36993 +1,7918 @@
-using System;
-using System.Runtime.CompilerServices;
-using System.Text;
-using UnityEngine;
-using UnityEngine.Scripting;
-
-namespace ImGuiNET;
-
-[Preserve]
-public static class ImGui
+namespace ImGuiNET
 {
-	public unsafe static ImGuiPayloadPtr AcceptDragDropPayload(string type)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igAcceptDragDropPayload #1");
-		ImGuiPayload* nativePtr = ImGuiNative.igAcceptDragDropPayload(ptr, ImGuiDragDropFlags.None);
-		ImGuiPayloadPtr result = new ImGuiPayloadPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiPayloadPtr AcceptDragDropPayload(string type, ImGuiDragDropFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igAcceptDragDropPayload #2");
-		ImGuiPayload* nativePtr = ImGuiNative.igAcceptDragDropPayload(ptr, flags);
-		ImGuiPayloadPtr result = new ImGuiPayloadPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void ActivateItem(uint id)
-	{
-		ImGuiDebug.Log("igActivateItem #1");
-		ImGuiNative.igActivateItem(id);
-	}
-
-	public static uint AddContextHook(IntPtr context, IntPtr hook)
-	{
-		ImGuiDebug.Log("igAddContextHook #1");
-		return ImGuiNative.igAddContextHook(context, hook);
-	}
-
-	public unsafe static void AddSettingsHandler(ImGuiSettingsHandlerPtr handler)
-	{
-		ImGuiDebug.Log("igAddSettingsHandler #1");
-		ImGuiNative.igAddSettingsHandler(handler);
-	}
-
-	public static void AlignTextToFramePadding()
-	{
-		ImGuiDebug.Log("igAlignTextToFramePadding #1");
-		ImGuiNative.igAlignTextToFramePadding();
-	}
-
-	public unsafe static bool ArrowButton(string str_id, ImGuiDir dir)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igArrowButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igArrowButton(ptr, dir));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ArrowButtonEx(string str_id, ImGuiDir dir, Vector2 size_arg)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igArrowButtonEx #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igArrowButtonEx(ptr, dir, size_arg, ImGuiButtonFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ArrowButtonEx(string str_id, ImGuiDir dir, Vector2 size_arg, ImGuiButtonFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igArrowButtonEx #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igArrowButtonEx(ptr, dir, size_arg, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Begin(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBegin #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBegin(ptr, null, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public unsafe static bool Begin(string name, ref bool p_open)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBegin #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBegin(ptr, p_open2, ImGuiWindowFlags.None));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public unsafe static bool Begin(string name, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBegin #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBegin(ptr, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public unsafe static bool Begin(string name, ref bool p_open, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBegin #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBegin(ptr, p_open2, flags));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public unsafe static bool BeginChild(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_Str #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_Str #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, bool border)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_Str #3");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border2, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_Str #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, Vector2 size, bool border)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_Str #5");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border2, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, Vector2 size, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_Str #6");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, bool border, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_Str #7");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border2, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginChild(string str_id, Vector2 size, bool border, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_Str #8");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_Str(ptr, size, border2, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static bool BeginChild(uint id)
-	{
-		Vector2 size = new Vector2(0f, 0f);
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_ID #2");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border, ImGuiWindowFlags.None));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, Vector2 size)
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_ID #3");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border, ImGuiWindowFlags.None));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, bool border)
-	{
-		Vector2 size = new Vector2(0f, 0f);
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_ID #4");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border2, ImGuiWindowFlags.None));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, ImGuiWindowFlags flags)
-	{
-		Vector2 size = new Vector2(0f, 0f);
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_ID #5");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, Vector2 size, bool border)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_ID #6");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border2, ImGuiWindowFlags.None));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, Vector2 size, ImGuiWindowFlags flags)
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igBeginChild_ID #7");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, bool border, ImGuiWindowFlags flags)
-	{
-		Vector2 size = new Vector2(0f, 0f);
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_ID #8");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border2, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginChild(uint id, Vector2 size, bool border, ImGuiWindowFlags flags)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChild_ID #9");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChild_ID(id, size, border2, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginChildEx(string name, uint id, Vector2 size_arg, bool border, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igBeginChildEx #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChildEx(ptr, id, size_arg, border2, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static bool BeginChildFrame(uint id, Vector2 size)
-	{
-		ImGuiDebug.Log("igBeginChildFrame #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChildFrame(id, size, ImGuiWindowFlags.None));
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public static bool BeginChildFrame(uint id, Vector2 size, ImGuiWindowFlags flags)
-	{
-		ImGuiDebug.Log("igBeginChildFrame #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igBeginChildFrame(id, size, flags));
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-		return result;
-	}
-
-	public unsafe static void BeginColumns(string str_id, int count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginColumns #1");
-		ImGuiNative.igBeginColumns(ptr, count, ImGuiOldColumnFlags.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public unsafe static void BeginColumns(string str_id, int count, ImGuiOldColumnFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginColumns #2");
-		ImGuiNative.igBeginColumns(ptr, count, flags);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public unsafe static bool BeginCombo(string label, string preview_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (preview_value == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(preview_value);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(preview_value, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igBeginCombo #1");
-		bool num3 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginCombo(ptr, ptr2, ImGuiComboFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num3)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num3;
-		}
-		ImGuiDebug.Log("{}");
-		return num3;
-	}
-
-	public unsafe static bool BeginCombo(string label, string preview_value, ImGuiComboFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (preview_value == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(preview_value);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(preview_value, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igBeginCombo #2");
-		bool num3 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginCombo(ptr, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num3)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num3;
-		}
-		ImGuiDebug.Log("{}");
-		return num3;
-	}
-
-	public static bool BeginComboPopup(uint popup_id, Rect bb, ImGuiComboFlags flags)
-	{
-		ImGuiDebug.Log("igBeginComboPopup #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginComboPopup(popup_id, bb, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginComboPreview()
-	{
-		ImGuiDebug.Log("igBeginComboPreview #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginComboPreview());
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static void BeginDisabled()
-	{
-		byte disabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igBeginDisabled #1");
-		ImGuiNative.igBeginDisabled(disabled);
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public static void BeginDisabled(bool disabled)
-	{
-		byte disabled2 = MarshalUtils.bool_to_byte(disabled);
-		ImGuiDebug.Log("igBeginDisabled #2");
-		ImGuiNative.igBeginDisabled(disabled2);
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public static bool BeginDragDropSource()
-	{
-		ImGuiDebug.Log("igBeginDragDropSource #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginDragDropSource(ImGuiDragDropFlags.None));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginDragDropSource(ImGuiDragDropFlags flags)
-	{
-		ImGuiDebug.Log("igBeginDragDropSource #2");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginDragDropSource(flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginDragDropTarget()
-	{
-		ImGuiDebug.Log("igBeginDragDropTarget #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginDragDropTarget());
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static bool BeginDragDropTargetCustom(Rect bb, uint id)
-	{
-		ImGuiDebug.Log("igBeginDragDropTargetCustom #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginDragDropTargetCustom(bb, id));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public static void BeginGroup()
-	{
-		ImGuiDebug.Log("igBeginGroup #1");
-		ImGuiNative.igBeginGroup();
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public unsafe static bool BeginListBox(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginListBox #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginListBox(ptr, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginListBox(string label, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginListBox #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginListBox(ptr, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static bool BeginMainMenuBar()
-	{
-		ImGuiDebug.Log("igBeginMainMenuBar #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMainMenuBar());
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginMenu(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igBeginMenu #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMenu(ptr, enabled));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginMenu(string label, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igBeginMenu #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMenu(ptr, enabled2));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static bool BeginMenuBar()
-	{
-		ImGuiDebug.Log("igBeginMenuBar #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMenuBar());
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginMenuEx(string label, string icon)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igBeginMenuEx #1");
-		bool num3 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMenuEx(ptr, ptr2, enabled));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num3)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num3;
-		}
-		ImGuiDebug.Log("{}");
-		return num3;
-	}
-
-	public unsafe static bool BeginMenuEx(string label, string icon, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igBeginMenuEx #2");
-		bool num3 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginMenuEx(ptr, ptr2, enabled2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num3)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num3;
-		}
-		ImGuiDebug.Log("{}");
-		return num3;
-	}
-
-	public unsafe static bool BeginPopup(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopup #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopup(ptr, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopup(string str_id, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopup #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopup(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextItem()
-	{
-		ImGuiDebug.Log("igBeginPopupContextItem #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextItem(null, ImGuiPopupFlags.MouseButtonRight));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextItem(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextItem #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextItem(ptr, ImGuiPopupFlags.MouseButtonRight));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextItem(ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igBeginPopupContextItem #3");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextItem(null, popup_flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextItem(string str_id, ImGuiPopupFlags popup_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextItem #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextItem(ptr, popup_flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextVoid()
-	{
-		ImGuiDebug.Log("igBeginPopupContextVoid #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextVoid(null, ImGuiPopupFlags.MouseButtonRight));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextVoid(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextVoid #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextVoid(ptr, ImGuiPopupFlags.MouseButtonRight));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextVoid(ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igBeginPopupContextVoid #3");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextVoid(null, popup_flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextVoid(string str_id, ImGuiPopupFlags popup_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextVoid #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextVoid(ptr, popup_flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextWindow()
-	{
-		ImGuiDebug.Log("igBeginPopupContextWindow #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextWindow(null, ImGuiPopupFlags.MouseButtonRight));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextWindow(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextWindow #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextWindow(ptr, ImGuiPopupFlags.MouseButtonRight));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupContextWindow(ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igBeginPopupContextWindow #3");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextWindow(null, popup_flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupContextWindow(string str_id, ImGuiPopupFlags popup_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupContextWindow #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupContextWindow(ptr, popup_flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static bool BeginPopupEx(uint id, ImGuiWindowFlags extra_flags)
-	{
-		ImGuiDebug.Log("igBeginPopupEx #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupEx(id, extra_flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginPopupModal(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupModal #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupModal(ptr, null, ImGuiWindowFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupModal(string name, ref bool p_open)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBeginPopupModal #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupModal(ptr, p_open2, ImGuiWindowFlags.None));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupModal(string name, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginPopupModal #3");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupModal(ptr, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginPopupModal(string name, ref bool p_open, ImGuiWindowFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBeginPopupModal #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginPopupModal(ptr, p_open2, flags));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabBar(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTabBar #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabBar(ptr, ImGuiTabBarFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabBar(string str_id, ImGuiTabBarFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTabBar #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabBar(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabBarEx(ImGuiTabBarPtr tab_bar, Rect bb, ImGuiTabBarFlags flags)
-	{
-		ImGuiDebug.Log("igBeginTabBarEx #1");
-		bool num = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabBarEx(tab_bar, bb, flags));
-		if (num)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num;
-		}
-		ImGuiDebug.Log("{}");
-		return num;
-	}
-
-	public unsafe static bool BeginTabItem(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTabItem #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabItem(ptr, null, ImGuiTabItemFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabItem(string label, ref bool p_open)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBeginTabItem #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabItem(ptr, p_open2, ImGuiTabItemFlags.None));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabItem(string label, ImGuiTabItemFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTabItem #3");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabItem(ptr, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTabItem(string label, ref bool p_open, ImGuiTabItemFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igBeginTabItem #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTabItem(ptr, p_open2, flags));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTable #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, ImGuiTableFlags.None, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, ImGuiTableFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTable #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, flags, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, Vector2 outer_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTable #3");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, ImGuiTableFlags.None, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTable #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, ImGuiTableFlags.None, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, Vector2 outer_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTable #5");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, flags, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTable #6");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, flags, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, Vector2 outer_size, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTable #7");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, ImGuiTableFlags.None, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, Vector2 outer_size, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTable #8");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTable(ptr, column, flags, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTableEx #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, ImGuiTableFlags.None, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTableEx #2");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, flags, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, Vector2 outer_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTableEx #3");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, ImGuiTableFlags.None, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTableEx #4");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, ImGuiTableFlags.None, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, Vector2 outer_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTableEx #5");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, flags, outer_size, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 outer_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igBeginTableEx #6");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, flags, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, Vector2 outer_size, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTableEx #7");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, ImGuiTableFlags.None, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, Vector2 outer_size, float inner_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginTableEx #8");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginTableEx(ptr, id, columns_count, flags, outer_size, inner_width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public static void BeginTooltip()
-	{
-		ImGuiDebug.Log("igBeginTooltip #1");
-		ImGuiNative.igBeginTooltip();
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public static void BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)
-	{
-		ImGuiDebug.Log("igBeginTooltipEx #1");
-		ImGuiNative.igBeginTooltipEx(tooltip_flags, extra_window_flags);
-		ImGuiDebug.Log("{");
-		ImGuiDebug.LogIndent += 4;
-	}
-
-	public unsafe static bool BeginViewportSideBar(string name, ImGuiViewportPtr viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBeginViewportSideBar #1");
-		bool num2 = MarshalUtils.byte_to_bool(ImGuiNative.igBeginViewportSideBar(ptr, viewport, dir, size, window_flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		if (num2)
-		{
-			ImGuiDebug.Log("{");
-			ImGuiDebug.LogIndent += 4;
-			return num2;
-		}
-		ImGuiDebug.Log("{}");
-		return num2;
-	}
-
-	public unsafe static void BringWindowToDisplayBack(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igBringWindowToDisplayBack #1");
-		ImGuiNative.igBringWindowToDisplayBack(window);
-	}
-
-	public unsafe static void BringWindowToDisplayBehind(ImGuiWindowPtr window, ImGuiWindowPtr above_window)
-	{
-		ImGuiDebug.Log("igBringWindowToDisplayBehind #1");
-		ImGuiNative.igBringWindowToDisplayBehind(window, above_window);
-	}
-
-	public unsafe static void BringWindowToDisplayFront(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igBringWindowToDisplayFront #1");
-		ImGuiNative.igBringWindowToDisplayFront(window);
-	}
-
-	public unsafe static void BringWindowToFocusFront(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igBringWindowToFocusFront #1");
-		ImGuiNative.igBringWindowToFocusFront(window);
-	}
-
-	public static void Bullet()
-	{
-		ImGuiDebug.Log("igBullet #1");
-		ImGuiNative.igBullet();
-	}
-
-	public unsafe static void BulletText(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBulletText #1");
-		ImGuiNative.igBulletText(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void BulletTextV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igBulletTextV #1");
-		ImGuiNative.igBulletTextV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static bool Button(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButton(ptr, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Button(string label, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igButton #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButton(ptr, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ButtonBehavior(Rect bb, uint id, out bool out_hovered, out bool out_held)
-	{
-		byte b = default(byte);
-		byte* out_hovered2 = &b;
-		byte b2 = default(byte);
-		byte* out_held2 = &b2;
-		ImGuiDebug.Log("igButtonBehavior #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonBehavior(bb, id, out_hovered2, out_held2, ImGuiButtonFlags.None));
-		out_held = b2 != 0;
-		out_hovered = b != 0;
-		return result;
-	}
-
-	public unsafe static bool ButtonBehavior(Rect bb, uint id, out bool out_hovered, out bool out_held, ImGuiButtonFlags flags)
-	{
-		byte b = default(byte);
-		byte* out_hovered2 = &b;
-		byte b2 = default(byte);
-		byte* out_held2 = &b2;
-		ImGuiDebug.Log("igButtonBehavior #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonBehavior(bb, id, out_hovered2, out_held2, flags));
-		out_held = b2 != 0;
-		out_hovered = b != 0;
-		return result;
-	}
-
-	public unsafe static bool ButtonEx(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size_arg = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igButtonEx #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonEx(ptr, size_arg, ImGuiButtonFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ButtonEx(string label, Vector2 size_arg)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igButtonEx #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonEx(ptr, size_arg, ImGuiButtonFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ButtonEx(string label, ImGuiButtonFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size_arg = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igButtonEx #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonEx(ptr, size_arg, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ButtonEx(string label, Vector2 size_arg, ImGuiButtonFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igButtonEx #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igButtonEx(ptr, size_arg, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcItemSize(Vector2 size, float default_w, float default_h)
-	{
-		ImGuiDebug.Log("igCalcItemSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcItemSize(&result, size, default_w, default_h);
-		return result;
-	}
-
-	public static float CalcItemWidth()
-	{
-		ImGuiDebug.Log("igCalcItemWidth #1");
-		return ImGuiNative.igCalcItemWidth();
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_double_hash = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igCalcTextSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, null, hide_text_after_double_hash, -1f);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_double_hash = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igCalcTextSize #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, ptr2, hide_text_after_double_hash, -1f);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, bool hide_text_after_double_hash)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_double_hash2 = MarshalUtils.bool_to_byte(hide_text_after_double_hash);
-		ImGuiDebug.Log("igCalcTextSize #3");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, null, hide_text_after_double_hash2, -1f);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_double_hash = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igCalcTextSize #4");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, null, hide_text_after_double_hash, wrap_width);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_double_hash2 = MarshalUtils.bool_to_byte(hide_text_after_double_hash);
-		ImGuiDebug.Log("igCalcTextSize #5");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, ptr2, hide_text_after_double_hash2, -1f);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, string text_end, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_double_hash = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igCalcTextSize #6");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, ptr2, hide_text_after_double_hash, wrap_width);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, bool hide_text_after_double_hash, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_double_hash2 = MarshalUtils.bool_to_byte(hide_text_after_double_hash);
-		ImGuiDebug.Log("igCalcTextSize #7");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, null, hide_text_after_double_hash2, wrap_width);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_double_hash2 = MarshalUtils.bool_to_byte(hide_text_after_double_hash);
-		ImGuiDebug.Log("igCalcTextSize #8");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcTextSize(&result, ptr, ptr2, hide_text_after_double_hash2, wrap_width);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static int CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
-	{
-		ImGuiDebug.Log("igCalcTypematicRepeatAmount #1");
-		return ImGuiNative.igCalcTypematicRepeatAmount(t0, t1, repeat_delay, repeat_rate);
-	}
-
-	public unsafe static Vector2 CalcWindowNextAutoFitSize(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igCalcWindowNextAutoFitSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igCalcWindowNextAutoFitSize(&result, window);
-		return result;
-	}
-
-	public static float CalcWrapWidthForPos(Vector2 pos, float wrap_pos_x)
-	{
-		ImGuiDebug.Log("igCalcWrapWidthForPos #1");
-		return ImGuiNative.igCalcWrapWidthForPos(pos, wrap_pos_x);
-	}
-
-	public static void CallContextHooks(IntPtr context, IntPtr type)
-	{
-		ImGuiDebug.Log("igCallContextHooks #1");
-		ImGuiNative.igCallContextHooks(context, type);
-	}
-
-	public unsafe static bool Checkbox(string label, ref bool v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(v);
-		byte* v2 = &b;
-		ImGuiDebug.Log("igCheckbox #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igCheckbox(ptr, v2));
-		v = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CheckboxFlags(string label, ref int flags, int flags_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* flags2 = &flags)
-		{
-			ImGuiDebug.Log("igCheckboxFlags_IntPtr #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCheckboxFlags_IntPtr(ptr, flags2, flags_value));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CheckboxFlags(string label, ref uint flags, uint flags_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (uint* flags2 = &flags)
-		{
-			ImGuiDebug.Log("igCheckboxFlags_UintPtr #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCheckboxFlags_UintPtr(ptr, flags2, flags_value));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CheckboxFlags(string label, ref long flags, long flags_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (long* flags2 = &flags)
-		{
-			ImGuiDebug.Log("igCheckboxFlags_S64Ptr #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCheckboxFlags_S64Ptr(ptr, flags2, flags_value));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CheckboxFlags(string label, ref ulong flags, ulong flags_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (ulong* flags2 = &flags)
-		{
-			ImGuiDebug.Log("igCheckboxFlags_U64Ptr #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCheckboxFlags_U64Ptr(ptr, flags2, flags_value));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void ClearActiveID()
-	{
-		ImGuiDebug.Log("igClearActiveID #1");
-		ImGuiNative.igClearActiveID();
-	}
-
-	public static void ClearDragDrop()
-	{
-		ImGuiDebug.Log("igClearDragDrop #1");
-		ImGuiNative.igClearDragDrop();
-	}
-
-	public static void ClearIniSettings()
-	{
-		ImGuiDebug.Log("igClearIniSettings #1");
-		ImGuiNative.igClearIniSettings();
-	}
-
-	public static bool CloseButton(uint id, Vector2 pos)
-	{
-		ImGuiDebug.Log("igCloseButton #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igCloseButton(id, pos));
-	}
-
-	public static void CloseCurrentPopup()
-	{
-		ImGuiDebug.Log("igCloseCurrentPopup #1");
-		ImGuiNative.igCloseCurrentPopup();
-	}
-
-	public static void ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
-	{
-		byte restore_focus_to_window_under_popup2 = MarshalUtils.bool_to_byte(restore_focus_to_window_under_popup);
-		ImGuiDebug.Log("igClosePopupToLevel #1");
-		ImGuiNative.igClosePopupToLevel(remaining, restore_focus_to_window_under_popup2);
-	}
-
-	public static void ClosePopupsExceptModals()
-	{
-		ImGuiDebug.Log("igClosePopupsExceptModals #1");
-		ImGuiNative.igClosePopupsExceptModals();
-	}
-
-	public unsafe static void ClosePopupsOverWindow(ImGuiWindowPtr ref_window, bool restore_focus_to_window_under_popup)
-	{
-		byte restore_focus_to_window_under_popup2 = MarshalUtils.bool_to_byte(restore_focus_to_window_under_popup);
-		ImGuiDebug.Log("igClosePopupsOverWindow #1");
-		ImGuiNative.igClosePopupsOverWindow(ref_window, restore_focus_to_window_under_popup2);
-	}
-
-	public static bool CollapseButton(uint id, Vector2 pos)
-	{
-		ImGuiDebug.Log("igCollapseButton #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igCollapseButton(id, pos));
-	}
-
-	public unsafe static bool CollapsingHeader(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igCollapsingHeader_TreeNodeFlags #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igCollapsingHeader_TreeNodeFlags(ptr, ImGuiTreeNodeFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CollapsingHeader(string label, ImGuiTreeNodeFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igCollapsingHeader_TreeNodeFlags #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igCollapsingHeader_TreeNodeFlags(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CollapsingHeader(string label, ref bool p_visible)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_visible);
-		byte* p_visible2 = &b;
-		ImGuiDebug.Log("igCollapsingHeader_BoolPtr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igCollapsingHeader_BoolPtr(ptr, p_visible2, ImGuiTreeNodeFlags.None));
-		p_visible = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool CollapsingHeader(string label, ref bool p_visible, ImGuiTreeNodeFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_visible);
-		byte* p_visible2 = &b;
-		ImGuiDebug.Log("igCollapsingHeader_BoolPtr #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igCollapsingHeader_BoolPtr(ptr, p_visible2, flags));
-		p_visible = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorButton(string desc_id, Vector4 col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (desc_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(desc_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(desc_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igColorButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igColorButton(ptr, col, ImGuiColorEditFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorButton(string desc_id, Vector4 col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (desc_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(desc_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(desc_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igColorButton #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igColorButton(ptr, col, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorButton(string desc_id, Vector4 col, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (desc_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(desc_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(desc_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igColorButton #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igColorButton(ptr, col, ImGuiColorEditFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorButton(string desc_id, Vector4 col, ImGuiColorEditFlags flags, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (desc_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(desc_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(desc_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igColorButton #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igColorButton(ptr, col, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static uint ColorConvertFloat4ToU32(Vector4 @in)
-	{
-		ImGuiDebug.Log("igColorConvertFloat4ToU32 #1");
-		return ImGuiNative.igColorConvertFloat4ToU32(@in);
-	}
-
-	public unsafe static void ColorConvertHSVtoRGB(float h, float s, float v, out float out_r, out float out_g, out float out_b)
-	{
-		fixed (float* out_r2 = &out_r)
-		{
-			fixed (float* out_g2 = &out_g)
-			{
-				fixed (float* out_b2 = &out_b)
-				{
-					ImGuiDebug.Log("igColorConvertHSVtoRGB #1");
-					ImGuiNative.igColorConvertHSVtoRGB(h, s, v, out_r2, out_g2, out_b2);
-				}
-			}
-		}
-	}
-
-	public unsafe static void ColorConvertRGBtoHSV(float r, float g, float b, out float out_h, out float out_s, out float out_v)
-	{
-		fixed (float* out_h2 = &out_h)
-		{
-			fixed (float* out_s2 = &out_s)
-			{
-				fixed (float* out_v2 = &out_v)
-				{
-					ImGuiDebug.Log("igColorConvertRGBtoHSV #1");
-					ImGuiNative.igColorConvertRGBtoHSV(r, g, b, out_h2, out_s2, out_v2);
-				}
-			}
-		}
-	}
-
-	public unsafe static Vector4 ColorConvertU32ToFloat4(uint @in)
-	{
-		ImGuiDebug.Log("igColorConvertU32ToFloat4 #1");
-		Vector4 result = default(Vector4);
-		ImGuiNative.igColorConvertU32ToFloat4(&result, @in);
-		return result;
-	}
-
-	public unsafe static bool ColorEdit3(string label, ref Vector3 col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorEdit3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorEdit3(ptr, col2, ImGuiColorEditFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorEdit3(string label, ref Vector3 col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorEdit3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorEdit3(ptr, col2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorEdit4(string label, ref Vector4 col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorEdit4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorEdit4(ptr, col2, ImGuiColorEditFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorEdit4(string label, ref Vector4 col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorEdit4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorEdit4(ptr, col2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void ColorEditOptionsPopup(ref float[] col, ImGuiColorEditFlags flags)
-	{
-		fixed (float* col2 = col)
-		{
-			ImGuiDebug.Log("igColorEditOptionsPopup #1");
-			ImGuiNative.igColorEditOptionsPopup(col2, flags);
-		}
-	}
-
-	public unsafe static bool ColorPicker3(string label, ref Vector3 col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorPicker3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker3(ptr, col2, ImGuiColorEditFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorPicker3(string label, ref Vector3 col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorPicker3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker3(ptr, col2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorPicker4(string label, ref Vector4 col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorPicker4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker4(ptr, col2, ImGuiColorEditFlags.None, null));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorPicker4(string label, ref Vector4 col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			ImGuiDebug.Log("igColorPicker4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker4(ptr, col2, flags, null));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorPicker4(string label, ref Vector4 col, ref float[] ref_col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			fixed (float* ref_col2 = ref_col)
-			{
-				ImGuiDebug.Log("igColorPicker4 #3");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker4(ptr, col2, ImGuiColorEditFlags.None, ref_col2));
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ColorPicker4(string label, ref Vector4 col, ImGuiColorEditFlags flags, ref float[] ref_col)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* col2 = &col)
-		{
-			fixed (float* ref_col2 = ref_col)
-			{
-				ImGuiDebug.Log("igColorPicker4 #4");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igColorPicker4(ptr, col2, flags, ref_col2));
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void ColorPickerOptionsPopup(ref float[] ref_col, ImGuiColorEditFlags flags)
-	{
-		fixed (float* ref_col2 = ref_col)
-		{
-			ImGuiDebug.Log("igColorPickerOptionsPopup #1");
-			ImGuiNative.igColorPickerOptionsPopup(ref_col2, flags);
-		}
-	}
-
-	public unsafe static void ColorTooltip(string text, ref float[] col, ImGuiColorEditFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* col2 = col)
-		{
-			ImGuiDebug.Log("igColorTooltip #1");
-			ImGuiNative.igColorTooltip(ptr, col2, flags);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Columns()
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igColumns #1");
-		ImGuiNative.igColumns(1, null, border);
-	}
-
-	public unsafe static void Columns(int count)
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igColumns #2");
-		ImGuiNative.igColumns(count, null, border);
-	}
-
-	public unsafe static void Columns(string id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igColumns #3");
-		ImGuiNative.igColumns(1, ptr, border);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Columns(bool border)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igColumns #4");
-		ImGuiNative.igColumns(1, null, border2);
-	}
-
-	public unsafe static void Columns(int count, string id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igColumns #5");
-		ImGuiNative.igColumns(count, ptr, border);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Columns(int count, bool border)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igColumns #6");
-		ImGuiNative.igColumns(count, null, border2);
-	}
-
-	public unsafe static void Columns(string id, bool border)
-	{
-		int num = 0;
-		byte* ptr;
-		if (id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igColumns #7");
-		ImGuiNative.igColumns(1, ptr, border2);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Columns(int count, string id, bool border)
-	{
-		int num = 0;
-		byte* ptr;
-		if (id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(id, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igColumns #8");
-		ImGuiNative.igColumns(count, ptr, border2);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, string[] items, int items_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int* ptr2 = stackalloc int[items.Length];
-			int num2 = 0;
-			for (int i = 0; i < items.Length; i++)
-			{
-				string s = items[i];
-				ptr2[i] = Encoding.UTF8.GetByteCount(s);
-				num2 += ptr2[i] + 1;
-			}
-			byte* ptr3 = stackalloc byte[(int)(uint)num2];
-			int num3 = 0;
-			for (int j = 0; j < items.Length; j++)
-			{
-				string text = items[j];
-				fixed (char* chars = text)
-				{
-					num3 += Encoding.UTF8.GetBytes(chars, text.Length, ptr3 + num3, ptr2[j]);
-					ptr3[num3] = 0;
-					num3++;
-				}
-			}
-			byte** ptr4 = stackalloc byte*[items.Length];
-			num3 = 0;
-			for (int k = 0; k < items.Length; k++)
-			{
-				ptr4[k] = ptr3 + num3;
-				num3 += ptr2[k] + 1;
-			}
-			ImGuiDebug.Log("igCombo_Str_arr #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_Str_arr(ptr, current_item2, ptr4, items_count, -1));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, string[] items, int items_count, int popup_max_height_in_items)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int* ptr2 = stackalloc int[items.Length];
-			int num2 = 0;
-			for (int i = 0; i < items.Length; i++)
-			{
-				string s = items[i];
-				ptr2[i] = Encoding.UTF8.GetByteCount(s);
-				num2 += ptr2[i] + 1;
-			}
-			byte* ptr3 = stackalloc byte[(int)(uint)num2];
-			int num3 = 0;
-			for (int j = 0; j < items.Length; j++)
-			{
-				string text = items[j];
-				fixed (char* chars = text)
-				{
-					num3 += Encoding.UTF8.GetBytes(chars, text.Length, ptr3 + num3, ptr2[j]);
-					ptr3[num3] = 0;
-					num3++;
-				}
-			}
-			byte** ptr4 = stackalloc byte*[items.Length];
-			num3 = 0;
-			for (int k = 0; k < items.Length; k++)
-			{
-				ptr4[k] = ptr3 + num3;
-				num3 += ptr2[k] + 1;
-			}
-			ImGuiDebug.Log("igCombo_Str_arr #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_Str_arr(ptr, current_item2, ptr4, items_count, popup_max_height_in_items));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, string items_separated_by_zeros)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (items_separated_by_zeros == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(items_separated_by_zeros);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(items_separated_by_zeros, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igCombo_Str #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_Str(ptr, current_item2, ptr2, -1));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, string items_separated_by_zeros, int popup_max_height_in_items)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (items_separated_by_zeros == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(items_separated_by_zeros);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(items_separated_by_zeros, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igCombo_Str #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_Str(ptr, current_item2, ptr2, popup_max_height_in_items));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, IntPtr items_getter, IntPtr data, int items_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			ImGuiDebug.Log("igCombo_FnBoolPtr #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_FnBoolPtr(ptr, current_item2, items_getter, data, items_count, -1));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Combo(string label, ref int current_item, IntPtr items_getter, IntPtr data, int items_count, int popup_max_height_in_items)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			ImGuiDebug.Log("igCombo_FnBoolPtr #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igCombo_FnBoolPtr(ptr, current_item2, items_getter, data, items_count, popup_max_height_in_items));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static IntPtr CreateContext()
-	{
-		ImGuiDebug.Log("igCreateContext #1");
-		return ImGuiNative.igCreateContext(null);
-	}
-
-	public unsafe static IntPtr CreateContext(ImFontAtlasPtr shared_font_atlas)
-	{
-		ImGuiDebug.Log("igCreateContext #2");
-		return ImGuiNative.igCreateContext(shared_font_atlas);
-	}
-
-	public unsafe static IntPtr CreateNewWindowSettings(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igCreateNewWindowSettings #1");
-		IntPtr result = ImGuiNative.igCreateNewWindowSettings(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DataTypeApplyFromText(string buf, ImGuiDataType data_type, IntPtr p_data, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (buf == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(buf);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(buf, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDataTypeApplyFromText #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDataTypeApplyFromText(ptr, data_type, p_data, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void DataTypeApplyOp(ImGuiDataType data_type, int op, IntPtr output, IntPtr arg_1, IntPtr arg_2)
-	{
-		ImGuiDebug.Log("igDataTypeApplyOp #1");
-		ImGuiNative.igDataTypeApplyOp(data_type, op, output, arg_1, arg_2);
-	}
-
-	public static bool DataTypeClamp(ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max)
-	{
-		ImGuiDebug.Log("igDataTypeClamp #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igDataTypeClamp(data_type, p_data, p_min, p_max));
-	}
-
-	public static int DataTypeCompare(ImGuiDataType data_type, IntPtr arg_1, IntPtr arg_2)
-	{
-		ImGuiDebug.Log("igDataTypeCompare #1");
-		return ImGuiNative.igDataTypeCompare(data_type, arg_1, arg_2);
-	}
-
-	public unsafe static int DataTypeFormatString(ref byte buf, int buf_size, ImGuiDataType data_type, IntPtr p_data, string format)
-	{
-		int result;
-		fixed (byte* buf2 = &buf)
-		{
-			int num = 0;
-			byte* ptr;
-			if (format == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(format);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(format, ptr, num);
-				ptr[utf] = 0;
-			}
-			ImGuiDebug.Log("igDataTypeFormatString #1");
-			result = ImGuiNative.igDataTypeFormatString(buf2, buf_size, data_type, p_data, ptr);
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiDataTypeInfoPtr DataTypeGetInfo(ImGuiDataType data_type)
-	{
-		ImGuiDebug.Log("igDataTypeGetInfo #1");
-		ImGuiDataTypeInfo* nativePtr = ImGuiNative.igDataTypeGetInfo(data_type);
-		return new ImGuiDataTypeInfoPtr(nativePtr);
-	}
-
-	public unsafe static bool DebugCheckVersionAndDataLayout(string version_str, uint sz_io, uint sz_style, uint sz_vec2, uint sz_vec4, uint sz_drawvert, uint sz_drawidx)
-	{
-		int num = 0;
-		byte* ptr;
-		if (version_str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(version_str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(version_str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugCheckVersionAndDataLayout #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDebugCheckVersionAndDataLayout(ptr, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void DebugDrawItemRect()
-	{
-		ImGuiDebug.Log("igDebugDrawItemRect #1");
-		ImGuiNative.igDebugDrawItemRect(4278190335u);
-	}
-
-	public static void DebugDrawItemRect(uint col)
-	{
-		ImGuiDebug.Log("igDebugDrawItemRect #2");
-		ImGuiNative.igDebugDrawItemRect(col);
-	}
-
-	public static void DebugHookIdInfo(uint id, ImGuiDataType data_type, IntPtr data_id, IntPtr data_id_end)
-	{
-		ImGuiDebug.Log("igDebugHookIdInfo #1");
-		ImGuiNative.igDebugHookIdInfo(id, data_type, data_id, data_id_end);
-	}
-
-	public unsafe static void DebugLog(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugLog #1");
-		ImGuiNative.igDebugLog(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugLogV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugLogV #1");
-		ImGuiNative.igDebugLogV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugNodeColumns(ImGuiOldColumnsPtr columns)
-	{
-		ImGuiDebug.Log("igDebugNodeColumns #1");
-		ImGuiNative.igDebugNodeColumns(columns);
-	}
-
-	public unsafe static void DebugNodeDrawList(ImGuiWindowPtr window, ImDrawListPtr draw_list, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugNodeDrawList #1");
-		ImGuiNative.igDebugNodeDrawList(window, draw_list, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugNodeFont(ImFontPtr font)
-	{
-		ImGuiDebug.Log("igDebugNodeFont #1");
-		ImGuiNative.igDebugNodeFont(font);
-	}
-
-	public unsafe static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph)
-	{
-		ImGuiDebug.Log("igDebugNodeFontGlyph #1");
-		ImGuiNative.igDebugNodeFontGlyph(font, glyph);
-	}
-
-	public static void DebugNodeInputTextState(IntPtr state)
-	{
-		ImGuiDebug.Log("igDebugNodeInputTextState #1");
-		ImGuiNative.igDebugNodeInputTextState(state);
-	}
-
-	public unsafe static void DebugNodeStorage(ImGuiStoragePtr storage, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugNodeStorage #1");
-		ImGuiNative.igDebugNodeStorage(storage, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugNodeTabBar(ImGuiTabBarPtr tab_bar, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugNodeTabBar #1");
-		ImGuiNative.igDebugNodeTabBar(tab_bar, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugNodeTable(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igDebugNodeTable #1");
-		ImGuiNative.igDebugNodeTable(table);
-	}
-
-	public unsafe static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings)
-	{
-		ImGuiDebug.Log("igDebugNodeTableSettings #1");
-		ImGuiNative.igDebugNodeTableSettings(settings);
-	}
-
-	public unsafe static void DebugNodeViewport(ImGuiViewportPPtr viewport)
-	{
-		ImGuiDebug.Log("igDebugNodeViewport #1");
-		ImGuiNative.igDebugNodeViewport(viewport);
-	}
-
-	public unsafe static void DebugNodeWindow(ImGuiWindowPtr window, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugNodeWindow #1");
-		ImGuiNative.igDebugNodeWindow(window, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void DebugNodeWindowSettings(IntPtr settings)
-	{
-		ImGuiDebug.Log("igDebugNodeWindowSettings #1");
-		ImGuiNative.igDebugNodeWindowSettings(settings);
-	}
-
-	public unsafe static void DebugNodeWindowsList(ImVector windows, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugNodeWindowsList #1");
-		ImGuiNative.igDebugNodeWindowsList(windows, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windows_size, ImGuiWindowPtr parent_in_begin_stack)
-	{
-		fixed (ImGuiWindow** windows2 = &windows)
-		{
-			ImGuiDebug.Log("igDebugNodeWindowsListByBeginStackParent #1");
-			ImGuiNative.igDebugNodeWindowsListByBeginStackParent(windows2, windows_size, parent_in_begin_stack);
-		}
-	}
-
-	public unsafe static void DebugRenderViewportThumbnail(ImDrawListPtr draw_list, ImGuiViewportPPtr viewport, Rect bb)
-	{
-		ImGuiDebug.Log("igDebugRenderViewportThumbnail #1");
-		ImGuiNative.igDebugRenderViewportThumbnail(draw_list, viewport, bb);
-	}
-
-	public static void DebugStartItemPicker()
-	{
-		ImGuiDebug.Log("igDebugStartItemPicker #1");
-		ImGuiNative.igDebugStartItemPicker();
-	}
-
-	public unsafe static void DebugTextEncoding(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDebugTextEncoding #1");
-		ImGuiNative.igDebugTextEncoding(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void DestroyContext()
-	{
-		ImGuiDebug.Log("igDestroyContext #1");
-		ImGuiNative.igDestroyContext(IntPtr.Zero);
-	}
-
-	public static void DestroyContext(IntPtr ctx)
-	{
-		ImGuiDebug.Log("igDestroyContext #2");
-		ImGuiNative.igDestroyContext(ctx);
-	}
-
-	public unsafe static bool DragBehavior(uint id, ImGuiDataType data_type, IntPtr p_v, float v_speed, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragBehavior #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragBehavior(id, data_type, p_v, v_speed, p_min, p_max, ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat2 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat2(string label, ref Vector2 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat2 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat2(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat3 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat3(string label, ref Vector3 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat3 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat3(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, 1f, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, 0f, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, 1f, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, 0f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragFloat4 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloat4(string label, ref Vector4 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragFloat4 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloat4(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #1");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #2");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #3");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #4");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #5");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #6");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #7");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #8");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #9");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #10");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #11");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #12");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #13");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #14");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #15");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, 1f, 0f, 0f, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #16");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%.3f");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragFloatRange2 #17");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #18");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #19");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #20");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, 0f, 0f, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #21");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #22");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #23");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0f, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_current_min2 = &v_current_min)
-		{
-			fixed (float* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragFloatRange2 #24");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragFloatRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #17");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #18");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #19");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #20");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt #21");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #22");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #23");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt #24");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #17");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #18");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #19");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #20");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt2 #21");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #22");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #23");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt2 #24");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt2(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #17");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #18");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #19");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #20");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt3 #21");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #22");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #23");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt3 #24");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt3(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, 0, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, 0, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, 0, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #17");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #18");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #19");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #20");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igDragInt4 #21");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #22");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, 0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #23");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, 1f, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igDragInt4 #24");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igDragInt4(ptr, v2, v_speed, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #1");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #2");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #3");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #4");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #5");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #6");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #7");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #8");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #9");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #10");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #11");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #12");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #13");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #14");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #15");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #16");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #17");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #18");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #19");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #20");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #21");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #22");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #23");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, 0, 0, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #24");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, ImGuiSliderFlags.None));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				num2 = MarshalUtils.GetByteCount("%d");
-				byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-				ptr2[utf2] = 0;
-				ImGuiDebug.Log("igDragIntRange2 #25");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #26");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #27");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #28");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, 0, 0, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #29");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #30");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #31");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, 0, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #32");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, ptr3, ImGuiSliderFlags.None));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #33");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, null, flags));
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #34");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, 0, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #35");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, 1f, v_min, v_max, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v_current_min2 = &v_current_min)
-		{
-			fixed (int* v_current_max2 = &v_current_max)
-			{
-				int num2 = 0;
-				byte* ptr2;
-				if (format == null)
-				{
-					ptr2 = null;
-				}
-				else
-				{
-					num2 = MarshalUtils.GetByteCount(format);
-					ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-					int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-					ptr2[utf2] = 0;
-				}
-				int num3 = 0;
-				byte* ptr3;
-				if (format_max == null)
-				{
-					ptr3 = null;
-				}
-				else
-				{
-					num3 = MarshalUtils.GetByteCount(format_max);
-					ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-					int utf3 = MarshalUtils.GetUtf8(format_max, ptr3, num3);
-					ptr3[utf3] = 0;
-				}
-				ImGuiDebug.Log("igDragIntRange2 #36");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igDragIntRange2(ptr, v_current_min2, v_current_max2, v_speed, v_min, v_max, ptr2, ptr3, flags));
-				if (num3 > 2048)
-				{
-					MarshalUtils.Free(ptr3);
-				}
-				if (num2 > 2048)
-				{
-					MarshalUtils.Free(ptr2);
-				}
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, IntPtr.Zero, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, IntPtr.Zero, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #7");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #8");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #9");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #10");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #11");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #12");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #13");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #14");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #15");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #16");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #17");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #18");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #19");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #20");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #21");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #22");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #23");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, 1f, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalar #24");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalar(ptr, data_type, p_data, v_speed, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, IntPtr.Zero, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, IntPtr.Zero, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, IntPtr.Zero, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #7");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #8");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #9");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #10");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #11");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #12");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #13");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #14");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, IntPtr.Zero, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #15");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #16");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #17");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #18");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #19");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #20");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #21");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #22");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #23");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, 1f, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igDragScalarN #24");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igDragScalarN(ptr, data_type, p_data, components, v_speed, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void Dummy(Vector2 size)
-	{
-		ImGuiDebug.Log("igDummy #1");
-		ImGuiNative.igDummy(size);
-	}
-
-	public static void End()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEnd #1");
-		ImGuiNative.igEnd();
-	}
-
-	public static void EndChild()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndChild #1");
-		ImGuiNative.igEndChild();
-	}
-
-	public static void EndChildFrame()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndChildFrame #1");
-		ImGuiNative.igEndChildFrame();
-	}
-
-	public static void EndColumns()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndColumns #1");
-		ImGuiNative.igEndColumns();
-	}
-
-	public static void EndCombo()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndCombo #1");
-		ImGuiNative.igEndCombo();
-	}
-
-	public static void EndComboPreview()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndComboPreview #1");
-		ImGuiNative.igEndComboPreview();
-	}
-
-	public static void EndDisabled()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndDisabled #1");
-		ImGuiNative.igEndDisabled();
-	}
-
-	public static void EndDragDropSource()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndDragDropSource #1");
-		ImGuiNative.igEndDragDropSource();
-	}
-
-	public static void EndDragDropTarget()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndDragDropTarget #1");
-		ImGuiNative.igEndDragDropTarget();
-	}
-
-	public static void EndFrame()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndFrame #1");
-		ImGuiNative.igEndFrame();
-	}
-
-	public static void EndGroup()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndGroup #1");
-		ImGuiNative.igEndGroup();
-	}
-
-	public static void EndListBox()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndListBox #1");
-		ImGuiNative.igEndListBox();
-	}
-
-	public static void EndMainMenuBar()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndMainMenuBar #1");
-		ImGuiNative.igEndMainMenuBar();
-	}
-
-	public static void EndMenu()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndMenu #1");
-		ImGuiNative.igEndMenu();
-	}
-
-	public static void EndMenuBar()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndMenuBar #1");
-		ImGuiNative.igEndMenuBar();
-	}
-
-	public static void EndPopup()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndPopup #1");
-		ImGuiNative.igEndPopup();
-	}
-
-	public static void EndTabBar()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndTabBar #1");
-		ImGuiNative.igEndTabBar();
-	}
-
-	public static void EndTabItem()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndTabItem #1");
-		ImGuiNative.igEndTabItem();
-	}
-
-	public static void EndTable()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndTable #1");
-		ImGuiNative.igEndTable();
-	}
-
-	public static void EndTooltip()
-	{
-		if (ImGuiDebug.LogIndent > 0)
-		{
-			ImGuiDebug.LogIndent -= 4;
-			ImGuiDebug.Log("}");
-		}
-		ImGuiDebug.Log("igEndTooltip #1");
-		ImGuiNative.igEndTooltip();
-	}
-
-	public unsafe static Vector2 FindBestWindowPosForPopup(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igFindBestWindowPosForPopup #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igFindBestWindowPosForPopup(&result, window);
-		return result;
-	}
-
-	public unsafe static Vector2 FindBestWindowPosForPopupEx(Vector2 ref_pos, Vector2 size, ref ImGuiDir last_dir, Rect r_outer, Rect r_avoid, ImGuiPopupPositionPolicy policy)
-	{
-		Vector2 result = default(Vector2);
-		fixed (ImGuiDir* last_dir2 = &last_dir)
-		{
-			ImGuiDebug.Log("igFindBestWindowPosForPopupEx #1");
-			ImGuiNative.igFindBestWindowPosForPopupEx(&result, ref_pos, size, last_dir2, r_outer, r_avoid, policy);
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiWindowPtr FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igFindBottomMostVisibleWindowWithinBeginStack #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igFindBottomMostVisibleWindowWithinBeginStack(window);
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiOldColumnsPtr FindOrCreateColumns(ImGuiWindowPtr window, uint id)
-	{
-		ImGuiDebug.Log("igFindOrCreateColumns #1");
-		ImGuiOldColumns* nativePtr = ImGuiNative.igFindOrCreateColumns(window, id);
-		return new ImGuiOldColumnsPtr(nativePtr);
-	}
-
-	public unsafe static IntPtr FindOrCreateWindowSettings(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igFindOrCreateWindowSettings #1");
-		IntPtr result = ImGuiNative.igFindOrCreateWindowSettings(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static string FindRenderedTextEnd(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igFindRenderedTextEnd #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igFindRenderedTextEnd(ptr, null));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static string FindRenderedTextEnd(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igFindRenderedTextEnd #2");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igFindRenderedTextEnd(ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiSettingsHandlerPtr FindSettingsHandler(string type_name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type_name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type_name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type_name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igFindSettingsHandler #1");
-		ImGuiSettingsHandler* nativePtr = ImGuiNative.igFindSettingsHandler(ptr);
-		ImGuiSettingsHandlerPtr result = new ImGuiSettingsHandlerPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiWindowPtr FindWindowByID(uint id)
-	{
-		ImGuiDebug.Log("igFindWindowByID #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igFindWindowByID(id);
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiWindowPtr FindWindowByName(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igFindWindowByName #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igFindWindowByName(ptr);
-		ImGuiWindowPtr result = new ImGuiWindowPtr(nativePtr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int FindWindowDisplayIndex(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igFindWindowDisplayIndex #1");
-		return ImGuiNative.igFindWindowDisplayIndex(window);
-	}
-
-	public static IntPtr FindWindowSettings(uint id)
-	{
-		ImGuiDebug.Log("igFindWindowSettings #1");
-		return ImGuiNative.igFindWindowSettings(id);
-	}
-
-	public unsafe static void FocusTopMostWindowUnderOne(ImGuiWindowPtr under_this_window, ImGuiWindowPtr ignore_window)
-	{
-		ImGuiDebug.Log("igFocusTopMostWindowUnderOne #1");
-		ImGuiNative.igFocusTopMostWindowUnderOne(under_this_window, ignore_window);
-	}
-
-	public unsafe static void FocusWindow(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igFocusWindow #1");
-		ImGuiNative.igFocusWindow(window);
-	}
-
-	public unsafe static void GcAwakeTransientWindowBuffers(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igGcAwakeTransientWindowBuffers #1");
-		ImGuiNative.igGcAwakeTransientWindowBuffers(window);
-	}
-
-	public static void GcCompactTransientMiscBuffers()
-	{
-		ImGuiDebug.Log("igGcCompactTransientMiscBuffers #1");
-		ImGuiNative.igGcCompactTransientMiscBuffers();
-	}
-
-	public unsafe static void GcCompactTransientWindowBuffers(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igGcCompactTransientWindowBuffers #1");
-		ImGuiNative.igGcCompactTransientWindowBuffers(window);
-	}
-
-	public static uint GetActiveID()
-	{
-		ImGuiDebug.Log("igGetActiveID #1");
-		return ImGuiNative.igGetActiveID();
-	}
-
-	public unsafe static ImDrawListPtr GetBackgroundDrawList()
-	{
-		ImGuiDebug.Log("igGetBackgroundDrawList_Nil #1");
-		ImDrawList* nativePtr = ImGuiNative.igGetBackgroundDrawList_Nil();
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe static ImDrawListPtr GetBackgroundDrawList(ImGuiViewportPtr viewport)
-	{
-		ImGuiDebug.Log("igGetBackgroundDrawList_ViewportPtr #2");
-		ImDrawList* nativePtr = ImGuiNative.igGetBackgroundDrawList_ViewportPtr(viewport);
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe static string GetClipboardText()
-	{
-		ImGuiDebug.Log("igGetClipboardText #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igGetClipboardText());
-	}
-
-	public static uint GetColorU32(ImGuiCol idx)
-	{
-		ImGuiDebug.Log("igGetColorU32_Col #1");
-		return ImGuiNative.igGetColorU32_Col(idx, 1f);
-	}
-
-	public static uint GetColorU32(ImGuiCol idx, float alpha_mul)
-	{
-		ImGuiDebug.Log("igGetColorU32_Col #2");
-		return ImGuiNative.igGetColorU32_Col(idx, alpha_mul);
-	}
-
-	public static uint GetColorU32(Vector4 col)
-	{
-		ImGuiDebug.Log("igGetColorU32_Vec4 #2");
-		return ImGuiNative.igGetColorU32_Vec4(col);
-	}
-
-	public static uint GetColorU32(uint col)
-	{
-		ImGuiDebug.Log("igGetColorU32_U32 #3");
-		return ImGuiNative.igGetColorU32_U32(col);
-	}
-
-	public static int GetColumnIndex()
-	{
-		ImGuiDebug.Log("igGetColumnIndex #1");
-		return ImGuiNative.igGetColumnIndex();
-	}
-
-	public unsafe static float GetColumnNormFromOffset(ImGuiOldColumnsPtr columns, float offset)
-	{
-		ImGuiDebug.Log("igGetColumnNormFromOffset #1");
-		return ImGuiNative.igGetColumnNormFromOffset(columns, offset);
-	}
-
-	public static float GetColumnOffset()
-	{
-		ImGuiDebug.Log("igGetColumnOffset #1");
-		return ImGuiNative.igGetColumnOffset(-1);
-	}
-
-	public static float GetColumnOffset(int column_index)
-	{
-		ImGuiDebug.Log("igGetColumnOffset #2");
-		return ImGuiNative.igGetColumnOffset(column_index);
-	}
-
-	public unsafe static float GetColumnOffsetFromNorm(ImGuiOldColumnsPtr columns, float offset_norm)
-	{
-		ImGuiDebug.Log("igGetColumnOffsetFromNorm #1");
-		return ImGuiNative.igGetColumnOffsetFromNorm(columns, offset_norm);
-	}
-
-	public static float GetColumnWidth()
-	{
-		ImGuiDebug.Log("igGetColumnWidth #1");
-		return ImGuiNative.igGetColumnWidth(-1);
-	}
-
-	public static float GetColumnWidth(int column_index)
-	{
-		ImGuiDebug.Log("igGetColumnWidth #2");
-		return ImGuiNative.igGetColumnWidth(column_index);
-	}
-
-	public static int GetColumnsCount()
-	{
-		ImGuiDebug.Log("igGetColumnsCount #1");
-		return ImGuiNative.igGetColumnsCount();
-	}
-
-	public unsafe static uint GetColumnsID(string str_id, int count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igGetColumnsID #1");
-		uint result = ImGuiNative.igGetColumnsID(ptr, count);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 GetContentRegionAvail()
-	{
-		ImGuiDebug.Log("igGetContentRegionAvail #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetContentRegionAvail(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetContentRegionMax()
-	{
-		ImGuiDebug.Log("igGetContentRegionMax #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetContentRegionMax(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetContentRegionMaxAbs()
-	{
-		ImGuiDebug.Log("igGetContentRegionMaxAbs #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetContentRegionMaxAbs(&result);
-		return result;
-	}
-
-	public static IntPtr GetCurrentContext()
-	{
-		ImGuiDebug.Log("igGetCurrentContext #1");
-		return ImGuiNative.igGetCurrentContext();
-	}
-
-	public unsafe static ImGuiTablePtr GetCurrentTable()
-	{
-		ImGuiDebug.Log("igGetCurrentTable #1");
-		ImGuiTable* nativePtr = ImGuiNative.igGetCurrentTable();
-		return new ImGuiTablePtr(nativePtr);
-	}
-
-	public unsafe static ImGuiWindowPtr GetCurrentWindow()
-	{
-		ImGuiDebug.Log("igGetCurrentWindow #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igGetCurrentWindow();
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiWindowPtr GetCurrentWindowRead()
-	{
-		ImGuiDebug.Log("igGetCurrentWindowRead #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igGetCurrentWindowRead();
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static Vector2 GetCursorPos()
-	{
-		ImGuiDebug.Log("igGetCursorPos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetCursorPos(&result);
-		return result;
-	}
-
-	public static float GetCursorPosX()
-	{
-		ImGuiDebug.Log("igGetCursorPosX #1");
-		return ImGuiNative.igGetCursorPosX();
-	}
-
-	public static float GetCursorPosY()
-	{
-		ImGuiDebug.Log("igGetCursorPosY #1");
-		return ImGuiNative.igGetCursorPosY();
-	}
-
-	public unsafe static Vector2 GetCursorScreenPos()
-	{
-		ImGuiDebug.Log("igGetCursorScreenPos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetCursorScreenPos(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetCursorStartPos()
-	{
-		ImGuiDebug.Log("igGetCursorStartPos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetCursorStartPos(&result);
-		return result;
-	}
-
-	public unsafe static ImFontPtr GetDefaultFont()
-	{
-		ImGuiDebug.Log("igGetDefaultFont #1");
-		ImFont* nativePtr = ImGuiNative.igGetDefaultFont();
-		return new ImFontPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiPayloadPtr GetDragDropPayload()
-	{
-		ImGuiDebug.Log("igGetDragDropPayload #1");
-		ImGuiPayload* nativePtr = ImGuiNative.igGetDragDropPayload();
-		return new ImGuiPayloadPtr(nativePtr);
-	}
-
-	public unsafe static ImDrawDataPtr GetDrawData()
-	{
-		ImGuiDebug.Log("igGetDrawData #1");
-		ImDrawData* nativePtr = ImGuiNative.igGetDrawData();
-		return new ImDrawDataPtr(nativePtr);
-	}
-
-	public unsafe static ImDrawListSharedDataPtr GetDrawListSharedData()
-	{
-		ImGuiDebug.Log("igGetDrawListSharedData #1");
-		ImDrawListSharedData* nativePtr = ImGuiNative.igGetDrawListSharedData();
-		return new ImDrawListSharedDataPtr(nativePtr);
-	}
-
-	public static uint GetFocusID()
-	{
-		ImGuiDebug.Log("igGetFocusID #1");
-		return ImGuiNative.igGetFocusID();
-	}
-
-	public static uint GetFocusScope()
-	{
-		ImGuiDebug.Log("igGetFocusScope #1");
-		return ImGuiNative.igGetFocusScope();
-	}
-
-	public static uint GetFocusedFocusScope()
-	{
-		ImGuiDebug.Log("igGetFocusedFocusScope #1");
-		return ImGuiNative.igGetFocusedFocusScope();
-	}
-
-	public unsafe static ImFontPtr GetFont()
-	{
-		ImGuiDebug.Log("igGetFont #1");
-		ImFont* nativePtr = ImGuiNative.igGetFont();
-		return new ImFontPtr(nativePtr);
-	}
-
-	public static float GetFontSize()
-	{
-		ImGuiDebug.Log("igGetFontSize #1");
-		return ImGuiNative.igGetFontSize();
-	}
-
-	public unsafe static Vector2 GetFontTexUvWhitePixel()
-	{
-		ImGuiDebug.Log("igGetFontTexUvWhitePixel #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetFontTexUvWhitePixel(&result);
-		return result;
-	}
-
-	public unsafe static ImDrawListPtr GetForegroundDrawList()
-	{
-		ImGuiDebug.Log("igGetForegroundDrawList_Nil #1");
-		ImDrawList* nativePtr = ImGuiNative.igGetForegroundDrawList_Nil();
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe static ImDrawListPtr GetForegroundDrawList(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igGetForegroundDrawList_WindowPtr #2");
-		ImDrawList* nativePtr = ImGuiNative.igGetForegroundDrawList_WindowPtr(window);
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public unsafe static ImDrawListPtr GetForegroundDrawList(ImGuiViewportPtr viewport)
-	{
-		ImGuiDebug.Log("igGetForegroundDrawList_ViewportPtr #3");
-		ImDrawList* nativePtr = ImGuiNative.igGetForegroundDrawList_ViewportPtr(viewport);
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public static int GetFrameCount()
-	{
-		ImGuiDebug.Log("igGetFrameCount #1");
-		return ImGuiNative.igGetFrameCount();
-	}
-
-	public static float GetFrameHeight()
-	{
-		ImGuiDebug.Log("igGetFrameHeight #1");
-		return ImGuiNative.igGetFrameHeight();
-	}
-
-	public static float GetFrameHeightWithSpacing()
-	{
-		ImGuiDebug.Log("igGetFrameHeightWithSpacing #1");
-		return ImGuiNative.igGetFrameHeightWithSpacing();
-	}
-
-	public static uint GetHoveredID()
-	{
-		ImGuiDebug.Log("igGetHoveredID #1");
-		return ImGuiNative.igGetHoveredID();
-	}
-
-	public unsafe static uint GetID(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igGetID_Str #1");
-		uint result = ImGuiNative.igGetID_Str(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static uint GetID(string str_id_begin, string str_id_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_id_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_id_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_id_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igGetID_StrStr #2");
-		uint result = ImGuiNative.igGetID_StrStr(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static uint GetID(IntPtr ptr_id)
-	{
-		ImGuiDebug.Log("igGetID_Ptr #3");
-		return ImGuiNative.igGetID_Ptr(ptr_id);
-	}
-
-	public unsafe static uint GetIDWithSeed(string str_id_begin, string str_id_end, uint seed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_id_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_id_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_id_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igGetIDWithSeed #1");
-		uint result = ImGuiNative.igGetIDWithSeed(ptr, ptr2, seed);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static ImGuiIOPtr GetIO()
-	{
-		ImGuiDebug.Log("igGetIO #1");
-		ImGuiIO* nativePtr = ImGuiNative.igGetIO();
-		return new ImGuiIOPtr(nativePtr);
-	}
-
-	public static IntPtr GetInputTextState(uint id)
-	{
-		ImGuiDebug.Log("igGetInputTextState #1");
-		return ImGuiNative.igGetInputTextState(id);
-	}
-
-	public static ImGuiItemFlags GetItemFlags()
-	{
-		ImGuiDebug.Log("igGetItemFlags #1");
-		return ImGuiNative.igGetItemFlags();
-	}
-
-	public static uint GetItemID()
-	{
-		ImGuiDebug.Log("igGetItemID #1");
-		return ImGuiNative.igGetItemID();
-	}
-
-	public unsafe static Vector2 GetItemRectMax()
-	{
-		ImGuiDebug.Log("igGetItemRectMax #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetItemRectMax(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetItemRectMin()
-	{
-		ImGuiDebug.Log("igGetItemRectMin #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetItemRectMin(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetItemRectSize()
-	{
-		ImGuiDebug.Log("igGetItemRectSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetItemRectSize(&result);
-		return result;
-	}
-
-	public static ImGuiItemStatusFlags GetItemStatusFlags()
-	{
-		ImGuiDebug.Log("igGetItemStatusFlags #1");
-		return ImGuiNative.igGetItemStatusFlags();
-	}
-
-	public unsafe static ImGuiKeyDataPtr GetKeyData(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igGetKeyData #1");
-		ImGuiKeyData* nativePtr = ImGuiNative.igGetKeyData(key);
-		return new ImGuiKeyDataPtr(nativePtr);
-	}
-
-	public static int GetKeyIndex(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igGetKeyIndex #1");
-		return ImGuiNative.igGetKeyIndex(key);
-	}
-
-	public unsafe static string GetKeyName(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igGetKeyName #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igGetKeyName(key));
-	}
-
-	public static int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
-	{
-		ImGuiDebug.Log("igGetKeyPressedAmount #1");
-		return ImGuiNative.igGetKeyPressedAmount(key, repeat_delay, rate);
-	}
-
-	public unsafe static ImGuiViewportPtr GetMainViewport()
-	{
-		ImGuiDebug.Log("igGetMainViewport #1");
-		ImGuiViewport* nativePtr = ImGuiNative.igGetMainViewport();
-		return new ImGuiViewportPtr(nativePtr);
-	}
-
-	public static ImGuiModFlags GetMergedModFlags()
-	{
-		ImGuiDebug.Log("igGetMergedModFlags #1");
-		return ImGuiNative.igGetMergedModFlags();
-	}
-
-	public static int GetMouseClickedCount(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igGetMouseClickedCount #1");
-		return ImGuiNative.igGetMouseClickedCount(button);
-	}
-
-	public static ImGuiMouseCursor GetMouseCursor()
-	{
-		ImGuiDebug.Log("igGetMouseCursor #1");
-		return ImGuiNative.igGetMouseCursor();
-	}
-
-	public unsafe static Vector2 GetMouseDragDelta()
-	{
-		ImGuiDebug.Log("igGetMouseDragDelta #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMouseDragDelta(&result, ImGuiMouseButton.Left, -1f);
-		return result;
-	}
-
-	public unsafe static Vector2 GetMouseDragDelta(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igGetMouseDragDelta #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMouseDragDelta(&result, button, -1f);
-		return result;
-	}
-
-	public unsafe static Vector2 GetMouseDragDelta(float lock_threshold)
-	{
-		ImGuiDebug.Log("igGetMouseDragDelta #3");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMouseDragDelta(&result, ImGuiMouseButton.Left, lock_threshold);
-		return result;
-	}
-
-	public unsafe static Vector2 GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)
-	{
-		ImGuiDebug.Log("igGetMouseDragDelta #4");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMouseDragDelta(&result, button, lock_threshold);
-		return result;
-	}
-
-	public unsafe static Vector2 GetMousePos()
-	{
-		ImGuiDebug.Log("igGetMousePos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMousePos(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetMousePosOnOpeningCurrentPopup()
-	{
-		ImGuiDebug.Log("igGetMousePosOnOpeningCurrentPopup #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetMousePosOnOpeningCurrentPopup(&result);
-		return result;
-	}
-
-	public static float GetNavInputAmount(ImGuiNavInput n, ImGuiNavReadMode mode)
-	{
-		ImGuiDebug.Log("igGetNavInputAmount #1");
-		return ImGuiNative.igGetNavInputAmount(n, mode);
-	}
-
-	public unsafe static Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode)
-	{
-		ImGuiDebug.Log("igGetNavInputAmount2d #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetNavInputAmount2d(&result, dir_sources, mode, 0f, 0f);
-		return result;
-	}
-
-	public unsafe static Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor)
-	{
-		ImGuiDebug.Log("igGetNavInputAmount2d #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetNavInputAmount2d(&result, dir_sources, mode, slow_factor, 0f);
-		return result;
-	}
-
-	public unsafe static Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor, float fast_factor)
-	{
-		ImGuiDebug.Log("igGetNavInputAmount2d #3");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetNavInputAmount2d(&result, dir_sources, mode, slow_factor, fast_factor);
-		return result;
-	}
-
-	public unsafe static string GetNavInputName(ImGuiNavInput n)
-	{
-		ImGuiDebug.Log("igGetNavInputName #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igGetNavInputName(n));
-	}
-
-	public unsafe static Rect GetPopupAllowedExtentRect(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igGetPopupAllowedExtentRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.igGetPopupAllowedExtentRect(&result, window);
-		return result;
-	}
-
-	public static float GetScrollMaxX()
-	{
-		ImGuiDebug.Log("igGetScrollMaxX #1");
-		return ImGuiNative.igGetScrollMaxX();
-	}
-
-	public static float GetScrollMaxY()
-	{
-		ImGuiDebug.Log("igGetScrollMaxY #1");
-		return ImGuiNative.igGetScrollMaxY();
-	}
-
-	public static float GetScrollX()
-	{
-		ImGuiDebug.Log("igGetScrollX #1");
-		return ImGuiNative.igGetScrollX();
-	}
-
-	public static float GetScrollY()
-	{
-		ImGuiDebug.Log("igGetScrollY #1");
-		return ImGuiNative.igGetScrollY();
-	}
-
-	public unsafe static ImGuiStoragePtr GetStateStorage()
-	{
-		ImGuiDebug.Log("igGetStateStorage #1");
-		ImGuiStorage* nativePtr = ImGuiNative.igGetStateStorage();
-		return new ImGuiStoragePtr(nativePtr);
-	}
-
-	public unsafe static ImGuiStylePtr GetStyle()
-	{
-		ImGuiDebug.Log("igGetStyle #1");
-		ImGuiStyle* nativePtr = ImGuiNative.igGetStyle();
-		return new ImGuiStylePtr(nativePtr);
-	}
-
-	public unsafe static string GetStyleColorName(ImGuiCol idx)
-	{
-		ImGuiDebug.Log("igGetStyleColorName #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igGetStyleColorName(idx));
-	}
-
-	public unsafe static Vector4* GetStyleColorVec4(ImGuiCol idx)
-	{
-		ImGuiDebug.Log("igGetStyleColorVec4 #1");
-		return ImGuiNative.igGetStyleColorVec4(idx);
-	}
-
-	public static float GetTextLineHeight()
-	{
-		ImGuiDebug.Log("igGetTextLineHeight #1");
-		return ImGuiNative.igGetTextLineHeight();
-	}
-
-	public static float GetTextLineHeightWithSpacing()
-	{
-		ImGuiDebug.Log("igGetTextLineHeightWithSpacing #1");
-		return ImGuiNative.igGetTextLineHeightWithSpacing();
-	}
-
-	public static double GetTime()
-	{
-		ImGuiDebug.Log("igGetTime #1");
-		return ImGuiNative.igGetTime();
-	}
-
-	public unsafe static ImGuiWindowPtr GetTopMostAndVisiblePopupModal()
-	{
-		ImGuiDebug.Log("igGetTopMostAndVisiblePopupModal #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igGetTopMostAndVisiblePopupModal();
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiWindowPtr GetTopMostPopupModal()
-	{
-		ImGuiDebug.Log("igGetTopMostPopupModal #1");
-		ImGuiWindow* nativePtr = ImGuiNative.igGetTopMostPopupModal();
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public static float GetTreeNodeToLabelSpacing()
-	{
-		ImGuiDebug.Log("igGetTreeNodeToLabelSpacing #1");
-		return ImGuiNative.igGetTreeNodeToLabelSpacing();
-	}
-
-	public unsafe static string GetVersion()
-	{
-		ImGuiDebug.Log("igGetVersion #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igGetVersion());
-	}
-
-	public unsafe static Vector2 GetWindowContentRegionMax()
-	{
-		ImGuiDebug.Log("igGetWindowContentRegionMax #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetWindowContentRegionMax(&result);
-		return result;
-	}
-
-	public unsafe static Vector2 GetWindowContentRegionMin()
-	{
-		ImGuiDebug.Log("igGetWindowContentRegionMin #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetWindowContentRegionMin(&result);
-		return result;
-	}
-
-	public unsafe static ImDrawListPtr GetWindowDrawList()
-	{
-		ImGuiDebug.Log("igGetWindowDrawList #1");
-		ImDrawList* nativePtr = ImGuiNative.igGetWindowDrawList();
-		return new ImDrawListPtr(nativePtr);
-	}
-
-	public static float GetWindowHeight()
-	{
-		ImGuiDebug.Log("igGetWindowHeight #1");
-		return ImGuiNative.igGetWindowHeight();
-	}
-
-	public unsafe static Vector2 GetWindowPos()
-	{
-		ImGuiDebug.Log("igGetWindowPos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetWindowPos(&result);
-		return result;
-	}
-
-	public unsafe static uint GetWindowResizeBorderID(ImGuiWindowPtr window, ImGuiDir dir)
-	{
-		ImGuiDebug.Log("igGetWindowResizeBorderID #1");
-		return ImGuiNative.igGetWindowResizeBorderID(window, dir);
-	}
-
-	public unsafe static uint GetWindowResizeCornerID(ImGuiWindowPtr window, int n)
-	{
-		ImGuiDebug.Log("igGetWindowResizeCornerID #1");
-		return ImGuiNative.igGetWindowResizeCornerID(window, n);
-	}
-
-	public unsafe static uint GetWindowScrollbarID(ImGuiWindowPtr window, ImGuiAxis axis)
-	{
-		ImGuiDebug.Log("igGetWindowScrollbarID #1");
-		return ImGuiNative.igGetWindowScrollbarID(window, axis);
-	}
-
-	public unsafe static Rect GetWindowScrollbarRect(ImGuiWindowPtr window, ImGuiAxis axis)
-	{
-		ImGuiDebug.Log("igGetWindowScrollbarRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.igGetWindowScrollbarRect(&result, window, axis);
-		return result;
-	}
-
-	public unsafe static Vector2 GetWindowSize()
-	{
-		ImGuiDebug.Log("igGetWindowSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igGetWindowSize(&result);
-		return result;
-	}
-
-	public static float GetWindowWidth()
-	{
-		ImGuiDebug.Log("igGetWindowWidth #1");
-		return ImGuiNative.igGetWindowWidth();
-	}
-
-	public static int ImAbs(int x)
-	{
-		ImGuiDebug.Log("igImAbs_Int #1");
-		return ImGuiNative.igImAbs_Int(x);
-	}
-
-	public static float ImAbs(float x)
-	{
-		ImGuiDebug.Log("igImAbs_Float #2");
-		return ImGuiNative.igImAbs_Float(x);
-	}
-
-	public static double ImAbs(double x)
-	{
-		ImGuiDebug.Log("igImAbs_double #3");
-		return ImGuiNative.igImAbs_double(x);
-	}
-
-	public static uint ImAlphaBlendColors(uint col_a, uint col_b)
-	{
-		ImGuiDebug.Log("igImAlphaBlendColors #1");
-		return ImGuiNative.igImAlphaBlendColors(col_a, col_b);
-	}
-
-	public unsafe static Vector2 ImBezierCubicCalc(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t)
-	{
-		ImGuiDebug.Log("igImBezierCubicCalc #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImBezierCubicCalc(&result, p1, p2, p3, p4, t);
-		return result;
-	}
-
-	public unsafe static Vector2 ImBezierCubicClosestPoint(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int num_segments)
-	{
-		ImGuiDebug.Log("igImBezierCubicClosestPoint #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImBezierCubicClosestPoint(&result, p1, p2, p3, p4, p, num_segments);
-		return result;
-	}
-
-	public unsafe static Vector2 ImBezierCubicClosestPointCasteljau(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tess_tol)
-	{
-		ImGuiDebug.Log("igImBezierCubicClosestPointCasteljau #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImBezierCubicClosestPointCasteljau(&result, p1, p2, p3, p4, p, tess_tol);
-		return result;
-	}
-
-	public unsafe static Vector2 ImBezierQuadraticCalc(Vector2 p1, Vector2 p2, Vector2 p3, float t)
-	{
-		ImGuiDebug.Log("igImBezierQuadraticCalc #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImBezierQuadraticCalc(&result, p1, p2, p3, t);
-		return result;
-	}
-
-	public unsafe static void ImBitArrayClearBit(ref uint arr, int n)
-	{
-		fixed (uint* arr2 = &arr)
-		{
-			ImGuiDebug.Log("igImBitArrayClearBit #1");
-			ImGuiNative.igImBitArrayClearBit(arr2, n);
-		}
-	}
-
-	public unsafe static void ImBitArraySetBit(ref uint arr, int n)
-	{
-		fixed (uint* arr2 = &arr)
-		{
-			ImGuiDebug.Log("igImBitArraySetBit #1");
-			ImGuiNative.igImBitArraySetBit(arr2, n);
-		}
-	}
-
-	public unsafe static void ImBitArraySetBitRange(ref uint arr, int n, int n2)
-	{
-		fixed (uint* arr2 = &arr)
-		{
-			ImGuiDebug.Log("igImBitArraySetBitRange #1");
-			ImGuiNative.igImBitArraySetBitRange(arr2, n, n2);
-		}
-	}
-
-	public unsafe static bool ImBitArrayTestBit(ref uint arr, int n)
-	{
-		bool result;
-		fixed (uint* arr2 = &arr)
-		{
-			ImGuiDebug.Log("igImBitArrayTestBit #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igImBitArrayTestBit(arr2, n));
-		}
-		return result;
-	}
-
-	public static bool ImCharIsBlankA(byte c)
-	{
-		ImGuiDebug.Log("igImCharIsBlankA #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImCharIsBlankA(c));
-	}
-
-	public static bool ImCharIsBlankW(uint c)
-	{
-		ImGuiDebug.Log("igImCharIsBlankW #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImCharIsBlankW(c));
-	}
-
-	public unsafe static Vector2 ImClamp(Vector2 v, Vector2 mn, Vector2 mx)
-	{
-		ImGuiDebug.Log("igImClamp #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImClamp(&result, v, mn, mx);
-		return result;
-	}
-
-	public static float ImDot(Vector2 a, Vector2 b)
-	{
-		ImGuiDebug.Log("igImDot #1");
-		return ImGuiNative.igImDot(a, b);
-	}
-
-	public unsafe static void* ImFileLoadToMemory(string filename, string mode)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (mode == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(mode);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(mode, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImFileLoadToMemory #1");
-		void* result = MarshalUtils.IntPtr_to_pointer(ImGuiNative.igImFileLoadToMemory(ptr, ptr2, null, 0));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void* ImFileLoadToMemory(string filename, string mode, out uint out_file_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (mode == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(mode);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(mode, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		void* result;
-		fixed (uint* out_file_size2 = &out_file_size)
-		{
-			ImGuiDebug.Log("igImFileLoadToMemory #2");
-			result = MarshalUtils.IntPtr_to_pointer(ImGuiNative.igImFileLoadToMemory(ptr, ptr2, out_file_size2, 0));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void* ImFileLoadToMemory(string filename, string mode, int padding_bytes)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (mode == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(mode);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(mode, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImFileLoadToMemory #3");
-		void* result = MarshalUtils.IntPtr_to_pointer(ImGuiNative.igImFileLoadToMemory(ptr, ptr2, null, padding_bytes));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void* ImFileLoadToMemory(string filename, string mode, out uint out_file_size, int padding_bytes)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (mode == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(mode);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(mode, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		void* result;
-		fixed (uint* out_file_size2 = &out_file_size)
-		{
-			ImGuiDebug.Log("igImFileLoadToMemory #4");
-			result = MarshalUtils.IntPtr_to_pointer(ImGuiNative.igImFileLoadToMemory(ptr, ptr2, out_file_size2, padding_bytes));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static float ImFloor(float f)
-	{
-		ImGuiDebug.Log("igImFloor_Float #1");
-		return ImGuiNative.igImFloor_Float(f);
-	}
-
-	public unsafe static Vector2 ImFloor(Vector2 v)
-	{
-		ImGuiDebug.Log("igImFloor_Vec2 #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImFloor_Vec2(&result, v);
-		return result;
-	}
-
-	public static float ImFloorSigned(float f)
-	{
-		ImGuiDebug.Log("igImFloorSigned_Float #1");
-		return ImGuiNative.igImFloorSigned_Float(f);
-	}
-
-	public unsafe static Vector2 ImFloorSigned(Vector2 v)
-	{
-		ImGuiDebug.Log("igImFloorSigned_Vec2 #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImFloorSigned_Vec2(&result, v);
-		return result;
-	}
-
-	public unsafe static void ImFontAtlasBuildFinish(ImFontAtlasPtr atlas)
-	{
-		ImGuiDebug.Log("igImFontAtlasBuildFinish #1");
-		ImGuiNative.igImFontAtlasBuildFinish(atlas);
-	}
-
-	public unsafe static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas)
-	{
-		ImGuiDebug.Log("igImFontAtlasBuildInit #1");
-		ImGuiNative.igImFontAtlasBuildInit(atlas);
-	}
-
-	public unsafe static void ImFontAtlasBuildMultiplyCalcLookupTable(out byte out_table, float in_multiply_factor)
-	{
-		fixed (byte* out_table2 = &out_table)
-		{
-			ImGuiDebug.Log("igImFontAtlasBuildMultiplyCalcLookupTable #1");
-			ImGuiNative.igImFontAtlasBuildMultiplyCalcLookupTable(out_table2, in_multiply_factor);
-		}
-	}
-
-	public unsafe static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, ref byte pixels, int x, int y, int w, int h, int stride)
-	{
-		fixed (byte* table2 = &table)
-		{
-			fixed (byte* pixels2 = &pixels)
-			{
-				ImGuiDebug.Log("igImFontAtlasBuildMultiplyRectAlpha8 #1");
-				ImGuiNative.igImFontAtlasBuildMultiplyRectAlpha8(table2, pixels2, x, y, w, h, stride);
-			}
-		}
-	}
-
-	public unsafe static void ImFontAtlasBuildPackCustomRects(ImFontAtlasPtr atlas, IntPtr stbrp_context_opaque)
-	{
-		ImGuiDebug.Log("igImFontAtlasBuildPackCustomRects #1");
-		ImGuiNative.igImFontAtlasBuildPackCustomRects(atlas, stbrp_context_opaque);
-	}
-
-	public unsafe static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string in_str, byte in_marker_char, uint in_marker_pixel_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (in_str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(in_str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(in_str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImFontAtlasBuildRender32bppRectFromString #1");
-		ImGuiNative.igImFontAtlasBuildRender32bppRectFromString(atlas, x, y, w, h, ptr, in_marker_char, in_marker_pixel_value);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string in_str, byte in_marker_char, byte in_marker_pixel_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (in_str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(in_str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(in_str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImFontAtlasBuildRender8bppRectFromString #1");
-		ImGuiNative.igImFontAtlasBuildRender8bppRectFromString(atlas, x, y, w, h, ptr, in_marker_char, in_marker_pixel_value);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr font_config, float ascent, float descent)
-	{
-		ImGuiDebug.Log("igImFontAtlasBuildSetupFont #1");
-		ImGuiNative.igImFontAtlasBuildSetupFont(atlas, font, font_config, ascent, descent);
-	}
-
-	public unsafe static ImFontBuilderIOPtr ImFontAtlasGetBuilderForStbTruetype()
-	{
-		ImGuiDebug.Log("igImFontAtlasGetBuilderForStbTruetype #1");
-		ImFontBuilderIO* nativePtr = ImGuiNative.igImFontAtlasGetBuilderForStbTruetype();
-		return new ImFontBuilderIOPtr(nativePtr);
-	}
-
-	public unsafe static int ImFormatString(ref byte buf, uint buf_size, string fmt)
-	{
-		int result;
-		fixed (byte* buf2 = &buf)
-		{
-			int num = 0;
-			byte* ptr;
-			if (fmt == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(fmt);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-				ptr[utf] = 0;
-			}
-			ImGuiDebug.Log("igImFormatString #1");
-			result = ImGuiNative.igImFormatString(buf2, buf_size, ptr);
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static void ImFormatStringToTempBuffer(out byte* out_buf, out byte* out_buf_end, string fmt)
-	{
-		fixed (byte** out_buf2 = &out_buf)
-		{
-			fixed (byte** out_buf_end2 = &out_buf_end)
-			{
-				int num = 0;
-				byte* ptr;
-				if (fmt == null)
-				{
-					ptr = null;
-				}
-				else
-				{
-					num = MarshalUtils.GetByteCount(fmt);
-					ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-					int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-					ptr[utf] = 0;
-				}
-				ImGuiDebug.Log("igImFormatStringToTempBuffer #1");
-				ImGuiNative.igImFormatStringToTempBuffer(out_buf2, out_buf_end2, ptr);
-				if (num > 2048)
-				{
-					MarshalUtils.Free(ptr);
-				}
-			}
-		}
-	}
-
-	public unsafe static void ImFormatStringToTempBufferV(out byte* out_buf, out byte* out_buf_end, string fmt)
-	{
-		fixed (byte** out_buf2 = &out_buf)
-		{
-			fixed (byte** out_buf_end2 = &out_buf_end)
-			{
-				int num = 0;
-				byte* ptr;
-				if (fmt == null)
-				{
-					ptr = null;
-				}
-				else
-				{
-					num = MarshalUtils.GetByteCount(fmt);
-					ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-					int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-					ptr[utf] = 0;
-				}
-				ImGuiDebug.Log("igImFormatStringToTempBufferV #1");
-				ImGuiNative.igImFormatStringToTempBufferV(out_buf2, out_buf_end2, ptr);
-				if (num > 2048)
-				{
-					MarshalUtils.Free(ptr);
-				}
-			}
-		}
-	}
-
-	public unsafe static int ImFormatStringV(ref byte buf, uint buf_size, string fmt)
-	{
-		int result;
-		fixed (byte* buf2 = &buf)
-		{
-			int num = 0;
-			byte* ptr;
-			if (fmt == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(fmt);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-				ptr[utf] = 0;
-			}
-			ImGuiDebug.Log("igImFormatStringV #1");
-			result = ImGuiNative.igImFormatStringV(buf2, buf_size, ptr);
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)
-	{
-		ImGuiDebug.Log("igImGetDirQuadrantFromDelta #1");
-		return ImGuiNative.igImGetDirQuadrantFromDelta(dx, dy);
-	}
-
-	public static uint ImHashData(IntPtr data, uint data_size)
-	{
-		ImGuiDebug.Log("igImHashData #1");
-		return ImGuiNative.igImHashData(data, data_size, 0u);
-	}
-
-	public static uint ImHashData(IntPtr data, uint data_size, uint seed)
-	{
-		ImGuiDebug.Log("igImHashData #2");
-		return ImGuiNative.igImHashData(data, data_size, seed);
-	}
-
-	public unsafe static uint ImHashStr(string data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (data == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(data);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(data, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImHashStr #1");
-		uint result = ImGuiNative.igImHashStr(ptr, 0u, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static uint ImHashStr(string data, uint data_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (data == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(data);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(data, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImHashStr #2");
-		uint result = ImGuiNative.igImHashStr(ptr, data_size, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static uint ImHashStr(string data, uint data_size, uint seed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (data == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(data);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(data, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImHashStr #3");
-		uint result = ImGuiNative.igImHashStr(ptr, data_size, seed);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static float ImInvLength(Vector2 lhs, float fail_value)
-	{
-		ImGuiDebug.Log("igImInvLength #1");
-		return ImGuiNative.igImInvLength(lhs, fail_value);
-	}
-
-	public static bool ImIsFloatAboveGuaranteedIntegerPrecision(float f)
-	{
-		ImGuiDebug.Log("igImIsFloatAboveGuaranteedIntegerPrecision #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImIsFloatAboveGuaranteedIntegerPrecision(f));
-	}
-
-	public static bool ImIsPowerOfTwo(int v)
-	{
-		ImGuiDebug.Log("igImIsPowerOfTwo_Int #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImIsPowerOfTwo_Int(v));
-	}
-
-	public static bool ImIsPowerOfTwo(ulong v)
-	{
-		ImGuiDebug.Log("igImIsPowerOfTwo_U64 #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImIsPowerOfTwo_U64(v));
-	}
-
-	public static float ImLengthSqr(Vector2 lhs)
-	{
-		ImGuiDebug.Log("igImLengthSqr_Vec2 #1");
-		return ImGuiNative.igImLengthSqr_Vec2(lhs);
-	}
-
-	public static float ImLengthSqr(Vector4 lhs)
-	{
-		ImGuiDebug.Log("igImLengthSqr_Vec4 #2");
-		return ImGuiNative.igImLengthSqr_Vec4(lhs);
-	}
-
-	public unsafe static Vector2 ImLerp(Vector2 a, Vector2 b, float t)
-	{
-		ImGuiDebug.Log("igImLerp_Vec2Float #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImLerp_Vec2Float(&result, a, b, t);
-		return result;
-	}
-
-	public unsafe static Vector2 ImLerp(Vector2 a, Vector2 b, Vector2 t)
-	{
-		ImGuiDebug.Log("igImLerp_Vec2Vec2 #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImLerp_Vec2Vec2(&result, a, b, t);
-		return result;
-	}
-
-	public unsafe static Vector4 ImLerp(Vector4 a, Vector4 b, float t)
-	{
-		ImGuiDebug.Log("igImLerp_Vec4 #3");
-		Vector4 result = default(Vector4);
-		ImGuiNative.igImLerp_Vec4(&result, a, b, t);
-		return result;
-	}
-
-	public unsafe static Vector2 ImLineClosestPoint(Vector2 a, Vector2 b, Vector2 p)
-	{
-		ImGuiDebug.Log("igImLineClosestPoint #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImLineClosestPoint(&result, a, b, p);
-		return result;
-	}
-
-	public static float ImLinearSweep(float current, float target, float speed)
-	{
-		ImGuiDebug.Log("igImLinearSweep #1");
-		return ImGuiNative.igImLinearSweep(current, target, speed);
-	}
-
-	public static float ImLog(float x)
-	{
-		ImGuiDebug.Log("igImLog_Float #1");
-		return ImGuiNative.igImLog_Float(x);
-	}
-
-	public static double ImLog(double x)
-	{
-		ImGuiDebug.Log("igImLog_double #2");
-		return ImGuiNative.igImLog_double(x);
-	}
-
-	public unsafe static Vector2 ImMax(Vector2 lhs, Vector2 rhs)
-	{
-		ImGuiDebug.Log("igImMax #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImMax(&result, lhs, rhs);
-		return result;
-	}
-
-	public unsafe static Vector2 ImMin(Vector2 lhs, Vector2 rhs)
-	{
-		ImGuiDebug.Log("igImMin #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImMin(&result, lhs, rhs);
-		return result;
-	}
-
-	public static int ImModPositive(int a, int b)
-	{
-		ImGuiDebug.Log("igImModPositive #1");
-		return ImGuiNative.igImModPositive(a, b);
-	}
-
-	public unsafe static Vector2 ImMul(Vector2 lhs, Vector2 rhs)
-	{
-		ImGuiDebug.Log("igImMul #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImMul(&result, lhs, rhs);
-		return result;
-	}
-
-	public unsafe static string ImParseFormatFindEnd(string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImParseFormatFindEnd #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImParseFormatFindEnd(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static string ImParseFormatFindStart(string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImParseFormatFindStart #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImParseFormatFindStart(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImParseFormatPrecision(string format, int default_value)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImParseFormatPrecision #1");
-		int result = ImGuiNative.igImParseFormatPrecision(ptr, default_value);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void ImParseFormatSanitizeForPrinting(string fmt_in, ref byte fmt_out, uint fmt_out_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt_in == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt_in);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt_in, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (byte* fmt_out2 = &fmt_out)
-		{
-			ImGuiDebug.Log("igImParseFormatSanitizeForPrinting #1");
-			ImGuiNative.igImParseFormatSanitizeForPrinting(ptr, fmt_out2, fmt_out_size);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static string ImParseFormatSanitizeForScanning(string fmt_in, ref byte fmt_out, uint fmt_out_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt_in == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt_in);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt_in, ptr, num);
-			ptr[utf] = 0;
-		}
-		string result;
-		fixed (byte* fmt_out2 = &fmt_out)
-		{
-			ImGuiDebug.Log("igImParseFormatSanitizeForScanning #1");
-			result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImParseFormatSanitizeForScanning(ptr, fmt_out2, fmt_out_size));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static string ImParseFormatTrimDecorations(string format, ref byte buf, uint buf_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		string result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igImParseFormatTrimDecorations #1");
-			result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImParseFormatTrimDecorations(ptr, buf2, buf_size));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static float ImPow(float x, float y)
-	{
-		ImGuiDebug.Log("igImPow_Float #1");
-		return ImGuiNative.igImPow_Float(x, y);
-	}
-
-	public static double ImPow(double x, double y)
-	{
-		ImGuiDebug.Log("igImPow_double #2");
-		return ImGuiNative.igImPow_double(x, y);
-	}
-
-	public static void ImQsort(IntPtr @base, uint count, uint size_of_element, IntPtr compare_func)
-	{
-		ImGuiDebug.Log("igImQsort #1");
-		ImGuiNative.igImQsort(@base, count, size_of_element, compare_func);
-	}
-
-	public unsafe static Vector2 ImRotate(Vector2 v, float cos_a, float sin_a)
-	{
-		ImGuiDebug.Log("igImRotate #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImRotate(&result, v, cos_a, sin_a);
-		return result;
-	}
-
-	public static float ImRsqrt(float x)
-	{
-		ImGuiDebug.Log("igImRsqrt_Float #1");
-		return ImGuiNative.igImRsqrt_Float(x);
-	}
-
-	public static double ImRsqrt(double x)
-	{
-		ImGuiDebug.Log("igImRsqrt_double #2");
-		return ImGuiNative.igImRsqrt_double(x);
-	}
-
-	public static float ImSaturate(float f)
-	{
-		ImGuiDebug.Log("igImSaturate #1");
-		return ImGuiNative.igImSaturate(f);
-	}
-
-	public static float ImSign(float x)
-	{
-		ImGuiDebug.Log("igImSign_Float #1");
-		return ImGuiNative.igImSign_Float(x);
-	}
-
-	public static double ImSign(double x)
-	{
-		ImGuiDebug.Log("igImSign_double #2");
-		return ImGuiNative.igImSign_double(x);
-	}
-
-	public unsafe static string ImStrSkipBlank(string str)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImStrSkipBlank #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImStrSkipBlank(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void ImStrTrimBlanks(ref byte str)
-	{
-		fixed (byte* str2 = &str)
-		{
-			ImGuiDebug.Log("igImStrTrimBlanks #1");
-			ImGuiNative.igImStrTrimBlanks(str2);
-		}
-	}
-
-	public unsafe static ushort* ImStrbolW(ref ushort buf_mid_line, ref ushort buf_begin)
-	{
-		ushort* result;
-		fixed (ushort* buf_mid_line2 = &buf_mid_line)
-		{
-			fixed (ushort* buf_begin2 = &buf_begin)
-			{
-				ImGuiDebug.Log("igImStrbolW #1");
-				result = ImGuiNative.igImStrbolW(buf_mid_line2, buf_begin2);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static string ImStrchrRange(string str_begin, string str_end, byte c)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImStrchrRange #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImStrchrRange(ptr, ptr2, c));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static byte* ImStrdup(string str)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igImStrdup #1");
-		byte* result = ImGuiNative.igImStrdup(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static byte* ImStrdupcpy(ref byte dst, ref uint p_dst_size, string str)
-	{
-		byte* result;
-		fixed (byte* dst2 = &dst)
-		{
-			fixed (uint* p_dst_size2 = &p_dst_size)
-			{
-				int num = 0;
-				byte* ptr;
-				if (str == null)
-				{
-					ptr = null;
-				}
-				else
-				{
-					num = MarshalUtils.GetByteCount(str);
-					ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-					int utf = MarshalUtils.GetUtf8(str, ptr, num);
-					ptr[utf] = 0;
-				}
-				ImGuiDebug.Log("igImStrdupcpy #1");
-				result = ImGuiNative.igImStrdupcpy(dst2, p_dst_size2, ptr);
-				if (num > 2048)
-				{
-					MarshalUtils.Free(ptr);
-				}
-			}
-		}
-		return result;
-	}
-
-	public unsafe static string ImStreolRange(string str, string str_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImStreolRange #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImStreolRange(ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImStricmp(string str1, string str2)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str1 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str1);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str1, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str2 == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str2);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str2, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImStricmp #1");
-		int result = ImGuiNative.igImStricmp(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static string ImStristr(string haystack, string haystack_end, string needle, string needle_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (haystack == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(haystack);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(haystack, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (haystack_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(haystack_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(haystack_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		int num3 = 0;
-		byte* ptr3;
-		if (needle == null)
-		{
-			ptr3 = null;
-		}
-		else
-		{
-			num3 = MarshalUtils.GetByteCount(needle);
-			ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-			int utf3 = MarshalUtils.GetUtf8(needle, ptr3, num3);
-			ptr3[utf3] = 0;
-		}
-		int num4 = 0;
-		byte* ptr4;
-		if (needle_end == null)
-		{
-			ptr4 = null;
-		}
-		else
-		{
-			num4 = MarshalUtils.GetByteCount(needle_end);
-			ptr4 = ((num4 <= 2048) ? stackalloc byte[(int)(uint)(num4 + 1)] : MarshalUtils.Allocate(num4 + 1));
-			int utf4 = MarshalUtils.GetUtf8(needle_end, ptr4, num4);
-			ptr4[utf4] = 0;
-		}
-		ImGuiDebug.Log("igImStristr #1");
-		string result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImStristr(ptr, ptr2, ptr3, ptr4));
-		if (num4 > 2048)
-		{
-			MarshalUtils.Free(ptr4);
-		}
-		if (num3 > 2048)
-		{
-			MarshalUtils.Free(ptr3);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImStrlenW(ref ushort str)
-	{
-		int result;
-		fixed (ushort* str2 = &str)
-		{
-			ImGuiDebug.Log("igImStrlenW #1");
-			result = ImGuiNative.igImStrlenW(str2);
-		}
-		return result;
-	}
-
-	public unsafe static void ImStrncpy(ref byte dst, string src, uint count)
-	{
-		fixed (byte* dst2 = &dst)
-		{
-			int num = 0;
-			byte* ptr;
-			if (src == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(src);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(src, ptr, num);
-				ptr[utf] = 0;
-			}
-			ImGuiDebug.Log("igImStrncpy #1");
-			ImGuiNative.igImStrncpy(dst2, ptr, count);
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-	}
-
-	public unsafe static int ImStrnicmp(string str1, string str2, uint count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str1 == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str1);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str1, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str2 == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str2);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str2, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImStrnicmp #1");
-		int result = ImGuiNative.igImStrnicmp(ptr, ptr2, count);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextCharFromUtf8(out uint out_char, string in_text, string in_text_end)
-	{
-		int result;
-		fixed (uint* out_char2 = &out_char)
-		{
-			int num = 0;
-			byte* ptr;
-			if (in_text == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(in_text);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(in_text, ptr, num);
-				ptr[utf] = 0;
-			}
-			int num2 = 0;
-			byte* ptr2;
-			if (in_text_end == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(in_text_end);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(in_text_end, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igImTextCharFromUtf8 #1");
-			result = ImGuiNative.igImTextCharFromUtf8(out_char2, ptr, ptr2);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static string ImTextCharToUtf8(out byte out_buf, uint c)
-	{
-		string result;
-		fixed (byte* out_buf2 = &out_buf)
-		{
-			ImGuiDebug.Log("igImTextCharToUtf8 #1");
-			result = MarshalUtils.bytePointer_to_string(ImGuiNative.igImTextCharToUtf8(out_buf2, c));
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextCountCharsFromUtf8(string in_text, string in_text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (in_text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(in_text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(in_text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (in_text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(in_text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(in_text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImTextCountCharsFromUtf8 #1");
-		int result = ImGuiNative.igImTextCountCharsFromUtf8(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextCountUtf8BytesFromChar(string in_text, string in_text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (in_text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(in_text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(in_text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (in_text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(in_text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(in_text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igImTextCountUtf8BytesFromChar #1");
-		int result = ImGuiNative.igImTextCountUtf8BytesFromChar(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextCountUtf8BytesFromStr(ref ushort in_text, ref ushort in_text_end)
-	{
-		int result;
-		fixed (ushort* in_text2 = &in_text)
-		{
-			fixed (ushort* in_text_end2 = &in_text_end)
-			{
-				ImGuiDebug.Log("igImTextCountUtf8BytesFromStr #1");
-				result = ImGuiNative.igImTextCountUtf8BytesFromStr(in_text2, in_text_end2);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextStrFromUtf8(out ushort out_buf, int out_buf_size, string in_text, string in_text_end)
-	{
-		int result;
-		fixed (ushort* out_buf2 = &out_buf)
-		{
-			int num = 0;
-			byte* ptr;
-			if (in_text == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(in_text);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(in_text, ptr, num);
-				ptr[utf] = 0;
-			}
-			int num2 = 0;
-			byte* ptr2;
-			if (in_text_end == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(in_text_end);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(in_text_end, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igImTextStrFromUtf8 #1");
-			result = ImGuiNative.igImTextStrFromUtf8(out_buf2, out_buf_size, ptr, ptr2, null);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextStrFromUtf8(out ushort out_buf, int out_buf_size, string in_text, string in_text_end, ref byte* in_remaining)
-	{
-		int result;
-		fixed (ushort* out_buf2 = &out_buf)
-		{
-			int num = 0;
-			byte* ptr;
-			if (in_text == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(in_text);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(in_text, ptr, num);
-				ptr[utf] = 0;
-			}
-			int num2 = 0;
-			byte* ptr2;
-			if (in_text_end == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(in_text_end);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(in_text_end, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			fixed (byte** in_remaining2 = &in_remaining)
-			{
-				ImGuiDebug.Log("igImTextStrFromUtf8 #2");
-				result = ImGuiNative.igImTextStrFromUtf8(out_buf2, out_buf_size, ptr, ptr2, in_remaining2);
-			}
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-		return result;
-	}
-
-	public unsafe static int ImTextStrToUtf8(out byte out_buf, int out_buf_size, ref ushort in_text, ref ushort in_text_end)
-	{
-		int result;
-		fixed (byte* out_buf2 = &out_buf)
-		{
-			fixed (ushort* in_text2 = &in_text)
-			{
-				fixed (ushort* in_text_end2 = &in_text_end)
-				{
-					ImGuiDebug.Log("igImTextStrToUtf8 #1");
-					result = ImGuiNative.igImTextStrToUtf8(out_buf2, out_buf_size, in_text2, in_text_end2);
-				}
-			}
-		}
-		return result;
-	}
-
-	public static float ImTriangleArea(Vector2 a, Vector2 b, Vector2 c)
-	{
-		ImGuiDebug.Log("igImTriangleArea #1");
-		return ImGuiNative.igImTriangleArea(a, b, c);
-	}
-
-	public unsafe static void ImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, out float out_u, out float out_v, out float out_w)
-	{
-		fixed (float* out_u2 = &out_u)
-		{
-			fixed (float* out_v2 = &out_v)
-			{
-				fixed (float* out_w2 = &out_w)
-				{
-					ImGuiDebug.Log("igImTriangleBarycentricCoords #1");
-					ImGuiNative.igImTriangleBarycentricCoords(a, b, c, p, out_u2, out_v2, out_w2);
-				}
-			}
-		}
-	}
-
-	public unsafe static Vector2 ImTriangleClosestPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
-	{
-		ImGuiDebug.Log("igImTriangleClosestPoint #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igImTriangleClosestPoint(&result, a, b, c, p);
-		return result;
-	}
-
-	public static bool ImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p)
-	{
-		ImGuiDebug.Log("igImTriangleContainsPoint #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImTriangleContainsPoint(a, b, c, p));
-	}
-
-	public static int ImUpperPowerOfTwo(int v)
-	{
-		ImGuiDebug.Log("igImUpperPowerOfTwo #1");
-		return ImGuiNative.igImUpperPowerOfTwo(v);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #1");
-		ImGuiNative.igImage(user_texture_id, size, uv, uv2, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #2");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #3");
-		ImGuiNative.igImage(user_texture_id, size, uv, uv2, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1)
-	{
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #4");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv1, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #5");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector4 tint_col, Vector4 border_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImage #6");
-		ImGuiNative.igImage(user_texture_id, size, uv, uv2, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col)
-	{
-		Vector4 border_col = new Vector4(0f, 0f, 0f, 0f);
-		ImGuiDebug.Log("igImage #7");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv1, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector4 tint_col, Vector4 border_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImage #8");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv, tint_col, border_col);
-	}
-
-	public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col, Vector4 border_col)
-	{
-		ImGuiDebug.Log("igImage #9");
-		ImGuiNative.igImage(user_texture_id, size, uv0, uv1, tint_col, border_col);
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, int frame_padding)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #3");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector4 bg_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #4");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1)
-	{
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #5");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, int frame_padding)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #6");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector4 bg_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #7");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, int frame_padding, Vector4 bg_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #8");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector4 bg_col, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImageButton #9");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, int frame_padding)
-	{
-		Vector4 bg_col = new Vector4(0f, 0f, 0f, 0f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #10");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 bg_col)
-	{
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #11");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, int frame_padding, Vector4 bg_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #12");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector4 bg_col, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImageButton #13");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, int frame_padding, Vector4 bg_col, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(0f, 0f);
-		Vector2 uv2 = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImageButton #14");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv, uv2, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, int frame_padding, Vector4 bg_col)
-	{
-		Vector4 tint_col = new Vector4(1f, 1f, 1f, 1f);
-		ImGuiDebug.Log("igImageButton #15");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 bg_col, Vector4 tint_col)
-	{
-		ImGuiDebug.Log("igImageButton #16");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, -1, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, int frame_padding, Vector4 bg_col, Vector4 tint_col)
-	{
-		Vector2 uv = new Vector2(1f, 1f);
-		ImGuiDebug.Log("igImageButton #17");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, int frame_padding, Vector4 bg_col, Vector4 tint_col)
-	{
-		ImGuiDebug.Log("igImageButton #18");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col));
-	}
-
-	public static bool ImageButtonEx(uint id, IntPtr texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector2 padding, Vector4 bg_col, Vector4 tint_col)
-	{
-		ImGuiDebug.Log("igImageButtonEx #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igImageButtonEx(id, texture_id, size, uv0, uv1, padding, bg_col, tint_col));
-	}
-
-	public static void Indent()
-	{
-		ImGuiDebug.Log("igIndent #1");
-		ImGuiNative.igIndent(0f);
-	}
-
-	public static void Indent(float indent_w)
-	{
-		ImGuiDebug.Log("igIndent #2");
-		ImGuiNative.igIndent(indent_w);
-	}
-
-	public static void Initialize()
-	{
-		ImGuiDebug.Log("igInitialize #1");
-		ImGuiNative.igInitialize();
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, 0.0, 0.0, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, 0.0, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, 0.0, 0.0, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, 0.0, 0.0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, double step_fast)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, step_fast, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, 0.0, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, 0.0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, 0.0, 0.0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, double step_fast, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, step_fast, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, double step_fast, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.6f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.6f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputDouble #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, step_fast, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, 0.0, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputDouble(string label, ref double v, double step, double step_fast, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (double* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputDouble #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputDouble(ptr, v2, step, step_fast, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, 0f, 0f, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, 0f, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, 0f, 0f, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, float step_fast)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, step_fast, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, 0f, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, 0f, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, float step_fast, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, step_fast, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, float step_fast, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, step_fast, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, 0f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat(string label, ref float v, float step, float step_fast, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat(ptr, v2, step, step_fast, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat2(string label, ref Vector2 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat2(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat2(string label, ref Vector2 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat2(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat2(string label, ref Vector2 v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat2 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat2(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat2(string label, ref Vector2 v, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat2 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat2(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat3(string label, ref Vector3 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat3(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat3(string label, ref Vector3 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat3(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat3(string label, ref Vector3 v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat3 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat3(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat3(string label, ref Vector3 v, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat3 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat3(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat4(string label, ref Vector4 v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat4(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat4(string label, ref Vector4 v, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat4(ptr, v2, ptr2, ImGuiInputTextFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat4(string label, ref Vector4 v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igInputFloat4 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat4(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputFloat4(string label, ref Vector4 v, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igInputFloat4 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputFloat4(ptr, v2, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, 1, 100, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v, int step)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, step, 100, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, 1, 100, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v, int step, int step_fast)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, step, step_fast, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v, int step, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, step, 100, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt(string label, ref int v, int step, int step_fast, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt(ptr, v2, step, step_fast, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt2(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt2(ptr, v2, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt2(string label, ref int v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt2(ptr, v2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt3(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt3(ptr, v2, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt3(string label, ref int v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt3(ptr, v2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt4(string label, ref int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt4(ptr, v2, ImGuiInputTextFlags.None));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputInt4(string label, ref int v, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igInputInt4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputInt4(ptr, v2, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, IntPtr.Zero, IntPtr.Zero, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, IntPtr.Zero, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, p_step_fast, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, IntPtr.Zero, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #7");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #8");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #9");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, p_step_fast, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #10");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, p_step_fast, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #11");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalar #12");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalar(ptr, data_type, p_data, p_step, p_step_fast, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, IntPtr.Zero, IntPtr.Zero, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, IntPtr.Zero, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, IntPtr.Zero, IntPtr.Zero, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, IntPtr.Zero, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, p_step_fast, null, ImGuiInputTextFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, IntPtr.Zero, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #7");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, IntPtr.Zero, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #8");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, IntPtr.Zero, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #9");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, p_step_fast, ptr2, ImGuiInputTextFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #10");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, p_step_fast, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #11");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, IntPtr.Zero, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, string format, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igInputScalarN #12");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInputScalarN(ptr, data_type, p_data, components, p_step, p_step_fast, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, ImGuiInputTextFlags.None, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, flags, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, ImGuiInputTextFlags.None, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, ImGuiInputTextFlags.None, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, flags, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, flags, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, ImGuiInputTextFlags.None, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputText #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputText(ptr, buf2, buf_size, flags, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextEx #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextEx(ptr, ptr2, buf2, buf_size, size_arg, flags, null, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextEx #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextEx(ptr, ptr2, buf2, buf_size, size_arg, flags, callback, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextEx #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextEx(ptr, ptr2, buf2, buf_size, size_arg, flags, null, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextEx #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextEx(ptr, ptr2, buf2, buf_size, size_arg, flags, callback, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, null, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, callback, IntPtr.Zero));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextFlags flags, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #13");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, null, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #14");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, ImGuiInputTextFlags.None, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			Vector2 size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igInputTextMultiline #15");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref byte buf, uint buf_size, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextMultiline #16");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextMultiline(ptr, buf2, buf_size, size, flags, callback, user_data));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, ImGuiInputTextFlags.None, null, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, flags, null, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, ImGuiInputTextFlags.None, callback, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, ImGuiInputTextFlags.None, null, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, flags, callback, IntPtr.Zero));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, flags, null, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, ImGuiInputTextFlags.None, callback, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (hint == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(hint);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(hint, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igInputTextWithHint #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igInputTextWithHint(ptr, ptr2, buf2, buf_size, flags, callback, user_data));
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InvisibleButton(string str_id, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInvisibleButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInvisibleButton(ptr, size, ImGuiButtonFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool InvisibleButton(string str_id, Vector2 size, ImGuiButtonFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igInvisibleButton #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igInvisibleButton(ptr, size, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static bool IsActiveIdUsingKey(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsActiveIdUsingKey #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsActiveIdUsingKey(key));
-	}
-
-	public static bool IsActiveIdUsingNavDir(ImGuiDir dir)
-	{
-		ImGuiDebug.Log("igIsActiveIdUsingNavDir #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsActiveIdUsingNavDir(dir));
-	}
-
-	public static bool IsActiveIdUsingNavInput(ImGuiNavInput input)
-	{
-		ImGuiDebug.Log("igIsActiveIdUsingNavInput #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsActiveIdUsingNavInput(input));
-	}
-
-	public static bool IsAnyItemActive()
-	{
-		ImGuiDebug.Log("igIsAnyItemActive #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsAnyItemActive());
-	}
-
-	public static bool IsAnyItemFocused()
-	{
-		ImGuiDebug.Log("igIsAnyItemFocused #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsAnyItemFocused());
-	}
-
-	public static bool IsAnyItemHovered()
-	{
-		ImGuiDebug.Log("igIsAnyItemHovered #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsAnyItemHovered());
-	}
-
-	public static bool IsAnyMouseDown()
-	{
-		ImGuiDebug.Log("igIsAnyMouseDown #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsAnyMouseDown());
-	}
-
-	public static bool IsClippedEx(Rect bb, uint id)
-	{
-		ImGuiDebug.Log("igIsClippedEx #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsClippedEx(bb, id));
-	}
-
-	public static bool IsDragDropActive()
-	{
-		ImGuiDebug.Log("igIsDragDropActive #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsDragDropActive());
-	}
-
-	public static bool IsDragDropPayloadBeingAccepted()
-	{
-		ImGuiDebug.Log("igIsDragDropPayloadBeingAccepted #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsDragDropPayloadBeingAccepted());
-	}
-
-	public static bool IsGamepadKey(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsGamepadKey #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsGamepadKey(key));
-	}
-
-	public static bool IsItemActivated()
-	{
-		ImGuiDebug.Log("igIsItemActivated #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemActivated());
-	}
-
-	public static bool IsItemActive()
-	{
-		ImGuiDebug.Log("igIsItemActive #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemActive());
-	}
-
-	public static bool IsItemClicked()
-	{
-		ImGuiDebug.Log("igIsItemClicked #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemClicked(ImGuiMouseButton.Left));
-	}
-
-	public static bool IsItemClicked(ImGuiMouseButton mouse_button)
-	{
-		ImGuiDebug.Log("igIsItemClicked #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemClicked(mouse_button));
-	}
-
-	public static bool IsItemDeactivated()
-	{
-		ImGuiDebug.Log("igIsItemDeactivated #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemDeactivated());
-	}
-
-	public static bool IsItemDeactivatedAfterEdit()
-	{
-		ImGuiDebug.Log("igIsItemDeactivatedAfterEdit #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemDeactivatedAfterEdit());
-	}
-
-	public static bool IsItemEdited()
-	{
-		ImGuiDebug.Log("igIsItemEdited #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemEdited());
-	}
-
-	public static bool IsItemFocused()
-	{
-		ImGuiDebug.Log("igIsItemFocused #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemFocused());
-	}
-
-	public static bool IsItemHovered()
-	{
-		ImGuiDebug.Log("igIsItemHovered #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemHovered(ImGuiHoveredFlags.None));
-	}
-
-	public static bool IsItemHovered(ImGuiHoveredFlags flags)
-	{
-		ImGuiDebug.Log("igIsItemHovered #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemHovered(flags));
-	}
-
-	public static bool IsItemToggledOpen()
-	{
-		ImGuiDebug.Log("igIsItemToggledOpen #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemToggledOpen());
-	}
-
-	public static bool IsItemToggledSelection()
-	{
-		ImGuiDebug.Log("igIsItemToggledSelection #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemToggledSelection());
-	}
-
-	public static bool IsItemVisible()
-	{
-		ImGuiDebug.Log("igIsItemVisible #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsItemVisible());
-	}
-
-	public static bool IsKeyDown(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsKeyDown #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyDown(key));
-	}
-
-	public static bool IsKeyPressed(ImGuiKey key)
-	{
-		byte repeat = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igIsKeyPressed #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyPressed(key, repeat));
-	}
-
-	public static bool IsKeyPressed(ImGuiKey key, bool repeat)
-	{
-		byte repeat2 = MarshalUtils.bool_to_byte(repeat);
-		ImGuiDebug.Log("igIsKeyPressed #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyPressed(key, repeat2));
-	}
-
-	public static bool IsKeyPressedMap(ImGuiKey key)
-	{
-		byte repeat = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igIsKeyPressedMap #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyPressedMap(key, repeat));
-	}
-
-	public static bool IsKeyPressedMap(ImGuiKey key, bool repeat)
-	{
-		byte repeat2 = MarshalUtils.bool_to_byte(repeat);
-		ImGuiDebug.Log("igIsKeyPressedMap #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyPressedMap(key, repeat2));
-	}
-
-	public static bool IsKeyReleased(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsKeyReleased #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsKeyReleased(key));
-	}
-
-	public static bool IsLegacyKey(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsLegacyKey #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsLegacyKey(key));
-	}
-
-	public static bool IsMouseClicked(ImGuiMouseButton button)
-	{
-		byte repeat = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igIsMouseClicked #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseClicked(button, repeat));
-	}
-
-	public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat)
-	{
-		byte repeat2 = MarshalUtils.bool_to_byte(repeat);
-		ImGuiDebug.Log("igIsMouseClicked #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseClicked(button, repeat2));
-	}
-
-	public static bool IsMouseDoubleClicked(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igIsMouseDoubleClicked #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDoubleClicked(button));
-	}
-
-	public static bool IsMouseDown(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igIsMouseDown #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDown(button));
-	}
-
-	public static bool IsMouseDragPastThreshold(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igIsMouseDragPastThreshold #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDragPastThreshold(button, -1f));
-	}
-
-	public static bool IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
-	{
-		ImGuiDebug.Log("igIsMouseDragPastThreshold #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDragPastThreshold(button, lock_threshold));
-	}
-
-	public static bool IsMouseDragging(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igIsMouseDragging #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDragging(button, -1f));
-	}
-
-	public static bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold)
-	{
-		ImGuiDebug.Log("igIsMouseDragging #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseDragging(button, lock_threshold));
-	}
-
-	public static bool IsMouseHoveringRect(Vector2 r_min, Vector2 r_max)
-	{
-		byte clip = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igIsMouseHoveringRect #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseHoveringRect(r_min, r_max, clip));
-	}
-
-	public static bool IsMouseHoveringRect(Vector2 r_min, Vector2 r_max, bool clip)
-	{
-		byte clip2 = MarshalUtils.bool_to_byte(clip);
-		ImGuiDebug.Log("igIsMouseHoveringRect #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseHoveringRect(r_min, r_max, clip2));
-	}
-
-	public unsafe static bool IsMousePosValid()
-	{
-		ImGuiDebug.Log("igIsMousePosValid #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMousePosValid(null));
-	}
-
-	public unsafe static bool IsMousePosValid(ref Vector2 mouse_pos)
-	{
-		bool result;
-		fixed (Vector2* mouse_pos2 = &mouse_pos)
-		{
-			ImGuiDebug.Log("igIsMousePosValid #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igIsMousePosValid(mouse_pos2));
-		}
-		return result;
-	}
-
-	public static bool IsMouseReleased(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igIsMouseReleased #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsMouseReleased(button));
-	}
-
-	public static bool IsNamedKey(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igIsNamedKey #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsNamedKey(key));
-	}
-
-	public static bool IsNavInputDown(ImGuiNavInput n)
-	{
-		ImGuiDebug.Log("igIsNavInputDown #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsNavInputDown(n));
-	}
-
-	public static bool IsNavInputTest(ImGuiNavInput n, ImGuiNavReadMode rm)
-	{
-		ImGuiDebug.Log("igIsNavInputTest #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsNavInputTest(n, rm));
-	}
-
-	public unsafe static bool IsPopupOpen(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igIsPopupOpen_Str #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igIsPopupOpen_Str(ptr, ImGuiPopupFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool IsPopupOpen(string str_id, ImGuiPopupFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igIsPopupOpen_Str #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igIsPopupOpen_Str(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static bool IsPopupOpen(uint id, ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igIsPopupOpen_ID #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsPopupOpen_ID(id, popup_flags));
-	}
-
-	public static bool IsRectVisible(Vector2 size)
-	{
-		ImGuiDebug.Log("igIsRectVisible_Nil #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsRectVisible_Nil(size));
-	}
-
-	public static bool IsRectVisible(Vector2 rect_min, Vector2 rect_max)
-	{
-		ImGuiDebug.Log("igIsRectVisible_Vec2 #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsRectVisible_Vec2(rect_min, rect_max));
-	}
-
-	public unsafe static bool IsWindowAbove(ImGuiWindowPtr potential_above, ImGuiWindowPtr potential_below)
-	{
-		ImGuiDebug.Log("igIsWindowAbove #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowAbove(potential_above, potential_below));
-	}
-
-	public static bool IsWindowAppearing()
-	{
-		ImGuiDebug.Log("igIsWindowAppearing #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowAppearing());
-	}
-
-	public unsafe static bool IsWindowChildOf(ImGuiWindowPtr window, ImGuiWindowPtr potential_parent, bool popup_hierarchy)
-	{
-		byte popup_hierarchy2 = MarshalUtils.bool_to_byte(popup_hierarchy);
-		ImGuiDebug.Log("igIsWindowChildOf #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowChildOf(window, potential_parent, popup_hierarchy2));
-	}
-
-	public static bool IsWindowCollapsed()
-	{
-		ImGuiDebug.Log("igIsWindowCollapsed #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowCollapsed());
-	}
-
-	public static bool IsWindowFocused()
-	{
-		ImGuiDebug.Log("igIsWindowFocused #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowFocused(ImGuiFocusedFlags.None));
-	}
-
-	public static bool IsWindowFocused(ImGuiFocusedFlags flags)
-	{
-		ImGuiDebug.Log("igIsWindowFocused #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowFocused(flags));
-	}
-
-	public static bool IsWindowHovered()
-	{
-		ImGuiDebug.Log("igIsWindowHovered #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowHovered(ImGuiHoveredFlags.None));
-	}
-
-	public static bool IsWindowHovered(ImGuiHoveredFlags flags)
-	{
-		ImGuiDebug.Log("igIsWindowHovered #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowHovered(flags));
-	}
-
-	public unsafe static bool IsWindowNavFocusable(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igIsWindowNavFocusable #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowNavFocusable(window));
-	}
-
-	public unsafe static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ImGuiWindowPtr potential_parent)
-	{
-		ImGuiDebug.Log("igIsWindowWithinBeginStackOf #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igIsWindowWithinBeginStackOf(window, potential_parent));
-	}
-
-	public unsafe static bool ItemAdd(Rect bb, uint id)
-	{
-		ImGuiDebug.Log("igItemAdd #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igItemAdd(bb, id, null, ImGuiItemFlags.None));
-	}
-
-	public unsafe static bool ItemAdd(Rect bb, uint id, ref Rect nav_bb)
-	{
-		bool result;
-		fixed (Rect* nav_bb2 = &nav_bb)
-		{
-			ImGuiDebug.Log("igItemAdd #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igItemAdd(bb, id, nav_bb2, ImGuiItemFlags.None));
-		}
-		return result;
-	}
-
-	public unsafe static bool ItemAdd(Rect bb, uint id, ImGuiItemFlags extra_flags)
-	{
-		ImGuiDebug.Log("igItemAdd #3");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igItemAdd(bb, id, null, extra_flags));
-	}
-
-	public unsafe static bool ItemAdd(Rect bb, uint id, ref Rect nav_bb, ImGuiItemFlags extra_flags)
-	{
-		bool result;
-		fixed (Rect* nav_bb2 = &nav_bb)
-		{
-			ImGuiDebug.Log("igItemAdd #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igItemAdd(bb, id, nav_bb2, extra_flags));
-		}
-		return result;
-	}
-
-	public static bool ItemHoverable(Rect bb, uint id)
-	{
-		ImGuiDebug.Log("igItemHoverable #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igItemHoverable(bb, id));
-	}
-
-	public static void ItemSize(Vector2 size)
-	{
-		ImGuiDebug.Log("igItemSize_Vec2 #1");
-		ImGuiNative.igItemSize_Vec2(size, -1f);
-	}
-
-	public static void ItemSize(Vector2 size, float text_baseline_y)
-	{
-		ImGuiDebug.Log("igItemSize_Vec2 #2");
-		ImGuiNative.igItemSize_Vec2(size, text_baseline_y);
-	}
-
-	public static void ItemSize(Rect bb)
-	{
-		ImGuiDebug.Log("igItemSize_Rect #2");
-		ImGuiNative.igItemSize_Rect(bb, -1f);
-	}
-
-	public static void ItemSize(Rect bb, float text_baseline_y)
-	{
-		ImGuiDebug.Log("igItemSize_Rect #3");
-		ImGuiNative.igItemSize_Rect(bb, text_baseline_y);
-	}
-
-	public static void KeepAliveID(uint id)
-	{
-		ImGuiDebug.Log("igKeepAliveID #1");
-		ImGuiNative.igKeepAliveID(id);
-	}
-
-	public unsafe static void LabelText(string label, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igLabelText #1");
-		ImGuiNative.igLabelText(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LabelTextV(string label, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igLabelTextV #1");
-		ImGuiNative.igLabelTextV(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static bool ListBox(string label, ref int current_item, string[] items, int items_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int* ptr2 = stackalloc int[items.Length];
-			int num2 = 0;
-			for (int i = 0; i < items.Length; i++)
-			{
-				string s = items[i];
-				ptr2[i] = Encoding.UTF8.GetByteCount(s);
-				num2 += ptr2[i] + 1;
-			}
-			byte* ptr3 = stackalloc byte[(int)(uint)num2];
-			int num3 = 0;
-			for (int j = 0; j < items.Length; j++)
-			{
-				string text = items[j];
-				fixed (char* chars = text)
-				{
-					num3 += Encoding.UTF8.GetBytes(chars, text.Length, ptr3 + num3, ptr2[j]);
-					ptr3[num3] = 0;
-					num3++;
-				}
-			}
-			byte** ptr4 = stackalloc byte*[items.Length];
-			num3 = 0;
-			for (int k = 0; k < items.Length; k++)
-			{
-				ptr4[k] = ptr3 + num3;
-				num3 += ptr2[k] + 1;
-			}
-			ImGuiDebug.Log("igListBox_Str_arr #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igListBox_Str_arr(ptr, current_item2, ptr4, items_count, -1));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ListBox(string label, ref int current_item, string[] items, int items_count, int height_in_items)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			int* ptr2 = stackalloc int[items.Length];
-			int num2 = 0;
-			for (int i = 0; i < items.Length; i++)
-			{
-				string s = items[i];
-				ptr2[i] = Encoding.UTF8.GetByteCount(s);
-				num2 += ptr2[i] + 1;
-			}
-			byte* ptr3 = stackalloc byte[(int)(uint)num2];
-			int num3 = 0;
-			for (int j = 0; j < items.Length; j++)
-			{
-				string text = items[j];
-				fixed (char* chars = text)
-				{
-					num3 += Encoding.UTF8.GetBytes(chars, text.Length, ptr3 + num3, ptr2[j]);
-					ptr3[num3] = 0;
-					num3++;
-				}
-			}
-			byte** ptr4 = stackalloc byte*[items.Length];
-			num3 = 0;
-			for (int k = 0; k < items.Length; k++)
-			{
-				ptr4[k] = ptr3 + num3;
-				num3 += ptr2[k] + 1;
-			}
-			ImGuiDebug.Log("igListBox_Str_arr #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igListBox_Str_arr(ptr, current_item2, ptr4, items_count, height_in_items));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ListBox(string label, ref int current_item, IntPtr items_getter, IntPtr data, int items_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			ImGuiDebug.Log("igListBox_FnBoolPtr #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igListBox_FnBoolPtr(ptr, current_item2, items_getter, data, items_count, -1));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool ListBox(string label, ref int current_item, IntPtr items_getter, IntPtr data, int items_count, int height_in_items)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* current_item2 = &current_item)
-		{
-			ImGuiDebug.Log("igListBox_FnBoolPtr #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igListBox_FnBoolPtr(ptr, current_item2, items_getter, data, items_count, height_in_items));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void LoadIniSettingsFromDisk(string ini_filename)
-	{
-		int num = 0;
-		byte* ptr;
-		if (ini_filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(ini_filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(ini_filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLoadIniSettingsFromDisk #1");
-		ImGuiNative.igLoadIniSettingsFromDisk(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LoadIniSettingsFromMemory(string ini_data)
-	{
-		int num = 0;
-		byte* ptr;
-		if (ini_data == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(ini_data);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(ini_data, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLoadIniSettingsFromMemory #1");
-		ImGuiNative.igLoadIniSettingsFromMemory(ptr, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LoadIniSettingsFromMemory(string ini_data, uint ini_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (ini_data == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(ini_data);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(ini_data, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLoadIniSettingsFromMemory #2");
-		ImGuiNative.igLoadIniSettingsFromMemory(ptr, ini_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void LogBegin(ImGuiLogType type, int auto_open_depth)
-	{
-		ImGuiDebug.Log("igLogBegin #1");
-		ImGuiNative.igLogBegin(type, auto_open_depth);
-	}
-
-	public static void LogButtons()
-	{
-		ImGuiDebug.Log("igLogButtons #1");
-		ImGuiNative.igLogButtons();
-	}
-
-	public static void LogFinish()
-	{
-		ImGuiDebug.Log("igLogFinish #1");
-		ImGuiNative.igLogFinish();
-	}
-
-	public unsafe static void LogRenderedText(ref Vector2 ref_pos, string text)
-	{
-		fixed (Vector2* ref_pos2 = &ref_pos)
-		{
-			int num = 0;
-			byte* ptr;
-			if (text == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(text);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(text, ptr, num);
-				ptr[utf] = 0;
-			}
-			ImGuiDebug.Log("igLogRenderedText #1");
-			ImGuiNative.igLogRenderedText(ref_pos2, ptr, null);
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-	}
-
-	public unsafe static void LogRenderedText(ref Vector2 ref_pos, string text, string text_end)
-	{
-		fixed (Vector2* ref_pos2 = &ref_pos)
-		{
-			int num = 0;
-			byte* ptr;
-			if (text == null)
-			{
-				ptr = null;
-			}
-			else
-			{
-				num = MarshalUtils.GetByteCount(text);
-				ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-				int utf = MarshalUtils.GetUtf8(text, ptr, num);
-				ptr[utf] = 0;
-			}
-			int num2 = 0;
-			byte* ptr2;
-			if (text_end == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(text_end);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igLogRenderedText #2");
-			ImGuiNative.igLogRenderedText(ref_pos2, ptr, ptr2);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-			if (num > 2048)
-			{
-				MarshalUtils.Free(ptr);
-			}
-		}
-	}
-
-	public unsafe static void LogSetNextTextDecoration(string prefix, string suffix)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (suffix == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(suffix);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(suffix, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igLogSetNextTextDecoration #1");
-		ImGuiNative.igLogSetNextTextDecoration(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LogText(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLogText #1");
-		ImGuiNative.igLogText(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LogTextV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLogTextV #1");
-		ImGuiNative.igLogTextV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void LogToBuffer()
-	{
-		ImGuiDebug.Log("igLogToBuffer #1");
-		ImGuiNative.igLogToBuffer(-1);
-	}
-
-	public static void LogToBuffer(int auto_open_depth)
-	{
-		ImGuiDebug.Log("igLogToBuffer #2");
-		ImGuiNative.igLogToBuffer(auto_open_depth);
-	}
-
-	public static void LogToClipboard()
-	{
-		ImGuiDebug.Log("igLogToClipboard #1");
-		ImGuiNative.igLogToClipboard(-1);
-	}
-
-	public static void LogToClipboard(int auto_open_depth)
-	{
-		ImGuiDebug.Log("igLogToClipboard #2");
-		ImGuiNative.igLogToClipboard(auto_open_depth);
-	}
-
-	public unsafe static void LogToFile()
-	{
-		ImGuiDebug.Log("igLogToFile #1");
-		ImGuiNative.igLogToFile(-1, null);
-	}
-
-	public unsafe static void LogToFile(int auto_open_depth)
-	{
-		ImGuiDebug.Log("igLogToFile #2");
-		ImGuiNative.igLogToFile(auto_open_depth, null);
-	}
-
-	public unsafe static void LogToFile(string filename)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLogToFile #3");
-		ImGuiNative.igLogToFile(-1, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void LogToFile(int auto_open_depth, string filename)
-	{
-		int num = 0;
-		byte* ptr;
-		if (filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igLogToFile #4");
-		ImGuiNative.igLogToFile(auto_open_depth, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void LogToTTY()
-	{
-		ImGuiDebug.Log("igLogToTTY #1");
-		ImGuiNative.igLogToTTY(-1);
-	}
-
-	public static void LogToTTY(int auto_open_depth)
-	{
-		ImGuiDebug.Log("igLogToTTY #2");
-		ImGuiNative.igLogToTTY(auto_open_depth);
-	}
-
-	public static void MarkIniSettingsDirty()
-	{
-		ImGuiDebug.Log("igMarkIniSettingsDirty_Nil #1");
-		ImGuiNative.igMarkIniSettingsDirty_Nil();
-	}
-
-	public unsafe static void MarkIniSettingsDirty(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igMarkIniSettingsDirty_WindowPtr #2");
-		ImGuiNative.igMarkIniSettingsDirty_WindowPtr(window);
-	}
-
-	public static void MarkItemEdited(uint id)
-	{
-		ImGuiDebug.Log("igMarkItemEdited #1");
-		ImGuiNative.igMarkItemEdited(id);
-	}
-
-	public unsafe static void* MemAlloc(uint size)
-	{
-		ImGuiDebug.Log("igMemAlloc #1");
-		return MarshalUtils.IntPtr_to_pointer(ImGuiNative.igMemAlloc(size));
-	}
-
-	public static void MemFree(IntPtr ptr)
-	{
-		ImGuiDebug.Log("igMemFree #1");
-		ImGuiNative.igMemFree(ptr);
-	}
-
-	public unsafe static bool MenuItem(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItem_Bool #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, null, selected, enabled));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, string shortcut)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (shortcut == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(shortcut);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(shortcut, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItem_Bool #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, ptr2, selected, enabled));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, bool selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItem_Bool #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, null, selected2, enabled));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, string shortcut, bool selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (shortcut == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(shortcut);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(shortcut, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItem_Bool #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, ptr2, selected2, enabled));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, bool selected, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igMenuItem_Bool #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, null, selected2, enabled2));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, string shortcut, bool selected, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (shortcut == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(shortcut);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(shortcut, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igMenuItem_Bool #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_Bool(ptr, ptr2, selected2, enabled2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, string shortcut, ref bool p_selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (shortcut == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(shortcut);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(shortcut, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItem_BoolPtr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_BoolPtr(ptr, ptr2, p_selected2, enabled));
-		p_selected = b != 0;
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (shortcut == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(shortcut);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(shortcut, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igMenuItem_BoolPtr #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItem_BoolPtr(ptr, ptr2, p_selected2, enabled2));
-		p_selected = b != 0;
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItemEx #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, null, selected, enabled));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon, string shortcut)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		int num3 = 0;
-		byte* ptr3;
-		if (shortcut == null)
-		{
-			ptr3 = null;
-		}
-		else
-		{
-			num3 = MarshalUtils.GetByteCount(shortcut);
-			ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-			int utf3 = MarshalUtils.GetUtf8(shortcut, ptr3, num3);
-			ptr3[utf3] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItemEx #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, ptr3, selected, enabled));
-		if (num3 > 2048)
-		{
-			MarshalUtils.Free(ptr3);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon, bool selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItemEx #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, null, selected2, enabled));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon, string shortcut, bool selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		int num3 = 0;
-		byte* ptr3;
-		if (shortcut == null)
-		{
-			ptr3 = null;
-		}
-		else
-		{
-			num3 = MarshalUtils.GetByteCount(shortcut);
-			ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-			int utf3 = MarshalUtils.GetUtf8(shortcut, ptr3, num3);
-			ptr3[utf3] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igMenuItemEx #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, ptr3, selected2, enabled));
-		if (num3 > 2048)
-		{
-			MarshalUtils.Free(ptr3);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon, bool selected, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igMenuItemEx #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, null, selected2, enabled2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool MenuItemEx(string label, string icon, string shortcut, bool selected, bool enabled)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (icon == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(icon);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(icon, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		int num3 = 0;
-		byte* ptr3;
-		if (shortcut == null)
-		{
-			ptr3 = null;
-		}
-		else
-		{
-			num3 = MarshalUtils.GetByteCount(shortcut);
-			ptr3 = ((num3 <= 2048) ? stackalloc byte[(int)(uint)(num3 + 1)] : MarshalUtils.Allocate(num3 + 1));
-			int utf3 = MarshalUtils.GetUtf8(shortcut, ptr3, num3);
-			ptr3[utf3] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igMenuItemEx #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igMenuItemEx(ptr, ptr2, ptr3, selected2, enabled2));
-		if (num3 > 2048)
-		{
-			MarshalUtils.Free(ptr3);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void NavInitRequestApplyResult()
-	{
-		ImGuiDebug.Log("igNavInitRequestApplyResult #1");
-		ImGuiNative.igNavInitRequestApplyResult();
-	}
-
-	public unsafe static void NavInitWindow(ImGuiWindowPtr window, bool force_reinit)
-	{
-		byte force_reinit2 = MarshalUtils.bool_to_byte(force_reinit);
-		ImGuiDebug.Log("igNavInitWindow #1");
-		ImGuiNative.igNavInitWindow(window, force_reinit2);
-	}
-
-	public static void NavMoveRequestApplyResult()
-	{
-		ImGuiDebug.Log("igNavMoveRequestApplyResult #1");
-		ImGuiNative.igNavMoveRequestApplyResult();
-	}
-
-	public static bool NavMoveRequestButNoResultYet()
-	{
-		ImGuiDebug.Log("igNavMoveRequestButNoResultYet #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igNavMoveRequestButNoResultYet());
-	}
-
-	public static void NavMoveRequestCancel()
-	{
-		ImGuiDebug.Log("igNavMoveRequestCancel #1");
-		ImGuiNative.igNavMoveRequestCancel();
-	}
-
-	public static void NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
-	{
-		ImGuiDebug.Log("igNavMoveRequestForward #1");
-		ImGuiNative.igNavMoveRequestForward(move_dir, clip_dir, move_flags, scroll_flags);
-	}
-
-	public static void NavMoveRequestResolveWithLastItem(IntPtr result)
-	{
-		ImGuiDebug.Log("igNavMoveRequestResolveWithLastItem #1");
-		ImGuiNative.igNavMoveRequestResolveWithLastItem(result);
-	}
-
-	public static void NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
-	{
-		ImGuiDebug.Log("igNavMoveRequestSubmit #1");
-		ImGuiNative.igNavMoveRequestSubmit(move_dir, clip_dir, move_flags, scroll_flags);
-	}
-
-	public unsafe static void NavMoveRequestTryWrapping(ImGuiWindowPtr window, ImGuiNavMoveFlags move_flags)
-	{
-		ImGuiDebug.Log("igNavMoveRequestTryWrapping #1");
-		ImGuiNative.igNavMoveRequestTryWrapping(window, move_flags);
-	}
-
-	public static void NewFrame()
-	{
-		ImGuiDebug.Log("igNewFrame #1");
-		ImGuiNative.igNewFrame();
-	}
-
-	public static void NewLine()
-	{
-		ImGuiDebug.Log("igNewLine #1");
-		ImGuiNative.igNewLine();
-	}
-
-	public static void NextColumn()
-	{
-		ImGuiDebug.Log("igNextColumn #1");
-		ImGuiNative.igNextColumn();
-	}
-
-	public unsafe static void OpenPopup(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igOpenPopup_Str #1");
-		ImGuiNative.igOpenPopup_Str(ptr, ImGuiPopupFlags.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void OpenPopup(string str_id, ImGuiPopupFlags popup_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igOpenPopup_Str #2");
-		ImGuiNative.igOpenPopup_Str(ptr, popup_flags);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void OpenPopup(uint id)
-	{
-		ImGuiDebug.Log("igOpenPopup_ID #2");
-		ImGuiNative.igOpenPopup_ID(id, ImGuiPopupFlags.None);
-	}
-
-	public static void OpenPopup(uint id, ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igOpenPopup_ID #3");
-		ImGuiNative.igOpenPopup_ID(id, popup_flags);
-	}
-
-	public static void OpenPopupEx(uint id)
-	{
-		ImGuiDebug.Log("igOpenPopupEx #1");
-		ImGuiNative.igOpenPopupEx(id, ImGuiPopupFlags.None);
-	}
-
-	public static void OpenPopupEx(uint id, ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igOpenPopupEx #2");
-		ImGuiNative.igOpenPopupEx(id, popup_flags);
-	}
-
-	public unsafe static void OpenPopupOnItemClick()
-	{
-		ImGuiDebug.Log("igOpenPopupOnItemClick #1");
-		ImGuiNative.igOpenPopupOnItemClick(null, ImGuiPopupFlags.MouseButtonRight);
-	}
-
-	public unsafe static void OpenPopupOnItemClick(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igOpenPopupOnItemClick #2");
-		ImGuiNative.igOpenPopupOnItemClick(ptr, ImGuiPopupFlags.MouseButtonRight);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void OpenPopupOnItemClick(ImGuiPopupFlags popup_flags)
-	{
-		ImGuiDebug.Log("igOpenPopupOnItemClick #3");
-		ImGuiNative.igOpenPopupOnItemClick(null, popup_flags);
-	}
-
-	public unsafe static void OpenPopupOnItemClick(string str_id, ImGuiPopupFlags popup_flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igOpenPopupOnItemClick #4");
-		ImGuiNative.igOpenPopupOnItemClick(ptr, popup_flags);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static int PlotEx(ImGuiPlotType plot_type, string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 frame_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotEx #1");
-		int result = ImGuiNative.igPlotEx(plot_type, ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, scale_max, frame_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #1");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #2");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #3");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #4");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #5");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #6");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #7");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #8");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #9");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #10");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #11");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #12");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #13");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #14");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #15");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #16");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #17");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #18");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #19");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #20");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #21");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #22");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #23");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #24");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #25");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #26");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #27");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #28");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #29");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #30");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #31");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #32");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #33");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #34");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #35");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #36");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #37");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #38");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #39");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #40");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #41");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #42");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #43");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #44");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #45");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #46");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotHistogram_FloatPtr #47");
-			ImGuiNative.igPlotHistogram_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #2");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #3");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #4");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #5");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #6");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #7");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #8");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #9");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #10");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #11");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #12");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #13");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #14");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #15");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #16");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #17");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #18");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #19");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #20");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #21");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #22");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #23");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #24");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotHistogram(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotHistogram_FnFloatPtr #25");
-		ImGuiNative.igPlotHistogram_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #1");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #2");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #3");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #4");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #5");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #6");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #7");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #8");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #9");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #10");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #11");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #12");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #13");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #14");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #15");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #16");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #17");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #18");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #19");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #20");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #21");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #22");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #23");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #24");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #25");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #26");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #27");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #28");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #29");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #30");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #31");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #32");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #33");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #34");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #35");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, 4);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #36");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #37");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, float.MaxValue, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #38");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #39");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #40");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #41");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #42");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, 4);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			Vector2 graph_size = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igPlotLines_FloatPtr #43");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #44");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			ImGuiDebug.Log("igPlotLines_FloatPtr #45");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, null, scale_min, scale_max, graph_size, stride);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #46");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, 0, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, ref float[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		fixed (float* values2 = values)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (overlay_text == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(overlay_text);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igPlotLines_FloatPtr #47");
-			ImGuiNative.igPlotLines_FloatPtr(ptr, values2, values_count, values_offset, ptr2, scale_min, scale_max, graph_size, stride);
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #2");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #3");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #4");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #5");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #6");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #7");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #8");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #9");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, float.MaxValue, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #10");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #11");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #12");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #13");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #14");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #15");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, float.MaxValue, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #16");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #17");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, float.MaxValue, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #18");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #19");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #20");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		Vector2 graph_size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #21");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #22");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, float.MaxValue, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #23");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, null, scale_min, scale_max, graph_size);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #24");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, 0, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PlotLines(string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (overlay_text == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(overlay_text);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(overlay_text, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPlotLines_FnFloatPtr #25");
-		ImGuiNative.igPlotLines_FnFloatPtr(ptr, values_getter, data, values_count, values_offset, ptr2, scale_min, scale_max, graph_size);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void PopAllowKeyboardFocus()
-	{
-		ImGuiDebug.Log("igPopAllowKeyboardFocus #1");
-		ImGuiNative.igPopAllowKeyboardFocus();
-	}
-
-	public static void PopButtonRepeat()
-	{
-		ImGuiDebug.Log("igPopButtonRepeat #1");
-		ImGuiNative.igPopButtonRepeat();
-	}
-
-	public static void PopClipRect()
-	{
-		ImGuiDebug.Log("igPopClipRect #1");
-		ImGuiNative.igPopClipRect();
-	}
-
-	public static void PopColumnsBackground()
-	{
-		ImGuiDebug.Log("igPopColumnsBackground #1");
-		ImGuiNative.igPopColumnsBackground();
-	}
-
-	public static void PopFocusScope()
-	{
-		ImGuiDebug.Log("igPopFocusScope #1");
-		ImGuiNative.igPopFocusScope();
-	}
-
-	public static void PopFont()
-	{
-		ImGuiDebug.Log("igPopFont #1");
-		ImGuiNative.igPopFont();
-	}
-
-	public static void PopID()
-	{
-		ImGuiDebug.Log("igPopID #1");
-		ImGuiNative.igPopID();
-	}
-
-	public static void PopItemFlag()
-	{
-		ImGuiDebug.Log("igPopItemFlag #1");
-		ImGuiNative.igPopItemFlag();
-	}
-
-	public static void PopItemWidth()
-	{
-		ImGuiDebug.Log("igPopItemWidth #1");
-		ImGuiNative.igPopItemWidth();
-	}
-
-	public static void PopStyleColor()
-	{
-		ImGuiDebug.Log("igPopStyleColor #1");
-		ImGuiNative.igPopStyleColor(1);
-	}
-
-	public static void PopStyleColor(int count)
-	{
-		ImGuiDebug.Log("igPopStyleColor #2");
-		ImGuiNative.igPopStyleColor(count);
-	}
-
-	public static void PopStyleVar()
-	{
-		ImGuiDebug.Log("igPopStyleVar #1");
-		ImGuiNative.igPopStyleVar(1);
-	}
-
-	public static void PopStyleVar(int count)
-	{
-		ImGuiDebug.Log("igPopStyleVar #2");
-		ImGuiNative.igPopStyleVar(count);
-	}
-
-	public static void PopTextWrapPos()
-	{
-		ImGuiDebug.Log("igPopTextWrapPos #1");
-		ImGuiNative.igPopTextWrapPos();
-	}
-
-	public unsafe static void ProgressBar(float fraction)
-	{
-		Vector2 size_arg = new Vector2(float.MaxValue, 0f);
-		ImGuiDebug.Log("igProgressBar #1");
-		ImGuiNative.igProgressBar(fraction, size_arg, null);
-	}
-
-	public unsafe static void ProgressBar(float fraction, Vector2 size_arg)
-	{
-		ImGuiDebug.Log("igProgressBar #2");
-		ImGuiNative.igProgressBar(fraction, size_arg, null);
-	}
-
-	public unsafe static void ProgressBar(float fraction, string overlay)
-	{
-		Vector2 size_arg = new Vector2(float.MaxValue, 0f);
-		int num = 0;
-		byte* ptr;
-		if (overlay == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(overlay);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(overlay, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igProgressBar #3");
-		ImGuiNative.igProgressBar(fraction, size_arg, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void ProgressBar(float fraction, Vector2 size_arg, string overlay)
-	{
-		int num = 0;
-		byte* ptr;
-		if (overlay == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(overlay);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(overlay, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igProgressBar #4");
-		ImGuiNative.igProgressBar(fraction, size_arg, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void PushAllowKeyboardFocus(bool allow_keyboard_focus)
-	{
-		byte allow_keyboard_focus2 = MarshalUtils.bool_to_byte(allow_keyboard_focus);
-		ImGuiDebug.Log("igPushAllowKeyboardFocus #1");
-		ImGuiNative.igPushAllowKeyboardFocus(allow_keyboard_focus2);
-	}
-
-	public static void PushButtonRepeat(bool repeat)
-	{
-		byte repeat2 = MarshalUtils.bool_to_byte(repeat);
-		ImGuiDebug.Log("igPushButtonRepeat #1");
-		ImGuiNative.igPushButtonRepeat(repeat2);
-	}
-
-	public static void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, bool intersect_with_current_clip_rect)
-	{
-		byte intersect_with_current_clip_rect2 = MarshalUtils.bool_to_byte(intersect_with_current_clip_rect);
-		ImGuiDebug.Log("igPushClipRect #1");
-		ImGuiNative.igPushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect2);
-	}
-
-	public static void PushColumnClipRect(int column_index)
-	{
-		ImGuiDebug.Log("igPushColumnClipRect #1");
-		ImGuiNative.igPushColumnClipRect(column_index);
-	}
-
-	public static void PushColumnsBackground()
-	{
-		ImGuiDebug.Log("igPushColumnsBackground #1");
-		ImGuiNative.igPushColumnsBackground();
-	}
-
-	public static void PushFocusScope(uint id)
-	{
-		ImGuiDebug.Log("igPushFocusScope #1");
-		ImGuiNative.igPushFocusScope(id);
-	}
-
-	public unsafe static void PushFont(ImFontPtr font)
-	{
-		ImGuiDebug.Log("igPushFont #1");
-		ImGuiNative.igPushFont(font);
-	}
-
-	public unsafe static void PushID(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igPushID_Str #1");
-		ImGuiNative.igPushID_Str(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void PushID(string str_id_begin, string str_id_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id_begin == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id_begin);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id_begin, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_id_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_id_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_id_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igPushID_StrStr #2");
-		ImGuiNative.igPushID_StrStr(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void PushID(IntPtr ptr_id)
-	{
-		ImGuiDebug.Log("igPushID_Ptr #3");
-		ImGuiNative.igPushID_Ptr(ptr_id);
-	}
-
-	public static void PushID(int int_id)
-	{
-		ImGuiDebug.Log("igPushID_Int #4");
-		ImGuiNative.igPushID_Int(int_id);
-	}
-
-	public static void PushItemFlag(ImGuiItemFlags option, bool enabled)
-	{
-		byte enabled2 = MarshalUtils.bool_to_byte(enabled);
-		ImGuiDebug.Log("igPushItemFlag #1");
-		ImGuiNative.igPushItemFlag(option, enabled2);
-	}
-
-	public static void PushItemWidth(float item_width)
-	{
-		ImGuiDebug.Log("igPushItemWidth #1");
-		ImGuiNative.igPushItemWidth(item_width);
-	}
-
-	public static void PushMultiItemsWidths(int components, float width_full)
-	{
-		ImGuiDebug.Log("igPushMultiItemsWidths #1");
-		ImGuiNative.igPushMultiItemsWidths(components, width_full);
-	}
-
-	public static void PushOverrideID(uint id)
-	{
-		ImGuiDebug.Log("igPushOverrideID #1");
-		ImGuiNative.igPushOverrideID(id);
-	}
-
-	public static void PushStyleColor(ImGuiCol idx, uint col)
-	{
-		ImGuiDebug.Log("igPushStyleColor_U32 #1");
-		ImGuiNative.igPushStyleColor_U32(idx, col);
-	}
-
-	public static void PushStyleColor(ImGuiCol idx, Vector4 col)
-	{
-		ImGuiDebug.Log("igPushStyleColor_Vec4 #2");
-		ImGuiNative.igPushStyleColor_Vec4(idx, col);
-	}
-
-	public static void PushStyleVar(ImGuiStyleVar idx, float val)
-	{
-		ImGuiDebug.Log("igPushStyleVar_Float #1");
-		ImGuiNative.igPushStyleVar_Float(idx, val);
-	}
-
-	public static void PushStyleVar(ImGuiStyleVar idx, Vector2 val)
-	{
-		ImGuiDebug.Log("igPushStyleVar_Vec2 #2");
-		ImGuiNative.igPushStyleVar_Vec2(idx, val);
-	}
-
-	public static void PushTextWrapPos()
-	{
-		ImGuiDebug.Log("igPushTextWrapPos #1");
-		ImGuiNative.igPushTextWrapPos(0f);
-	}
-
-	public static void PushTextWrapPos(float wrap_local_pos_x)
-	{
-		ImGuiDebug.Log("igPushTextWrapPos #2");
-		ImGuiNative.igPushTextWrapPos(wrap_local_pos_x);
-	}
-
-	public unsafe static bool RadioButton(string label, bool active)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte active2 = MarshalUtils.bool_to_byte(active);
-		ImGuiDebug.Log("igRadioButton_Bool #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igRadioButton_Bool(ptr, active2));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool RadioButton(string label, ref int v, int v_button)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			ImGuiDebug.Log("igRadioButton_IntPtr #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igRadioButton_IntPtr(ptr, v2, v_button));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void RemoveContextHook(IntPtr context, uint hook_to_remove)
-	{
-		ImGuiDebug.Log("igRemoveContextHook #1");
-		ImGuiNative.igRemoveContextHook(context, hook_to_remove);
-	}
-
-	public unsafe static void RemoveSettingsHandler(string type_name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type_name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type_name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type_name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igRemoveSettingsHandler #1");
-		ImGuiNative.igRemoveSettingsHandler(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void Render()
-	{
-		ImGuiDebug.Log("igRender #1");
-		ImGuiNative.igRender();
-	}
-
-	public unsafe static void RenderArrow(ImDrawListPtr draw_list, Vector2 pos, uint col, ImGuiDir dir)
-	{
-		ImGuiDebug.Log("igRenderArrow #1");
-		ImGuiNative.igRenderArrow(draw_list, pos, col, dir, 1f);
-	}
-
-	public unsafe static void RenderArrow(ImDrawListPtr draw_list, Vector2 pos, uint col, ImGuiDir dir, float scale)
-	{
-		ImGuiDebug.Log("igRenderArrow #2");
-		ImGuiNative.igRenderArrow(draw_list, pos, col, dir, scale);
-	}
-
-	public unsafe static void RenderArrowPointingAt(ImDrawListPtr draw_list, Vector2 pos, Vector2 half_sz, ImGuiDir direction, uint col)
-	{
-		ImGuiDebug.Log("igRenderArrowPointingAt #1");
-		ImGuiNative.igRenderArrowPointingAt(draw_list, pos, half_sz, direction, col);
-	}
-
-	public unsafe static void RenderBullet(ImDrawListPtr draw_list, Vector2 pos, uint col)
-	{
-		ImGuiDebug.Log("igRenderBullet #1");
-		ImGuiNative.igRenderBullet(draw_list, pos, col);
-	}
-
-	public unsafe static void RenderCheckMark(ImDrawListPtr draw_list, Vector2 pos, uint col, float sz)
-	{
-		ImGuiDebug.Log("igRenderCheckMark #1");
-		ImGuiNative.igRenderCheckMark(draw_list, pos, col, sz);
-	}
-
-	public unsafe static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off)
-	{
-		ImGuiDebug.Log("igRenderColorRectWithAlphaCheckerboard #1");
-		ImGuiNative.igRenderColorRectWithAlphaCheckerboard(draw_list, p_min, p_max, fill_col, grid_step, grid_off, 0f, ImDrawFlags.None);
-	}
-
-	public unsafe static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off, float rounding)
-	{
-		ImGuiDebug.Log("igRenderColorRectWithAlphaCheckerboard #2");
-		ImGuiNative.igRenderColorRectWithAlphaCheckerboard(draw_list, p_min, p_max, fill_col, grid_step, grid_off, rounding, ImDrawFlags.None);
-	}
-
-	public unsafe static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("igRenderColorRectWithAlphaCheckerboard #3");
-		ImGuiNative.igRenderColorRectWithAlphaCheckerboard(draw_list, p_min, p_max, fill_col, grid_step, grid_off, 0f, flags);
-	}
-
-	public unsafe static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off, float rounding, ImDrawFlags flags)
-	{
-		ImGuiDebug.Log("igRenderColorRectWithAlphaCheckerboard #4");
-		ImGuiNative.igRenderColorRectWithAlphaCheckerboard(draw_list, p_min, p_max, fill_col, grid_step, grid_off, rounding, flags);
-	}
-
-	public static void RenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col)
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igRenderFrame #1");
-		ImGuiNative.igRenderFrame(p_min, p_max, fill_col, border, 0f);
-	}
-
-	public static void RenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col, bool border)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igRenderFrame #2");
-		ImGuiNative.igRenderFrame(p_min, p_max, fill_col, border2, 0f);
-	}
-
-	public static void RenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col, float rounding)
-	{
-		byte border = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igRenderFrame #3");
-		ImGuiNative.igRenderFrame(p_min, p_max, fill_col, border, rounding);
-	}
-
-	public static void RenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col, bool border, float rounding)
-	{
-		byte border2 = MarshalUtils.bool_to_byte(border);
-		ImGuiDebug.Log("igRenderFrame #4");
-		ImGuiNative.igRenderFrame(p_min, p_max, fill_col, border2, rounding);
-	}
-
-	public static void RenderFrameBorder(Vector2 p_min, Vector2 p_max)
-	{
-		ImGuiDebug.Log("igRenderFrameBorder #1");
-		ImGuiNative.igRenderFrameBorder(p_min, p_max, 0f);
-	}
-
-	public static void RenderFrameBorder(Vector2 p_min, Vector2 p_max, float rounding)
-	{
-		ImGuiDebug.Log("igRenderFrameBorder #2");
-		ImGuiNative.igRenderFrameBorder(p_min, p_max, rounding);
-	}
-
-	public static void RenderMouseCursor(Vector2 pos, float scale, ImGuiMouseCursor mouse_cursor, uint col_fill, uint col_border, uint col_shadow)
-	{
-		ImGuiDebug.Log("igRenderMouseCursor #1");
-		ImGuiNative.igRenderMouseCursor(pos, scale, mouse_cursor, col_fill, col_border, col_shadow);
-	}
-
-	public static void RenderNavHighlight(Rect bb, uint id)
-	{
-		ImGuiDebug.Log("igRenderNavHighlight #1");
-		ImGuiNative.igRenderNavHighlight(bb, id, ImGuiNavHighlightFlags.TypeDefault);
-	}
-
-	public static void RenderNavHighlight(Rect bb, uint id, ImGuiNavHighlightFlags flags)
-	{
-		ImGuiDebug.Log("igRenderNavHighlight #2");
-		ImGuiNative.igRenderNavHighlight(bb, id, flags);
-	}
-
-	public unsafe static void RenderRectFilledRangeH(ImDrawListPtr draw_list, Rect rect, uint col, float x_start_norm, float x_end_norm, float rounding)
-	{
-		ImGuiDebug.Log("igRenderRectFilledRangeH #1");
-		ImGuiNative.igRenderRectFilledRangeH(draw_list, rect, col, x_start_norm, x_end_norm, rounding);
-	}
-
-	public unsafe static void RenderRectFilledWithHole(ImDrawListPtr draw_list, Rect outer, Rect inner, uint col, float rounding)
-	{
-		ImGuiDebug.Log("igRenderRectFilledWithHole #1");
-		ImGuiNative.igRenderRectFilledWithHole(draw_list, outer, inner, col, rounding);
-	}
-
-	public unsafe static void RenderText(Vector2 pos, string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_hash = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igRenderText #1");
-		ImGuiNative.igRenderText(pos, ptr, null, hide_text_after_hash);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderText(Vector2 pos, string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_hash = MarshalUtils.bool_to_byte(inBool: true);
-		ImGuiDebug.Log("igRenderText #2");
-		ImGuiNative.igRenderText(pos, ptr, ptr2, hide_text_after_hash);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderText(Vector2 pos, string text, bool hide_text_after_hash)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte hide_text_after_hash2 = MarshalUtils.bool_to_byte(hide_text_after_hash);
-		ImGuiDebug.Log("igRenderText #3");
-		ImGuiNative.igRenderText(pos, ptr, null, hide_text_after_hash2);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderText(Vector2 pos, string text, string text_end, bool hide_text_after_hash)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		byte hide_text_after_hash2 = MarshalUtils.bool_to_byte(hide_text_after_hash);
-		ImGuiDebug.Log("igRenderText #4");
-		ImGuiNative.igRenderText(pos, ptr, ptr2, hide_text_after_hash2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClipped(Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			Vector2 align = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igRenderTextClipped #1");
-			ImGuiNative.igRenderTextClipped(pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, null);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClipped(Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, Vector2 align)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			ImGuiDebug.Log("igRenderTextClipped #2");
-			ImGuiNative.igRenderTextClipped(pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, null);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClipped(Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, ref Rect clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			Vector2 align = new Vector2(0f, 0f);
-			fixed (Rect* clip_rect2 = &clip_rect)
-			{
-				ImGuiDebug.Log("igRenderTextClipped #3");
-				ImGuiNative.igRenderTextClipped(pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, clip_rect2);
-			}
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClipped(Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, Vector2 align, ref Rect clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			fixed (Rect* clip_rect2 = &clip_rect)
-			{
-				ImGuiDebug.Log("igRenderTextClipped #4");
-				ImGuiNative.igRenderTextClipped(pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, clip_rect2);
-			}
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClippedEx(ImDrawListPtr draw_list, Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			Vector2 align = new Vector2(0f, 0f);
-			ImGuiDebug.Log("igRenderTextClippedEx #1");
-			ImGuiNative.igRenderTextClippedEx(draw_list, pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, null);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClippedEx(ImDrawListPtr draw_list, Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, Vector2 align)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			ImGuiDebug.Log("igRenderTextClippedEx #2");
-			ImGuiNative.igRenderTextClippedEx(draw_list, pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, null);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClippedEx(ImDrawListPtr draw_list, Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, ref Rect clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			Vector2 align = new Vector2(0f, 0f);
-			fixed (Rect* clip_rect2 = &clip_rect)
-			{
-				ImGuiDebug.Log("igRenderTextClippedEx #3");
-				ImGuiNative.igRenderTextClippedEx(draw_list, pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, clip_rect2);
-			}
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextClippedEx(ImDrawListPtr draw_list, Vector2 pos_min, Vector2 pos_max, string text, string text_end, ref Vector2 text_size_if_known, Vector2 align, ref Rect clip_rect)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			fixed (Rect* clip_rect2 = &clip_rect)
-			{
-				ImGuiDebug.Log("igRenderTextClippedEx #4");
-				ImGuiNative.igRenderTextClippedEx(draw_list, pos_min, pos_max, ptr, ptr2, text_size_if_known2, align, clip_rect2);
-			}
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextEllipsis(ImDrawListPtr draw_list, Vector2 pos_min, Vector2 pos_max, float clip_max_x, float ellipsis_max_x, string text, string text_end, ref Vector2 text_size_if_known)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		fixed (Vector2* text_size_if_known2 = &text_size_if_known)
-		{
-			ImGuiDebug.Log("igRenderTextEllipsis #1");
-			ImGuiNative.igRenderTextEllipsis(draw_list, pos_min, pos_max, clip_max_x, ellipsis_max_x, ptr, ptr2, text_size_if_known2);
-		}
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void RenderTextWrapped(Vector2 pos, string text, string text_end, float wrap_width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igRenderTextWrapped #1");
-		ImGuiNative.igRenderTextWrapped(pos, ptr, ptr2, wrap_width);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void ResetMouseDragDelta()
-	{
-		ImGuiDebug.Log("igResetMouseDragDelta #1");
-		ImGuiNative.igResetMouseDragDelta(ImGuiMouseButton.Left);
-	}
-
-	public static void ResetMouseDragDelta(ImGuiMouseButton button)
-	{
-		ImGuiDebug.Log("igResetMouseDragDelta #2");
-		ImGuiNative.igResetMouseDragDelta(button);
-	}
-
-	public static void SameLine()
-	{
-		ImGuiDebug.Log("igSameLine #1");
-		ImGuiNative.igSameLine(0f, -1f);
-	}
-
-	public static void SameLine(float offset_from_start_x)
-	{
-		ImGuiDebug.Log("igSameLine #2");
-		ImGuiNative.igSameLine(offset_from_start_x, -1f);
-	}
-
-	public static void SameLine(float offset_from_start_x, float spacing)
-	{
-		ImGuiDebug.Log("igSameLine #3");
-		ImGuiNative.igSameLine(offset_from_start_x, spacing);
-	}
-
-	public unsafe static void SaveIniSettingsToDisk(string ini_filename)
-	{
-		int num = 0;
-		byte* ptr;
-		if (ini_filename == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(ini_filename);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(ini_filename, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSaveIniSettingsToDisk #1");
-		ImGuiNative.igSaveIniSettingsToDisk(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static string SaveIniSettingsToMemory()
-	{
-		ImGuiDebug.Log("igSaveIniSettingsToMemory #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igSaveIniSettingsToMemory(null));
-	}
-
-	public unsafe static string SaveIniSettingsToMemory(out uint out_ini_size)
-	{
-		string result;
-		fixed (uint* out_ini_size2 = &out_ini_size)
-		{
-			ImGuiDebug.Log("igSaveIniSettingsToMemory #2");
-			result = MarshalUtils.bytePointer_to_string(ImGuiNative.igSaveIniSettingsToMemory(out_ini_size2));
-		}
-		return result;
-	}
-
-	public unsafe static void ScrollToBringRectIntoView(ImGuiWindowPtr window, Rect rect)
-	{
-		ImGuiDebug.Log("igScrollToBringRectIntoView #1");
-		ImGuiNative.igScrollToBringRectIntoView(window, rect);
-	}
-
-	public static void ScrollToItem()
-	{
-		ImGuiDebug.Log("igScrollToItem #1");
-		ImGuiNative.igScrollToItem(ImGuiScrollFlags.None);
-	}
-
-	public static void ScrollToItem(ImGuiScrollFlags flags)
-	{
-		ImGuiDebug.Log("igScrollToItem #2");
-		ImGuiNative.igScrollToItem(flags);
-	}
-
-	public unsafe static void ScrollToRect(ImGuiWindowPtr window, Rect rect)
-	{
-		ImGuiDebug.Log("igScrollToRect #1");
-		ImGuiNative.igScrollToRect(window, rect, ImGuiScrollFlags.None);
-	}
-
-	public unsafe static void ScrollToRect(ImGuiWindowPtr window, Rect rect, ImGuiScrollFlags flags)
-	{
-		ImGuiDebug.Log("igScrollToRect #2");
-		ImGuiNative.igScrollToRect(window, rect, flags);
-	}
-
-	public unsafe static Vector2 ScrollToRectEx(ImGuiWindowPtr window, Rect rect)
-	{
-		ImGuiDebug.Log("igScrollToRectEx #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igScrollToRectEx(&result, window, rect, ImGuiScrollFlags.None);
-		return result;
-	}
-
-	public unsafe static Vector2 ScrollToRectEx(ImGuiWindowPtr window, Rect rect, ImGuiScrollFlags flags)
-	{
-		ImGuiDebug.Log("igScrollToRectEx #2");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igScrollToRectEx(&result, window, rect, flags);
-		return result;
-	}
-
-	public static void Scrollbar(ImGuiAxis axis)
-	{
-		ImGuiDebug.Log("igScrollbar #1");
-		ImGuiNative.igScrollbar(axis);
-	}
-
-	public unsafe static bool ScrollbarEx(Rect bb, uint id, ImGuiAxis axis, ref long p_scroll_v, long avail_v, long contents_v, ImDrawFlags flags)
-	{
-		bool result;
-		fixed (long* p_scroll_v2 = &p_scroll_v)
-		{
-			ImGuiDebug.Log("igScrollbarEx #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igScrollbarEx(bb, id, axis, p_scroll_v2, avail_v, contents_v, flags));
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_Bool #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected, ImGuiSelectableFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, bool selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_Bool #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected2, ImGuiSelectableFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ImGuiSelectableFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_Bool #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igSelectable_Bool #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected, ImGuiSelectableFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, bool selected, ImGuiSelectableFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_Bool #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected2, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, bool selected, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		ImGuiDebug.Log("igSelectable_Bool #6");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected2, ImGuiSelectableFlags.None, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ImGuiSelectableFlags flags, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("igSelectable_Bool #7");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, bool selected, ImGuiSelectableFlags flags, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte selected2 = MarshalUtils.bool_to_byte(selected);
-		ImGuiDebug.Log("igSelectable_Bool #8");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_Bool(ptr, selected2, flags, size));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ref bool p_selected)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_BoolPtr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_BoolPtr(ptr, p_selected2, ImGuiSelectableFlags.None, size));
-		p_selected = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		Vector2 size = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSelectable_BoolPtr #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_BoolPtr(ptr, p_selected2, flags, size));
-		p_selected = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ref bool p_selected, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		ImGuiDebug.Log("igSelectable_BoolPtr #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_BoolPtr(ptr, p_selected2, ImGuiSelectableFlags.None, size));
-		p_selected = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_selected);
-		byte* p_selected2 = &b;
-		ImGuiDebug.Log("igSelectable_BoolPtr #5");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSelectable_BoolPtr(ptr, p_selected2, flags, size));
-		p_selected = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void Separator()
-	{
-		ImGuiDebug.Log("igSeparator #1");
-		ImGuiNative.igSeparator();
-	}
-
-	public static void SeparatorEx(ImGuiSeparatorFlags flags)
-	{
-		ImGuiDebug.Log("igSeparatorEx #1");
-		ImGuiNative.igSeparatorEx(flags);
-	}
-
-	public unsafe static void SetActiveID(uint id, ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igSetActiveID #1");
-		ImGuiNative.igSetActiveID(id, window);
-	}
-
-	public static void SetActiveIdUsingKey(ImGuiKey key)
-	{
-		ImGuiDebug.Log("igSetActiveIdUsingKey #1");
-		ImGuiNative.igSetActiveIdUsingKey(key);
-	}
-
-	public static void SetActiveIdUsingNavAndKeys()
-	{
-		ImGuiDebug.Log("igSetActiveIdUsingNavAndKeys #1");
-		ImGuiNative.igSetActiveIdUsingNavAndKeys();
-	}
-
-	public unsafe static void SetClipboardText(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetClipboardText #1");
-		ImGuiNative.igSetClipboardText(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void SetColorEditOptions(ImGuiColorEditFlags flags)
-	{
-		ImGuiDebug.Log("igSetColorEditOptions #1");
-		ImGuiNative.igSetColorEditOptions(flags);
-	}
-
-	public static void SetColumnOffset(int column_index, float offset_x)
-	{
-		ImGuiDebug.Log("igSetColumnOffset #1");
-		ImGuiNative.igSetColumnOffset(column_index, offset_x);
-	}
-
-	public static void SetColumnWidth(int column_index, float width)
-	{
-		ImGuiDebug.Log("igSetColumnWidth #1");
-		ImGuiNative.igSetColumnWidth(column_index, width);
-	}
-
-	public static void SetCurrentContext(IntPtr ctx)
-	{
-		ImGuiDebug.Log("igSetCurrentContext #1");
-		ImGuiNative.igSetCurrentContext(ctx);
-	}
-
-	public unsafe static void SetCurrentFont(ImFontPtr font)
-	{
-		ImGuiDebug.Log("igSetCurrentFont #1");
-		ImGuiNative.igSetCurrentFont(font);
-	}
-
-	public static void SetCursorPos(Vector2 local_pos)
-	{
-		ImGuiDebug.Log("igSetCursorPos #1");
-		ImGuiNative.igSetCursorPos(local_pos);
-	}
-
-	public static void SetCursorPosX(float local_x)
-	{
-		ImGuiDebug.Log("igSetCursorPosX #1");
-		ImGuiNative.igSetCursorPosX(local_x);
-	}
-
-	public static void SetCursorPosY(float local_y)
-	{
-		ImGuiDebug.Log("igSetCursorPosY #1");
-		ImGuiNative.igSetCursorPosY(local_y);
-	}
-
-	public static void SetCursorScreenPos(Vector2 pos)
-	{
-		ImGuiDebug.Log("igSetCursorScreenPos #1");
-		ImGuiNative.igSetCursorScreenPos(pos);
-	}
-
-	public unsafe static bool SetDragDropPayload(string type, IntPtr data, uint sz)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetDragDropPayload #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSetDragDropPayload(ptr, data, sz, ImGuiCond.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SetDragDropPayload(string type, IntPtr data, uint sz, ImGuiCond cond)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetDragDropPayload #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSetDragDropPayload(ptr, data, sz, cond));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void SetFocusID(uint id, ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igSetFocusID #1");
-		ImGuiNative.igSetFocusID(id, window);
-	}
-
-	public static void SetHoveredID(uint id)
-	{
-		ImGuiDebug.Log("igSetHoveredID #1");
-		ImGuiNative.igSetHoveredID(id);
-	}
-
-	public static void SetItemAllowOverlap()
-	{
-		ImGuiDebug.Log("igSetItemAllowOverlap #1");
-		ImGuiNative.igSetItemAllowOverlap();
-	}
-
-	public static void SetItemDefaultFocus()
-	{
-		ImGuiDebug.Log("igSetItemDefaultFocus #1");
-		ImGuiNative.igSetItemDefaultFocus();
-	}
-
-	public static void SetItemUsingMouseWheel()
-	{
-		ImGuiDebug.Log("igSetItemUsingMouseWheel #1");
-		ImGuiNative.igSetItemUsingMouseWheel();
-	}
-
-	public static void SetKeyboardFocusHere()
-	{
-		ImGuiDebug.Log("igSetKeyboardFocusHere #1");
-		ImGuiNative.igSetKeyboardFocusHere(0);
-	}
-
-	public static void SetKeyboardFocusHere(int offset)
-	{
-		ImGuiDebug.Log("igSetKeyboardFocusHere #2");
-		ImGuiNative.igSetKeyboardFocusHere(offset);
-	}
-
-	public static void SetLastItemData(uint item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, Rect item_rect)
-	{
-		ImGuiDebug.Log("igSetLastItemData #1");
-		ImGuiNative.igSetLastItemData(item_id, in_flags, status_flags, item_rect);
-	}
-
-	public static void SetMouseCursor(ImGuiMouseCursor cursor_type)
-	{
-		ImGuiDebug.Log("igSetMouseCursor #1");
-		ImGuiNative.igSetMouseCursor(cursor_type);
-	}
-
-	public static void SetNavID(uint id, ImGuiNavLayer nav_layer, uint focus_scope_id, Rect rect_rel)
-	{
-		ImGuiDebug.Log("igSetNavID #1");
-		ImGuiNative.igSetNavID(id, nav_layer, focus_scope_id, rect_rel);
-	}
-
-	public unsafe static void SetNavWindow(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igSetNavWindow #1");
-		ImGuiNative.igSetNavWindow(window);
-	}
-
-	public static void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
-	{
-		byte want_capture_keyboard2 = MarshalUtils.bool_to_byte(want_capture_keyboard);
-		ImGuiDebug.Log("igSetNextFrameWantCaptureKeyboard #1");
-		ImGuiNative.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard2);
-	}
-
-	public static void SetNextFrameWantCaptureMouse(bool want_capture_mouse)
-	{
-		byte want_capture_mouse2 = MarshalUtils.bool_to_byte(want_capture_mouse);
-		ImGuiDebug.Log("igSetNextFrameWantCaptureMouse #1");
-		ImGuiNative.igSetNextFrameWantCaptureMouse(want_capture_mouse2);
-	}
-
-	public static void SetNextItemOpen(bool is_open)
-	{
-		byte is_open2 = MarshalUtils.bool_to_byte(is_open);
-		ImGuiDebug.Log("igSetNextItemOpen #1");
-		ImGuiNative.igSetNextItemOpen(is_open2, ImGuiCond.None);
-	}
-
-	public static void SetNextItemOpen(bool is_open, ImGuiCond cond)
-	{
-		byte is_open2 = MarshalUtils.bool_to_byte(is_open);
-		ImGuiDebug.Log("igSetNextItemOpen #2");
-		ImGuiNative.igSetNextItemOpen(is_open2, cond);
-	}
-
-	public static void SetNextItemWidth(float item_width)
-	{
-		ImGuiDebug.Log("igSetNextItemWidth #1");
-		ImGuiNative.igSetNextItemWidth(item_width);
-	}
-
-	public static void SetNextWindowBgAlpha(float alpha)
-	{
-		ImGuiDebug.Log("igSetNextWindowBgAlpha #1");
-		ImGuiNative.igSetNextWindowBgAlpha(alpha);
-	}
-
-	public static void SetNextWindowCollapsed(bool collapsed)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetNextWindowCollapsed #1");
-		ImGuiNative.igSetNextWindowCollapsed(collapsed2, ImGuiCond.None);
-	}
-
-	public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetNextWindowCollapsed #2");
-		ImGuiNative.igSetNextWindowCollapsed(collapsed2, cond);
-	}
-
-	public static void SetNextWindowContentSize(Vector2 size)
-	{
-		ImGuiDebug.Log("igSetNextWindowContentSize #1");
-		ImGuiNative.igSetNextWindowContentSize(size);
-	}
-
-	public static void SetNextWindowFocus()
-	{
-		ImGuiDebug.Log("igSetNextWindowFocus #1");
-		ImGuiNative.igSetNextWindowFocus();
-	}
-
-	public static void SetNextWindowPos(Vector2 pos)
-	{
-		Vector2 pivot = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSetNextWindowPos #1");
-		ImGuiNative.igSetNextWindowPos(pos, ImGuiCond.None, pivot);
-	}
-
-	public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond)
-	{
-		Vector2 pivot = new Vector2(0f, 0f);
-		ImGuiDebug.Log("igSetNextWindowPos #2");
-		ImGuiNative.igSetNextWindowPos(pos, cond, pivot);
-	}
-
-	public static void SetNextWindowPos(Vector2 pos, Vector2 pivot)
-	{
-		ImGuiDebug.Log("igSetNextWindowPos #3");
-		ImGuiNative.igSetNextWindowPos(pos, ImGuiCond.None, pivot);
-	}
-
-	public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot)
-	{
-		ImGuiDebug.Log("igSetNextWindowPos #4");
-		ImGuiNative.igSetNextWindowPos(pos, cond, pivot);
-	}
-
-	public static void SetNextWindowScroll(Vector2 scroll)
-	{
-		ImGuiDebug.Log("igSetNextWindowScroll #1");
-		ImGuiNative.igSetNextWindowScroll(scroll);
-	}
-
-	public static void SetNextWindowSize(Vector2 size)
-	{
-		ImGuiDebug.Log("igSetNextWindowSize #1");
-		ImGuiNative.igSetNextWindowSize(size, ImGuiCond.None);
-	}
-
-	public static void SetNextWindowSize(Vector2 size, ImGuiCond cond)
-	{
-		ImGuiDebug.Log("igSetNextWindowSize #2");
-		ImGuiNative.igSetNextWindowSize(size, cond);
-	}
-
-	public static void SetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max)
-	{
-		ImGuiDebug.Log("igSetNextWindowSizeConstraints #1");
-		ImGuiNative.igSetNextWindowSizeConstraints(size_min, size_max, null, IntPtr.Zero);
-	}
-
-	public static void SetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, ImGuiSizeCallback? custom_callback)
-	{
-		ImGuiDebug.Log("igSetNextWindowSizeConstraints #2");
-		ImGuiNative.igSetNextWindowSizeConstraints(size_min, size_max, custom_callback, IntPtr.Zero);
-	}
-
-	public static void SetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, IntPtr custom_callback_data)
-	{
-		ImGuiDebug.Log("igSetNextWindowSizeConstraints #3");
-		ImGuiNative.igSetNextWindowSizeConstraints(size_min, size_max, null, custom_callback_data);
-	}
-
-	public static void SetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, ImGuiSizeCallback? custom_callback, IntPtr custom_callback_data)
-	{
-		ImGuiDebug.Log("igSetNextWindowSizeConstraints #4");
-		ImGuiNative.igSetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data);
-	}
-
-	public static void SetScrollFromPosX(float local_x)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosX_Float #1");
-		ImGuiNative.igSetScrollFromPosX_Float(local_x, 0.5f);
-	}
-
-	public static void SetScrollFromPosX(float local_x, float center_x_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosX_Float #2");
-		ImGuiNative.igSetScrollFromPosX_Float(local_x, center_x_ratio);
-	}
-
-	public unsafe static void SetScrollFromPosX(ImGuiWindowPtr window, float local_x, float center_x_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosX_WindowPtr #2");
-		ImGuiNative.igSetScrollFromPosX_WindowPtr(window, local_x, center_x_ratio);
-	}
-
-	public static void SetScrollFromPosY(float local_y)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosY_Float #1");
-		ImGuiNative.igSetScrollFromPosY_Float(local_y, 0.5f);
-	}
-
-	public static void SetScrollFromPosY(float local_y, float center_y_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosY_Float #2");
-		ImGuiNative.igSetScrollFromPosY_Float(local_y, center_y_ratio);
-	}
-
-	public unsafe static void SetScrollFromPosY(ImGuiWindowPtr window, float local_y, float center_y_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollFromPosY_WindowPtr #2");
-		ImGuiNative.igSetScrollFromPosY_WindowPtr(window, local_y, center_y_ratio);
-	}
-
-	public static void SetScrollHereX()
-	{
-		ImGuiDebug.Log("igSetScrollHereX #1");
-		ImGuiNative.igSetScrollHereX(0.5f);
-	}
-
-	public static void SetScrollHereX(float center_x_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollHereX #2");
-		ImGuiNative.igSetScrollHereX(center_x_ratio);
-	}
-
-	public static void SetScrollHereY()
-	{
-		ImGuiDebug.Log("igSetScrollHereY #1");
-		ImGuiNative.igSetScrollHereY(0.5f);
-	}
-
-	public static void SetScrollHereY(float center_y_ratio)
-	{
-		ImGuiDebug.Log("igSetScrollHereY #2");
-		ImGuiNative.igSetScrollHereY(center_y_ratio);
-	}
-
-	public static void SetScrollX(float scroll_x)
-	{
-		ImGuiDebug.Log("igSetScrollX_Float #1");
-		ImGuiNative.igSetScrollX_Float(scroll_x);
-	}
-
-	public unsafe static void SetScrollX(ImGuiWindowPtr window, float scroll_x)
-	{
-		ImGuiDebug.Log("igSetScrollX_WindowPtr #2");
-		ImGuiNative.igSetScrollX_WindowPtr(window, scroll_x);
-	}
-
-	public static void SetScrollY(float scroll_y)
-	{
-		ImGuiDebug.Log("igSetScrollY_Float #1");
-		ImGuiNative.igSetScrollY_Float(scroll_y);
-	}
-
-	public unsafe static void SetScrollY(ImGuiWindowPtr window, float scroll_y)
-	{
-		ImGuiDebug.Log("igSetScrollY_WindowPtr #2");
-		ImGuiNative.igSetScrollY_WindowPtr(window, scroll_y);
-	}
-
-	public unsafe static void SetStateStorage(ImGuiStoragePtr storage)
-	{
-		ImGuiDebug.Log("igSetStateStorage #1");
-		ImGuiNative.igSetStateStorage(storage);
-	}
-
-	public unsafe static void SetTabItemClosed(string tab_or_docked_window_label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (tab_or_docked_window_label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(tab_or_docked_window_label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(tab_or_docked_window_label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetTabItemClosed #1");
-		ImGuiNative.igSetTabItemClosed(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetTooltip(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetTooltip #1");
-		ImGuiNative.igSetTooltip(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetTooltipV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetTooltipV #1");
-		ImGuiNative.igSetTooltipV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowClipRectBeforeSetChannel(ImGuiWindowPtr window, Rect clip_rect)
-	{
-		ImGuiDebug.Log("igSetWindowClipRectBeforeSetChannel #1");
-		ImGuiNative.igSetWindowClipRectBeforeSetChannel(window, clip_rect);
-	}
-
-	public static void SetWindowCollapsed(bool collapsed)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_Bool #1");
-		ImGuiNative.igSetWindowCollapsed_Bool(collapsed2, ImGuiCond.None);
-	}
-
-	public static void SetWindowCollapsed(bool collapsed, ImGuiCond cond)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_Bool #2");
-		ImGuiNative.igSetWindowCollapsed_Bool(collapsed2, cond);
-	}
-
-	public unsafe static void SetWindowCollapsed(string name, bool collapsed)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_Str #2");
-		ImGuiNative.igSetWindowCollapsed_Str(ptr, collapsed2, ImGuiCond.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowCollapsed(string name, bool collapsed, ImGuiCond cond)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_Str #3");
-		ImGuiNative.igSetWindowCollapsed_Str(ptr, collapsed2, cond);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowCollapsed(ImGuiWindowPtr window, bool collapsed)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_WindowPtr #3");
-		ImGuiNative.igSetWindowCollapsed_WindowPtr(window, collapsed2, ImGuiCond.None);
-	}
-
-	public unsafe static void SetWindowCollapsed(ImGuiWindowPtr window, bool collapsed, ImGuiCond cond)
-	{
-		byte collapsed2 = MarshalUtils.bool_to_byte(collapsed);
-		ImGuiDebug.Log("igSetWindowCollapsed_WindowPtr #4");
-		ImGuiNative.igSetWindowCollapsed_WindowPtr(window, collapsed2, cond);
-	}
-
-	public static void SetWindowFocus()
-	{
-		ImGuiDebug.Log("igSetWindowFocus_Nil #1");
-		ImGuiNative.igSetWindowFocus_Nil();
-	}
-
-	public unsafe static void SetWindowFocus(string name)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetWindowFocus_Str #2");
-		ImGuiNative.igSetWindowFocus_Str(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void SetWindowFontScale(float scale)
-	{
-		ImGuiDebug.Log("igSetWindowFontScale #1");
-		ImGuiNative.igSetWindowFontScale(scale);
-	}
-
-	public unsafe static void SetWindowHitTestHole(ImGuiWindowPtr window, Vector2 pos, Vector2 size)
-	{
-		ImGuiDebug.Log("igSetWindowHitTestHole #1");
-		ImGuiNative.igSetWindowHitTestHole(window, pos, size);
-	}
-
-	public static void SetWindowPos(Vector2 pos)
-	{
-		ImGuiDebug.Log("igSetWindowPos_Vec2 #1");
-		ImGuiNative.igSetWindowPos_Vec2(pos, ImGuiCond.None);
-	}
-
-	public static void SetWindowPos(Vector2 pos, ImGuiCond cond)
-	{
-		ImGuiDebug.Log("igSetWindowPos_Vec2 #2");
-		ImGuiNative.igSetWindowPos_Vec2(pos, cond);
-	}
-
-	public unsafe static void SetWindowPos(string name, Vector2 pos)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetWindowPos_Str #2");
-		ImGuiNative.igSetWindowPos_Str(ptr, pos, ImGuiCond.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowPos(string name, Vector2 pos, ImGuiCond cond)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetWindowPos_Str #3");
-		ImGuiNative.igSetWindowPos_Str(ptr, pos, cond);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowPos(ImGuiWindowPtr window, Vector2 pos)
-	{
-		ImGuiDebug.Log("igSetWindowPos_WindowPtr #3");
-		ImGuiNative.igSetWindowPos_WindowPtr(window, pos, ImGuiCond.None);
-	}
-
-	public unsafe static void SetWindowPos(ImGuiWindowPtr window, Vector2 pos, ImGuiCond cond)
-	{
-		ImGuiDebug.Log("igSetWindowPos_WindowPtr #4");
-		ImGuiNative.igSetWindowPos_WindowPtr(window, pos, cond);
-	}
-
-	public static void SetWindowSize(Vector2 size)
-	{
-		ImGuiDebug.Log("igSetWindowSize_Vec2 #1");
-		ImGuiNative.igSetWindowSize_Vec2(size, ImGuiCond.None);
-	}
-
-	public static void SetWindowSize(Vector2 size, ImGuiCond cond)
-	{
-		ImGuiDebug.Log("igSetWindowSize_Vec2 #2");
-		ImGuiNative.igSetWindowSize_Vec2(size, cond);
-	}
-
-	public unsafe static void SetWindowSize(string name, Vector2 size)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetWindowSize_Str #2");
-		ImGuiNative.igSetWindowSize_Str(ptr, size, ImGuiCond.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowSize(string name, Vector2 size, ImGuiCond cond)
-	{
-		int num = 0;
-		byte* ptr;
-		if (name == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(name);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(name, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSetWindowSize_Str #3");
-		ImGuiNative.igSetWindowSize_Str(ptr, size, cond);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void SetWindowSize(ImGuiWindowPtr window, Vector2 size)
-	{
-		ImGuiDebug.Log("igSetWindowSize_WindowPtr #3");
-		ImGuiNative.igSetWindowSize_WindowPtr(window, size, ImGuiCond.None);
-	}
-
-	public unsafe static void SetWindowSize(ImGuiWindowPtr window, Vector2 size, ImGuiCond cond)
-	{
-		ImGuiDebug.Log("igSetWindowSize_WindowPtr #4");
-		ImGuiNative.igSetWindowSize_WindowPtr(window, size, cond);
-	}
-
-	public unsafe static void SetWindowViewport(ImGuiWindowPtr window, ImGuiViewportPPtr viewport)
-	{
-		ImGuiDebug.Log("igSetWindowViewport #1");
-		ImGuiNative.igSetWindowViewport(window, viewport);
-	}
-
-	public unsafe static void ShadeVertsLinearColorGradientKeepAlpha(ImDrawListPtr draw_list, int vert_start_idx, int vert_end_idx, Vector2 gradient_p0, Vector2 gradient_p1, uint col0, uint col1)
-	{
-		ImGuiDebug.Log("igShadeVertsLinearColorGradientKeepAlpha #1");
-		ImGuiNative.igShadeVertsLinearColorGradientKeepAlpha(draw_list, vert_start_idx, vert_end_idx, gradient_p0, gradient_p1, col0, col1);
-	}
-
-	public unsafe static void ShadeVertsLinearUV(ImDrawListPtr draw_list, int vert_start_idx, int vert_end_idx, Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, bool clamp)
-	{
-		byte clamp2 = MarshalUtils.bool_to_byte(clamp);
-		ImGuiDebug.Log("igShadeVertsLinearUV #1");
-		ImGuiNative.igShadeVertsLinearUV(draw_list, vert_start_idx, vert_end_idx, a, b, uv_a, uv_b, clamp2);
-	}
-
-	public unsafe static void ShowAboutWindow()
-	{
-		ImGuiDebug.Log("igShowAboutWindow #1");
-		ImGuiNative.igShowAboutWindow(null);
-	}
-
-	public unsafe static void ShowAboutWindow(ref bool p_open)
-	{
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igShowAboutWindow #2");
-		ImGuiNative.igShowAboutWindow(p_open2);
-		p_open = b != 0;
-	}
-
-	public unsafe static void ShowDebugLogWindow()
-	{
-		ImGuiDebug.Log("igShowDebugLogWindow #1");
-		ImGuiNative.igShowDebugLogWindow(null);
-	}
-
-	public unsafe static void ShowDebugLogWindow(ref bool p_open)
-	{
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igShowDebugLogWindow #2");
-		ImGuiNative.igShowDebugLogWindow(p_open2);
-		p_open = b != 0;
-	}
-
-	public unsafe static void ShowDemoWindow()
-	{
-		ImGuiDebug.Log("igShowDemoWindow #1");
-		ImGuiNative.igShowDemoWindow(null);
-	}
-
-	public unsafe static void ShowDemoWindow(ref bool p_open)
-	{
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igShowDemoWindow #2");
-		ImGuiNative.igShowDemoWindow(p_open2);
-		p_open = b != 0;
-	}
-
-	public unsafe static void ShowFontAtlas(ImFontAtlasPtr atlas)
-	{
-		ImGuiDebug.Log("igShowFontAtlas #1");
-		ImGuiNative.igShowFontAtlas(atlas);
-	}
-
-	public unsafe static void ShowFontSelector(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igShowFontSelector #1");
-		ImGuiNative.igShowFontSelector(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void ShowMetricsWindow()
-	{
-		ImGuiDebug.Log("igShowMetricsWindow #1");
-		ImGuiNative.igShowMetricsWindow(null);
-	}
-
-	public unsafe static void ShowMetricsWindow(ref bool p_open)
-	{
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igShowMetricsWindow #2");
-		ImGuiNative.igShowMetricsWindow(p_open2);
-		p_open = b != 0;
-	}
-
-	public unsafe static void ShowStackToolWindow()
-	{
-		ImGuiDebug.Log("igShowStackToolWindow #1");
-		ImGuiNative.igShowStackToolWindow(null);
-	}
-
-	public unsafe static void ShowStackToolWindow(ref bool p_open)
-	{
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igShowStackToolWindow #2");
-		ImGuiNative.igShowStackToolWindow(p_open2);
-		p_open = b != 0;
-	}
-
-	public unsafe static void ShowStyleEditor()
-	{
-		ImGuiDebug.Log("igShowStyleEditor #1");
-		ImGuiNative.igShowStyleEditor(null);
-	}
-
-	public unsafe static void ShowStyleEditor(ImGuiStylePtr @ref)
-	{
-		ImGuiDebug.Log("igShowStyleEditor #2");
-		ImGuiNative.igShowStyleEditor(@ref);
-	}
-
-	public unsafe static bool ShowStyleSelector(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igShowStyleSelector #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igShowStyleSelector(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void ShowUserGuide()
-	{
-		ImGuiDebug.Log("igShowUserGuide #1");
-		ImGuiNative.igShowUserGuide();
-	}
-
-	public unsafe static void ShrinkWidths(ImGuiShrinkWidthItemPtr items, int count, float width_excess)
-	{
-		ImGuiDebug.Log("igShrinkWidths #1");
-		ImGuiNative.igShrinkWidths(items, count, width_excess);
-	}
-
-	public static void Shutdown()
-	{
-		ImGuiDebug.Log("igShutdown #1");
-		ImGuiNative.igShutdown();
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, -360f, 360f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, 360f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, -360f, 360f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, -360f, 360f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #5");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, v_degrees_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #6");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, 360f, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #7");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, 360f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #8");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, -360f, 360f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #9");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, v_degrees_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.0f deg");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.0f deg", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderAngle #10");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, v_degrees_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #11");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, 360f, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v_rad2 = &v_rad)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderAngle #12");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderAngle(ptr, v_rad2, v_degrees_min, v_degrees_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderBehavior(Rect bb, uint id, ImGuiDataType data_type, IntPtr p_v, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags, out Rect out_grab_bb)
-	{
-		int num = 0;
-		byte* ptr;
-		if (format == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(format);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(format, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Rect* out_grab_bb2 = &out_grab_bb)
-		{
-			ImGuiDebug.Log("igSliderBehavior #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderBehavior(bb, id, data_type, p_v, p_min, p_max, ptr, flags, out_grab_bb2));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat(string label, ref float v, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat(string label, ref float v, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat2(string label, ref Vector2 v, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat2(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat2(string label, ref Vector2 v, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat2(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat2(string label, ref Vector2 v, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat2 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat2(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat2(string label, ref Vector2 v, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector2* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat2 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat2(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat3(string label, ref Vector3 v, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat3(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat3(string label, ref Vector3 v, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat3(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat3(string label, ref Vector3 v, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat3 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat3(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat3(string label, ref Vector3 v, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector3* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat3 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat3(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat4(string label, ref Vector4 v, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat4(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat4(string label, ref Vector4 v, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat4(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat4(string label, ref Vector4 v, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderFloat4 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat4(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderFloat4(string label, ref Vector4 v, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (Vector4* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderFloat4 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderFloat4(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt2(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt2 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt2(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt2(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt2 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt2(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt2(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt2 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt2(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt2(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt2 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt2(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt3(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt3 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt3(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt3(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt3 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt3(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt3(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt3 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt3(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt3(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt3 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt3(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt4(string label, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt4 #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt4(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt4(string label, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt4 #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt4(ptr, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt4(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igSliderInt4 #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt4(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderInt4(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igSliderInt4 #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderInt4(ptr, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalar #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalar(ptr, data_type, p_data, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalar #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalar(ptr, data_type, p_data, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalar #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalar(ptr, data_type, p_data, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalar #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalar(ptr, data_type, p_data, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalarN #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalarN(ptr, data_type, p_data, components, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalarN #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalarN(ptr, data_type, p_data, components, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalarN #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalarN(ptr, data_type, p_data, components, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igSliderScalarN #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSliderScalarN(ptr, data_type, p_data, components, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool SmallButton(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igSmallButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igSmallButton(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void Spacing()
-	{
-		ImGuiDebug.Log("igSpacing #1");
-		ImGuiNative.igSpacing();
-	}
-
-	public unsafe static bool SplitterBehavior(Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2)
-	{
-		bool result;
-		fixed (float* size3 = &size1)
-		{
-			fixed (float* size4 = &size2)
-			{
-				ImGuiDebug.Log("igSplitterBehavior #1");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igSplitterBehavior(bb, id, axis, size3, size4, min_size1, min_size2, 0f, 0f));
-			}
-		}
-		return result;
-	}
-
-	public unsafe static bool SplitterBehavior(Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2, float hover_extend)
-	{
-		bool result;
-		fixed (float* size3 = &size1)
-		{
-			fixed (float* size4 = &size2)
-			{
-				ImGuiDebug.Log("igSplitterBehavior #2");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igSplitterBehavior(bb, id, axis, size3, size4, min_size1, min_size2, hover_extend, 0f));
-			}
-		}
-		return result;
-	}
-
-	public unsafe static bool SplitterBehavior(Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)
-	{
-		bool result;
-		fixed (float* size3 = &size1)
-		{
-			fixed (float* size4 = &size2)
-			{
-				ImGuiDebug.Log("igSplitterBehavior #3");
-				result = MarshalUtils.byte_to_bool(ImGuiNative.igSplitterBehavior(bb, id, axis, size3, size4, min_size1, min_size2, hover_extend, hover_visibility_delay));
-			}
-		}
-		return result;
-	}
-
-	public unsafe static void StartMouseMovingWindow(ImGuiWindowPtr window)
-	{
-		ImGuiDebug.Log("igStartMouseMovingWindow #1");
-		ImGuiNative.igStartMouseMovingWindow(window);
-	}
-
-	public unsafe static void StyleColorsClassic()
-	{
-		ImGuiDebug.Log("igStyleColorsClassic #1");
-		ImGuiNative.igStyleColorsClassic(null);
-	}
-
-	public unsafe static void StyleColorsClassic(ImGuiStylePtr dst)
-	{
-		ImGuiDebug.Log("igStyleColorsClassic #2");
-		ImGuiNative.igStyleColorsClassic(dst);
-	}
-
-	public unsafe static void StyleColorsDark()
-	{
-		ImGuiDebug.Log("igStyleColorsDark #1");
-		ImGuiNative.igStyleColorsDark(null);
-	}
-
-	public unsafe static void StyleColorsDark(ImGuiStylePtr dst)
-	{
-		ImGuiDebug.Log("igStyleColorsDark #2");
-		ImGuiNative.igStyleColorsDark(dst);
-	}
-
-	public unsafe static void StyleColorsLight()
-	{
-		ImGuiDebug.Log("igStyleColorsLight #1");
-		ImGuiNative.igStyleColorsLight(null);
-	}
-
-	public unsafe static void StyleColorsLight(ImGuiStylePtr dst)
-	{
-		ImGuiDebug.Log("igStyleColorsLight #2");
-		ImGuiNative.igStyleColorsLight(dst);
-	}
-
-	public unsafe static void TabBarCloseTab(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab)
-	{
-		ImGuiDebug.Log("igTabBarCloseTab #1");
-		ImGuiNative.igTabBarCloseTab(tab_bar, tab);
-	}
-
-	public unsafe static ImGuiTabItemPtr TabBarFindTabByID(ImGuiTabBarPtr tab_bar, uint tab_id)
-	{
-		ImGuiDebug.Log("igTabBarFindTabByID #1");
-		ImGuiTabItem* nativePtr = ImGuiNative.igTabBarFindTabByID(tab_bar, tab_id);
-		return new ImGuiTabItemPtr(nativePtr);
-	}
-
-	public unsafe static bool TabBarProcessReorder(ImGuiTabBarPtr tab_bar)
-	{
-		ImGuiDebug.Log("igTabBarProcessReorder #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTabBarProcessReorder(tab_bar));
-	}
-
-	public unsafe static void TabBarQueueReorder(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab, int offset)
-	{
-		ImGuiDebug.Log("igTabBarQueueReorder #1");
-		ImGuiNative.igTabBarQueueReorder(tab_bar, tab, offset);
-	}
-
-	public unsafe static void TabBarQueueReorderFromMousePos(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab, Vector2 mouse_pos)
-	{
-		ImGuiDebug.Log("igTabBarQueueReorderFromMousePos #1");
-		ImGuiNative.igTabBarQueueReorderFromMousePos(tab_bar, tab, mouse_pos);
-	}
-
-	public unsafe static void TabBarRemoveTab(ImGuiTabBarPtr tab_bar, uint tab_id)
-	{
-		ImGuiDebug.Log("igTabBarRemoveTab #1");
-		ImGuiNative.igTabBarRemoveTab(tab_bar, tab_id);
-	}
-
-	public unsafe static void TabItemBackground(ImDrawListPtr draw_list, Rect bb, ImGuiTabItemFlags flags, uint col)
-	{
-		ImGuiDebug.Log("igTabItemBackground #1");
-		ImGuiNative.igTabItemBackground(draw_list, bb, flags, col);
-	}
-
-	public unsafe static bool TabItemButton(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTabItemButton #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTabItemButton(ptr, ImGuiTabItemFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TabItemButton(string label, ImGuiTabItemFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTabItemButton #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTabItemButton(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static Vector2 TabItemCalcSize(string label, bool has_close_button)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte has_close_button2 = MarshalUtils.bool_to_byte(has_close_button);
-		ImGuiDebug.Log("igTabItemCalcSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.igTabItemCalcSize(&result, ptr, has_close_button2);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TabItemEx(ImGuiTabBarPtr tab_bar, string label, ref bool p_open, ImGuiTabItemFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b = MarshalUtils.bool_to_byte(p_open);
-		byte* p_open2 = &b;
-		ImGuiDebug.Log("igTabItemEx #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTabItemEx(tab_bar, ptr, p_open2, flags));
-		p_open = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void TabItemLabelAndCloseButton(ImDrawListPtr draw_list, Rect bb, ImGuiTabItemFlags flags, Vector2 frame_padding, string label, uint tab_id, uint close_button_id, bool is_contents_visible, out bool out_just_closed, out bool out_text_clipped)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte is_contents_visible2 = MarshalUtils.bool_to_byte(is_contents_visible);
-		byte b = default(byte);
-		byte* out_just_closed2 = &b;
-		byte b2 = default(byte);
-		byte* out_text_clipped2 = &b2;
-		ImGuiDebug.Log("igTabItemLabelAndCloseButton #1");
-		ImGuiNative.igTabItemLabelAndCloseButton(draw_list, bb, flags, frame_padding, ptr, tab_id, close_button_id, is_contents_visible2, out_just_closed2, out_text_clipped2);
-		out_text_clipped = b2 != 0;
-		out_just_closed = b != 0;
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableBeginApplyRequests(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableBeginApplyRequests #1");
-		ImGuiNative.igTableBeginApplyRequests(table);
-	}
-
-	public unsafe static void TableBeginCell(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableBeginCell #1");
-		ImGuiNative.igTableBeginCell(table, column_n);
-	}
-
-	public unsafe static void TableBeginInitMemory(ImGuiTablePtr table, int columns_count)
-	{
-		ImGuiDebug.Log("igTableBeginInitMemory #1");
-		ImGuiNative.igTableBeginInitMemory(table, columns_count);
-	}
-
-	public unsafe static void TableBeginRow(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableBeginRow #1");
-		ImGuiNative.igTableBeginRow(table);
-	}
-
-	public unsafe static void TableDrawBorders(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableDrawBorders #1");
-		ImGuiNative.igTableDrawBorders(table);
-	}
-
-	public unsafe static void TableDrawContextMenu(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableDrawContextMenu #1");
-		ImGuiNative.igTableDrawContextMenu(table);
-	}
-
-	public unsafe static void TableEndCell(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableEndCell #1");
-		ImGuiNative.igTableEndCell(table);
-	}
-
-	public unsafe static void TableEndRow(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableEndRow #1");
-		ImGuiNative.igTableEndRow(table);
-	}
-
-	public unsafe static ImGuiTablePtr TableFindByID(uint id)
-	{
-		ImGuiDebug.Log("igTableFindByID #1");
-		ImGuiTable* nativePtr = ImGuiNative.igTableFindByID(id);
-		return new ImGuiTablePtr(nativePtr);
-	}
-
-	public unsafe static void TableFixColumnSortDirection(ImGuiTablePtr table, ImGuiTableColumnPtr column)
-	{
-		ImGuiDebug.Log("igTableFixColumnSortDirection #1");
-		ImGuiNative.igTableFixColumnSortDirection(table, column);
-	}
-
-	public static void TableGcCompactSettings()
-	{
-		ImGuiDebug.Log("igTableGcCompactSettings #1");
-		ImGuiNative.igTableGcCompactSettings();
-	}
-
-	public unsafe static void TableGcCompactTransientBuffers(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableGcCompactTransientBuffers_TablePtr #1");
-		ImGuiNative.igTableGcCompactTransientBuffers_TablePtr(table);
-	}
-
-	public unsafe static void TableGcCompactTransientBuffers(ImGuiTableTempDataPtr table)
-	{
-		ImGuiDebug.Log("igTableGcCompactTransientBuffers_TableTempDataPtr #2");
-		ImGuiNative.igTableGcCompactTransientBuffers_TableTempDataPtr(table);
-	}
-
-	public unsafe static ImGuiTableSettingsPtr TableGetBoundSettings(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableGetBoundSettings #1");
-		ImGuiTableSettings* nativePtr = ImGuiNative.igTableGetBoundSettings(table);
-		return new ImGuiTableSettingsPtr(nativePtr);
-	}
-
-	public unsafe static Rect TableGetCellBgRect(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableGetCellBgRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.igTableGetCellBgRect(&result, table, column_n);
-		return result;
-	}
-
-	public static int TableGetColumnCount()
-	{
-		ImGuiDebug.Log("igTableGetColumnCount #1");
-		return ImGuiNative.igTableGetColumnCount();
-	}
-
-	public static ImGuiTableColumnFlags TableGetColumnFlags()
-	{
-		ImGuiDebug.Log("igTableGetColumnFlags #1");
-		return ImGuiNative.igTableGetColumnFlags(-1);
-	}
-
-	public static ImGuiTableColumnFlags TableGetColumnFlags(int column_n)
-	{
-		ImGuiDebug.Log("igTableGetColumnFlags #2");
-		return ImGuiNative.igTableGetColumnFlags(column_n);
-	}
-
-	public static int TableGetColumnIndex()
-	{
-		ImGuiDebug.Log("igTableGetColumnIndex #1");
-		return ImGuiNative.igTableGetColumnIndex();
-	}
-
-	public unsafe static string TableGetColumnName()
-	{
-		ImGuiDebug.Log("igTableGetColumnName_Int #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igTableGetColumnName_Int(-1));
-	}
-
-	public unsafe static string TableGetColumnName(int column_n)
-	{
-		ImGuiDebug.Log("igTableGetColumnName_Int #2");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igTableGetColumnName_Int(column_n));
-	}
-
-	public unsafe static string TableGetColumnName(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableGetColumnName_TablePtr #2");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.igTableGetColumnName_TablePtr(table, column_n));
-	}
-
-	public unsafe static ImGuiSortDirection TableGetColumnNextSortDirection(ImGuiTableColumnPtr column)
-	{
-		ImGuiDebug.Log("igTableGetColumnNextSortDirection #1");
-		return ImGuiNative.igTableGetColumnNextSortDirection(column);
-	}
-
-	public unsafe static uint TableGetColumnResizeID(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableGetColumnResizeID #1");
-		return ImGuiNative.igTableGetColumnResizeID(table, column_n, 0);
-	}
-
-	public unsafe static uint TableGetColumnResizeID(ImGuiTablePtr table, int column_n, int instance_no)
-	{
-		ImGuiDebug.Log("igTableGetColumnResizeID #2");
-		return ImGuiNative.igTableGetColumnResizeID(table, column_n, instance_no);
-	}
-
-	public unsafe static float TableGetColumnWidthAuto(ImGuiTablePtr table, ImGuiTableColumnPtr column)
-	{
-		ImGuiDebug.Log("igTableGetColumnWidthAuto #1");
-		return ImGuiNative.igTableGetColumnWidthAuto(table, column);
-	}
-
-	public static float TableGetHeaderRowHeight()
-	{
-		ImGuiDebug.Log("igTableGetHeaderRowHeight #1");
-		return ImGuiNative.igTableGetHeaderRowHeight();
-	}
-
-	public static int TableGetHoveredColumn()
-	{
-		ImGuiDebug.Log("igTableGetHoveredColumn #1");
-		return ImGuiNative.igTableGetHoveredColumn();
-	}
-
-	public unsafe static ImGuiTableInstanceDataPtr TableGetInstanceData(ImGuiTablePtr table, int instance_no)
-	{
-		ImGuiDebug.Log("igTableGetInstanceData #1");
-		ImGuiTableInstanceData* nativePtr = ImGuiNative.igTableGetInstanceData(table, instance_no);
-		return new ImGuiTableInstanceDataPtr(nativePtr);
-	}
-
-	public unsafe static float TableGetMaxColumnWidth(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableGetMaxColumnWidth #1");
-		return ImGuiNative.igTableGetMaxColumnWidth(table, column_n);
-	}
-
-	public static int TableGetRowIndex()
-	{
-		ImGuiDebug.Log("igTableGetRowIndex #1");
-		return ImGuiNative.igTableGetRowIndex();
-	}
-
-	public unsafe static ImGuiTableSortSpecsPtr TableGetSortSpecs()
-	{
-		ImGuiDebug.Log("igTableGetSortSpecs #1");
-		ImGuiTableSortSpecs* nativePtr = ImGuiNative.igTableGetSortSpecs();
-		return new ImGuiTableSortSpecsPtr(nativePtr);
-	}
-
-	public unsafe static void TableHeader(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableHeader #1");
-		ImGuiNative.igTableHeader(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void TableHeadersRow()
-	{
-		ImGuiDebug.Log("igTableHeadersRow #1");
-		ImGuiNative.igTableHeadersRow();
-	}
-
-	public unsafe static void TableLoadSettings(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableLoadSettings #1");
-		ImGuiNative.igTableLoadSettings(table);
-	}
-
-	public unsafe static void TableMergeDrawChannels(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableMergeDrawChannels #1");
-		ImGuiNative.igTableMergeDrawChannels(table);
-	}
-
-	public static bool TableNextColumn()
-	{
-		ImGuiDebug.Log("igTableNextColumn #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTableNextColumn());
-	}
-
-	public static void TableNextRow()
-	{
-		ImGuiDebug.Log("igTableNextRow #1");
-		ImGuiNative.igTableNextRow(ImGuiTableRowFlags.None, 0f);
-	}
-
-	public static void TableNextRow(ImGuiTableRowFlags row_flags)
-	{
-		ImGuiDebug.Log("igTableNextRow #2");
-		ImGuiNative.igTableNextRow(row_flags, 0f);
-	}
-
-	public static void TableNextRow(float min_row_height)
-	{
-		ImGuiDebug.Log("igTableNextRow #3");
-		ImGuiNative.igTableNextRow(ImGuiTableRowFlags.None, min_row_height);
-	}
-
-	public static void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height)
-	{
-		ImGuiDebug.Log("igTableNextRow #4");
-		ImGuiNative.igTableNextRow(row_flags, min_row_height);
-	}
-
-	public static void TableOpenContextMenu()
-	{
-		ImGuiDebug.Log("igTableOpenContextMenu #1");
-		ImGuiNative.igTableOpenContextMenu(-1);
-	}
-
-	public static void TableOpenContextMenu(int column_n)
-	{
-		ImGuiDebug.Log("igTableOpenContextMenu #2");
-		ImGuiNative.igTableOpenContextMenu(column_n);
-	}
-
-	public static void TablePopBackgroundChannel()
-	{
-		ImGuiDebug.Log("igTablePopBackgroundChannel #1");
-		ImGuiNative.igTablePopBackgroundChannel();
-	}
-
-	public static void TablePushBackgroundChannel()
-	{
-		ImGuiDebug.Log("igTablePushBackgroundChannel #1");
-		ImGuiNative.igTablePushBackgroundChannel();
-	}
-
-	public unsafe static void TableRemove(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableRemove #1");
-		ImGuiNative.igTableRemove(table);
-	}
-
-	public unsafe static void TableResetSettings(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableResetSettings #1");
-		ImGuiNative.igTableResetSettings(table);
-	}
-
-	public unsafe static void TableSaveSettings(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableSaveSettings #1");
-		ImGuiNative.igTableSaveSettings(table);
-	}
-
-	public static void TableSetBgColor(ImGuiTableBgTarget target, uint color)
-	{
-		ImGuiDebug.Log("igTableSetBgColor #1");
-		ImGuiNative.igTableSetBgColor(target, color, -1);
-	}
-
-	public static void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n)
-	{
-		ImGuiDebug.Log("igTableSetBgColor #2");
-		ImGuiNative.igTableSetBgColor(target, color, column_n);
-	}
-
-	public static void TableSetColumnEnabled(int column_n, bool v)
-	{
-		byte v2 = MarshalUtils.bool_to_byte(v);
-		ImGuiDebug.Log("igTableSetColumnEnabled #1");
-		ImGuiNative.igTableSetColumnEnabled(column_n, v2);
-	}
-
-	public static bool TableSetColumnIndex(int column_n)
-	{
-		ImGuiDebug.Log("igTableSetColumnIndex #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTableSetColumnIndex(column_n));
-	}
-
-	public static void TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
-	{
-		byte append_to_sort_specs2 = MarshalUtils.bool_to_byte(append_to_sort_specs);
-		ImGuiDebug.Log("igTableSetColumnSortDirection #1");
-		ImGuiNative.igTableSetColumnSortDirection(column_n, sort_direction, append_to_sort_specs2);
-	}
-
-	public static void TableSetColumnWidth(int column_n, float width)
-	{
-		ImGuiDebug.Log("igTableSetColumnWidth #1");
-		ImGuiNative.igTableSetColumnWidth(column_n, width);
-	}
-
-	public unsafe static void TableSetColumnWidthAutoAll(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableSetColumnWidthAutoAll #1");
-		ImGuiNative.igTableSetColumnWidthAutoAll(table);
-	}
-
-	public unsafe static void TableSetColumnWidthAutoSingle(ImGuiTablePtr table, int column_n)
-	{
-		ImGuiDebug.Log("igTableSetColumnWidthAutoSingle #1");
-		ImGuiNative.igTableSetColumnWidthAutoSingle(table, column_n);
-	}
-
-	public static void TableSettingsAddSettingsHandler()
-	{
-		ImGuiDebug.Log("igTableSettingsAddSettingsHandler #1");
-		ImGuiNative.igTableSettingsAddSettingsHandler();
-	}
-
-	public unsafe static ImGuiTableSettingsPtr TableSettingsCreate(uint id, int columns_count)
-	{
-		ImGuiDebug.Log("igTableSettingsCreate #1");
-		ImGuiTableSettings* nativePtr = ImGuiNative.igTableSettingsCreate(id, columns_count);
-		return new ImGuiTableSettingsPtr(nativePtr);
-	}
-
-	public unsafe static ImGuiTableSettingsPtr TableSettingsFindByID(uint id)
-	{
-		ImGuiDebug.Log("igTableSettingsFindByID #1");
-		ImGuiTableSettings* nativePtr = ImGuiNative.igTableSettingsFindByID(id);
-		return new ImGuiTableSettingsPtr(nativePtr);
-	}
-
-	public unsafe static void TableSetupColumn(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #1");
-		ImGuiNative.igTableSetupColumn(ptr, ImGuiTableColumnFlags.None, 0f, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, ImGuiTableColumnFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #2");
-		ImGuiNative.igTableSetupColumn(ptr, flags, 0f, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, float init_width_or_weight)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #3");
-		ImGuiNative.igTableSetupColumn(ptr, ImGuiTableColumnFlags.None, init_width_or_weight, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, uint user_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #4");
-		ImGuiNative.igTableSetupColumn(ptr, ImGuiTableColumnFlags.None, 0f, user_id);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, float init_width_or_weight)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #5");
-		ImGuiNative.igTableSetupColumn(ptr, flags, init_width_or_weight, 0u);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, uint user_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #6");
-		ImGuiNative.igTableSetupColumn(ptr, flags, 0f, user_id);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, float init_width_or_weight, uint user_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #7");
-		ImGuiNative.igTableSetupColumn(ptr, ImGuiTableColumnFlags.None, init_width_or_weight, user_id);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTableSetupColumn #8");
-		ImGuiNative.igTableSetupColumn(ptr, flags, init_width_or_weight, user_id);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TableSetupDrawChannels(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableSetupDrawChannels #1");
-		ImGuiNative.igTableSetupDrawChannels(table);
-	}
-
-	public static void TableSetupScrollFreeze(int cols, int rows)
-	{
-		ImGuiDebug.Log("igTableSetupScrollFreeze #1");
-		ImGuiNative.igTableSetupScrollFreeze(cols, rows);
-	}
-
-	public unsafe static void TableSortSpecsBuild(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableSortSpecsBuild #1");
-		ImGuiNative.igTableSortSpecsBuild(table);
-	}
-
-	public unsafe static void TableSortSpecsSanitize(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableSortSpecsSanitize #1");
-		ImGuiNative.igTableSortSpecsSanitize(table);
-	}
-
-	public unsafe static void TableUpdateBorders(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableUpdateBorders #1");
-		ImGuiNative.igTableUpdateBorders(table);
-	}
-
-	public unsafe static void TableUpdateColumnsWeightFromWidth(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableUpdateColumnsWeightFromWidth #1");
-		ImGuiNative.igTableUpdateColumnsWeightFromWidth(table);
-	}
-
-	public unsafe static void TableUpdateLayout(ImGuiTablePtr table)
-	{
-		ImGuiDebug.Log("igTableUpdateLayout #1");
-		ImGuiNative.igTableUpdateLayout(table);
-	}
-
-	public static bool TempInputIsActive(uint id)
-	{
-		ImGuiDebug.Log("igTempInputIsActive #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTempInputIsActive(id));
-	}
-
-	public unsafe static bool TempInputScalar(Rect bb, uint id, string label, ImGuiDataType data_type, IntPtr p_data, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTempInputScalar #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTempInputScalar(bb, id, ptr, data_type, p_data, ptr2, IntPtr.Zero, IntPtr.Zero));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TempInputScalar(Rect bb, uint id, string label, ImGuiDataType data_type, IntPtr p_data, string format, IntPtr p_clamp_min)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTempInputScalar #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTempInputScalar(bb, id, ptr, data_type, p_data, ptr2, p_clamp_min, IntPtr.Zero));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TempInputScalar(Rect bb, uint id, string label, ImGuiDataType data_type, IntPtr p_data, string format, IntPtr p_clamp_min, IntPtr p_clamp_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTempInputScalar #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTempInputScalar(bb, id, ptr, data_type, p_data, ptr2, p_clamp_min, p_clamp_max));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TempInputText(Rect bb, uint id, string label, ref byte buf, int buf_size, ImGuiInputTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (byte* buf2 = &buf)
-		{
-			ImGuiDebug.Log("igTempInputText #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igTempInputText(bb, id, ptr, buf2, buf_size, flags));
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void Text(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igText #1");
-		ImGuiNative.igText(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextColored(Vector4 col, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextColored #1");
-		ImGuiNative.igTextColored(col, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextColoredV(Vector4 col, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextColoredV #1");
-		ImGuiNative.igTextColoredV(col, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextDisabled(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextDisabled #1");
-		ImGuiNative.igTextDisabled(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextDisabledV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextDisabledV #1");
-		ImGuiNative.igTextDisabledV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextEx(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextEx #1");
-		ImGuiNative.igTextEx(ptr, null, ImGuiTextFlags.None);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextEx(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTextEx #2");
-		ImGuiNative.igTextEx(ptr, ptr2, ImGuiTextFlags.None);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextEx(string text, ImGuiTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextEx #3");
-		ImGuiNative.igTextEx(ptr, null, flags);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextEx(string text, string text_end, ImGuiTextFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTextEx #4");
-		ImGuiNative.igTextEx(ptr, ptr2, flags);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextUnformatted(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextUnformatted #1");
-		ImGuiNative.igTextUnformatted(ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextUnformatted(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTextUnformatted #2");
-		ImGuiNative.igTextUnformatted(ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextV #1");
-		ImGuiNative.igTextV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextWrapped(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextWrapped #1");
-		ImGuiNative.igTextWrapped(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void TextWrappedV(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTextWrappedV #1");
-		ImGuiNative.igTextWrappedV(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static bool TreeNode(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNode_Str #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNode_Str(ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNode(string str_id, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTreeNode_StrStr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNode_StrStr(ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNode(IntPtr ptr_id, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNode_Ptr #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNode_Ptr(ptr_id, ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeBehavior #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeBehavior(id, flags, ptr, null));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, string label, string label_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (label_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(label_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(label_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeBehavior #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeBehavior(id, flags, ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static bool TreeNodeBehaviorIsOpen(uint id)
-	{
-		ImGuiDebug.Log("igTreeNodeBehaviorIsOpen #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeBehaviorIsOpen(id, ImGuiTreeNodeFlags.None));
-	}
-
-	public static bool TreeNodeBehaviorIsOpen(uint id, ImGuiTreeNodeFlags flags)
-	{
-		ImGuiDebug.Log("igTreeNodeBehaviorIsOpen #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeBehaviorIsOpen(id, flags));
-	}
-
-	public unsafe static bool TreeNodeEx(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeEx_Str #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeEx_Str(ptr, ImGuiTreeNodeFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeEx(string label, ImGuiTreeNodeFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeEx_Str #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeEx_Str(ptr, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeEx(string str_id, ImGuiTreeNodeFlags flags, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeEx_StrStr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeEx_StrStr(ptr, flags, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeEx(IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeEx_Ptr #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeEx_Ptr(ptr_id, flags, ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeExV(string str_id, ImGuiTreeNodeFlags flags, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeExV_Str #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeExV_Str(ptr, flags, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeExV(IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeExV_Ptr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeExV_Ptr(ptr_id, flags, ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeV(string str_id, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (fmt == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(fmt);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(fmt, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeV_Str #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeV_Str(ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool TreeNodeV(IntPtr ptr_id, string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreeNodeV_Ptr #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igTreeNodeV_Ptr(ptr_id, ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public static void TreePop()
-	{
-		ImGuiDebug.Log("igTreePop #1");
-		ImGuiNative.igTreePop();
-	}
-
-	public unsafe static void TreePush(string str_id)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str_id == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str_id);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str_id, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igTreePush_Str #1");
-		ImGuiNative.igTreePush_Str(ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public static void TreePush()
-	{
-		ImGuiDebug.Log("igTreePush_Ptr #2");
-		ImGuiNative.igTreePush_Ptr(IntPtr.Zero);
-	}
-
-	public static void TreePush(IntPtr ptr_id)
-	{
-		ImGuiDebug.Log("igTreePush_Ptr #3");
-		ImGuiNative.igTreePush_Ptr(ptr_id);
-	}
-
-	public static void TreePushOverrideID(uint id)
-	{
-		ImGuiDebug.Log("igTreePushOverrideID #1");
-		ImGuiNative.igTreePushOverrideID(id);
-	}
-
-	public static void Unindent()
-	{
-		ImGuiDebug.Log("igUnindent #1");
-		ImGuiNative.igUnindent(0f);
-	}
-
-	public static void Unindent(float indent_w)
-	{
-		ImGuiDebug.Log("igUnindent #2");
-		ImGuiNative.igUnindent(indent_w);
-	}
-
-	public static void UpdateHoveredWindowAndCaptureFlags()
-	{
-		ImGuiDebug.Log("igUpdateHoveredWindowAndCaptureFlags #1");
-		ImGuiNative.igUpdateHoveredWindowAndCaptureFlags();
-	}
-
-	public static void UpdateInputEvents(bool trickle_fast_inputs)
-	{
-		byte trickle_fast_inputs2 = MarshalUtils.bool_to_byte(trickle_fast_inputs);
-		ImGuiDebug.Log("igUpdateInputEvents #1");
-		ImGuiNative.igUpdateInputEvents(trickle_fast_inputs2);
-	}
-
-	public static void UpdateMouseMovingWindowEndFrame()
-	{
-		ImGuiDebug.Log("igUpdateMouseMovingWindowEndFrame #1");
-		ImGuiNative.igUpdateMouseMovingWindowEndFrame();
-	}
-
-	public static void UpdateMouseMovingWindowNewFrame()
-	{
-		ImGuiDebug.Log("igUpdateMouseMovingWindowNewFrame #1");
-		ImGuiNative.igUpdateMouseMovingWindowNewFrame();
-	}
-
-	public unsafe static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ImGuiWindowPtr parent_window)
-	{
-		ImGuiDebug.Log("igUpdateWindowParentAndRootLinks #1");
-		ImGuiNative.igUpdateWindowParentAndRootLinks(window, flags, parent_window);
-	}
-
-	public unsafe static bool VSliderFloat(string label, Vector2 size, ref float v, float v_min, float v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igVSliderFloat #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderFloat(ptr, size, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderFloat(string label, Vector2 size, ref float v, float v_min, float v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igVSliderFloat #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderFloat(ptr, size, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderFloat(string label, Vector2 size, ref float v, float v_min, float v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%.3f");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%.3f", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igVSliderFloat #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderFloat(ptr, size, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderFloat(string label, Vector2 size, ref float v, float v_min, float v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (float* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igVSliderFloat #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderFloat(ptr, size, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderInt(string label, Vector2 size, ref int v, int v_min, int v_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igVSliderInt #1");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderInt(ptr, size, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderInt(string label, Vector2 size, ref int v, int v_min, int v_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igVSliderInt #2");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderInt(ptr, size, v2, v_min, v_max, ptr2, ImGuiSliderFlags.None));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderInt(string label, Vector2 size, ref int v, int v_min, int v_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			num2 = MarshalUtils.GetByteCount("%d");
-			byte* ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8("%d", ptr2, num2);
-			ptr2[utf2] = 0;
-			ImGuiDebug.Log("igVSliderInt #3");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderInt(ptr, size, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderInt(string label, Vector2 size, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		bool result;
-		fixed (int* v2 = &v)
-		{
-			int num2 = 0;
-			byte* ptr2;
-			if (format == null)
-			{
-				ptr2 = null;
-			}
-			else
-			{
-				num2 = MarshalUtils.GetByteCount(format);
-				ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-				int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-				ptr2[utf2] = 0;
-			}
-			ImGuiDebug.Log("igVSliderInt #4");
-			result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderInt(ptr, size, v2, v_min, v_max, ptr2, flags));
-			if (num2 > 2048)
-			{
-				MarshalUtils.Free(ptr2);
-			}
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderScalar(string label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igVSliderScalar #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderScalar(ptr, size, data_type, p_data, p_min, p_max, null, ImGuiSliderFlags.None));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderScalar(string label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igVSliderScalar #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderScalar(ptr, size, data_type, p_data, p_min, p_max, ptr2, ImGuiSliderFlags.None));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderScalar(string label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igVSliderScalar #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderScalar(ptr, size, data_type, p_data, p_min, p_max, null, flags));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static bool VSliderScalar(string label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format, ImGuiSliderFlags flags)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igVSliderScalar #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.igVSliderScalar(ptr, size, data_type, p_data, p_min, p_max, ptr2, flags));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe static void Value(string prefix, bool b)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		byte b2 = MarshalUtils.bool_to_byte(b);
-		ImGuiDebug.Log("igValue_Bool #1");
-		ImGuiNative.igValue_Bool(ptr, b2);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Value(string prefix, int v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igValue_Int #2");
-		ImGuiNative.igValue_Int(ptr, v);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Value(string prefix, uint v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igValue_Uint #3");
-		ImGuiNative.igValue_Uint(ptr, v);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Value(string prefix, float v)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("igValue_Float #4");
-		ImGuiNative.igValue_Float(ptr, v, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static void Value(string prefix, float v, string float_format)
-	{
-		int num = 0;
-		byte* ptr;
-		if (prefix == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(prefix);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(prefix, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (float_format == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(float_format);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(float_format, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("igValue_Float #5");
-		ImGuiNative.igValue_Float(ptr, v, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe static Rect WindowRectAbsToRel(ImGuiWindowPtr window, Rect r)
-	{
-		ImGuiDebug.Log("igWindowRectAbsToRel #1");
-		Rect result = default(Rect);
-		ImGuiNative.igWindowRectAbsToRel(&result, window, r);
-		return result;
-	}
-
-	public unsafe static Rect WindowRectRelToAbs(ImGuiWindowPtr window, Rect r)
-	{
-		ImGuiDebug.Log("igWindowRectRelToAbs #1");
-		Rect result = default(Rect);
-		ImGuiNative.igWindowRectRelToAbs(&result, window, r);
-		return result;
-	}
-
-	public unsafe static ImGuiInputTextCallback CreateInputTextCallback(ImGuiInputTextSafeCallback callback)
-	{
-		return delegate(ImGuiInputTextCallbackData* data)
-		{
-			try
-			{
-				return callback(data);
-			}
-			catch (Exception exception)
-			{
-				Debug.LogException(exception);
-				return -1;
-			}
-		};
-	}
-
-	public unsafe static ImGuiSizeCallback CreateSizeCallback(ImGuiSizeSafeCallback callback)
-	{
-		return delegate(ImGuiSizeCallbackData* data)
-		{
-			try
-			{
-				callback(data);
-			}
-			catch (Exception exception)
-			{
-				Debug.LogException(exception);
-			}
-		};
-	}
-
-	public unsafe static void SetDragDropPayload<T>(string type, T data, ImGuiCond cond = ImGuiCond.None) where T : unmanaged
-	{
-		void* value = Unsafe.AsPointer(ref data);
-		SetDragDropPayload(type, new IntPtr(value), (uint)Unsafe.SizeOf<T>(), cond);
-	}
-
-	public unsafe static bool AcceptDragDropPayload<T>(string type, out T payload, ImGuiDragDropFlags flags = ImGuiDragDropFlags.None) where T : unmanaged
-	{
-		ImGuiPayload* ptr = AcceptDragDropPayload(type, flags);
-		payload = ((ptr != null) ? Unsafe.Read<T>(ptr->Data) : default(T));
-		return ptr != null;
-	}
-
-	public unsafe static void SetDragDropPayload(string type, string data, ImGuiCond cond = ImGuiCond.None)
-	{
-		fixed (char* chars = data)
-		{
-			int byteCount = Encoding.Default.GetByteCount(data);
-			byte* ptr = stackalloc byte[(int)(uint)byteCount];
-			Encoding.Default.GetBytes(chars, data.Length, ptr, byteCount);
-			SetDragDropPayload(type, new IntPtr(ptr), (uint)byteCount, cond);
-		}
-	}
-
-	public unsafe static bool AcceptDragDropPayload(string type, out string? payload, ImGuiDragDropFlags flags = ImGuiDragDropFlags.None)
-	{
-		ImGuiPayload* ptr = AcceptDragDropPayload(type, flags);
-		payload = ((ptr != null) ? Encoding.Default.GetString((byte*)ptr->Data, ptr->DataSize) : null);
-		return ptr != null;
-	}
-
-	public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength)
-	{
-		return InputTextWithHint(label, hint, ref input, maxLength, ImGuiInputTextFlags.None, null, IntPtr.Zero);
-	}
-
-	public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags)
-	{
-		return InputTextWithHint(label, hint, ref input, maxLength, flags, null, IntPtr.Zero);
-	}
-
-	public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		return InputTextWithHint(label, hint, ref input, maxLength, flags, callback, IntPtr.Zero);
-	}
-
-	public unsafe static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int byteCount = Encoding.UTF8.GetByteCount(label);
-		byte* ptr = ((byteCount <= 2048) ? stackalloc byte[(int)(uint)(byteCount + 1)] : Util.Allocate(byteCount + 1));
-		Util.GetUtf8(label, ptr, byteCount);
-		int byteCount2 = Encoding.UTF8.GetByteCount(hint);
-		byte* ptr2 = ((byteCount2 <= 2048) ? stackalloc byte[(int)(uint)(byteCount2 + 1)] : Util.Allocate(byteCount2 + 1));
-		Util.GetUtf8(hint, ptr2, byteCount2);
-		int byteCount3 = Encoding.UTF8.GetByteCount(input);
-		int num = Math.Max((int)(maxLength + 1), byteCount3 + 1);
-		byte* ptr3;
-		byte* ptr4;
-		if (num > 2048)
-		{
-			ptr3 = Util.Allocate(num);
-			ptr4 = Util.Allocate(num);
-		}
-		else
-		{
-			ptr3 = stackalloc byte[(int)(uint)num];
-			ptr4 = stackalloc byte[(int)(uint)num];
-		}
-		Util.GetUtf8(input, ptr3, num);
-		uint byteCount4 = (uint)(num - byteCount3);
-		Unsafe.InitBlockUnaligned(ptr3 + byteCount3, 0, byteCount4);
-		Unsafe.CopyBlock(ptr4, ptr3, (uint)num);
-		byte b = ImGuiNative.igInputTextWithHint(ptr, ptr2, ptr3, (uint)num, flags, callback, user_data);
-		if (!Util.AreStringsEqual(ptr4, num, ptr3))
-		{
-			input = Util.StringFromPtr(ptr3);
-		}
-		if (byteCount > 2048)
-		{
-			Util.Free(ptr);
-		}
-		if (num > 2048)
-		{
-			Util.Free(ptr3);
-			Util.Free(ptr4);
-		}
-		return b != 0;
-	}
-
-	public static bool InputText(string label, byte[] buf, uint buf_size)
-	{
-		return InputText(label, buf, buf_size, ImGuiInputTextFlags.None, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, byte[] buf, uint buf_size, ImGuiInputTextFlags flags)
-	{
-		return InputText(label, buf, buf_size, flags, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, byte[] buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		return InputText(label, buf, buf_size, flags, callback, IntPtr.Zero);
-	}
-
-	public unsafe static bool InputText(string label, byte[] buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int byteCount = Encoding.UTF8.GetByteCount(label);
-		byte* ptr = ((byteCount <= 2048) ? stackalloc byte[(int)(uint)(byteCount + 1)] : Util.Allocate(byteCount + 1));
-		Util.GetUtf8(label, ptr, byteCount);
-		bool result;
-		fixed (byte* buf2 = buf)
-		{
-			result = ImGuiNative.igInputText(ptr, buf2, buf_size, flags, callback, user_data) != 0;
-		}
-		if (byteCount > 2048)
-		{
-			Util.Free(ptr);
-		}
-		return result;
-	}
-
-	public static bool InputText(string label, ref string input, uint maxLength)
-	{
-		return InputText(label, ref input, maxLength, ImGuiInputTextFlags.None, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags)
-	{
-		return InputText(label, ref input, maxLength, flags, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		return InputText(label, ref input, maxLength, flags, callback, IntPtr.Zero);
-	}
-
-	public unsafe static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int byteCount = Encoding.UTF8.GetByteCount(label);
-		byte* ptr = ((byteCount <= 2048) ? stackalloc byte[(int)(uint)(byteCount + 1)] : Util.Allocate(byteCount + 1));
-		Util.GetUtf8(label, ptr, byteCount);
-		int byteCount2 = Encoding.UTF8.GetByteCount(input);
-		int num = Math.Max((int)(maxLength + 1), byteCount2 + 1);
-		byte* ptr2;
-		byte* ptr3;
-		if (num > 2048)
-		{
-			ptr2 = Util.Allocate(num);
-			ptr3 = Util.Allocate(num);
-		}
-		else
-		{
-			ptr2 = stackalloc byte[(int)(uint)num];
-			ptr3 = stackalloc byte[(int)(uint)num];
-		}
-		Util.GetUtf8(input, ptr2, num);
-		uint byteCount3 = (uint)(num - byteCount2);
-		Unsafe.InitBlockUnaligned(ptr2 + byteCount2, 0, byteCount3);
-		Unsafe.CopyBlock(ptr3, ptr2, (uint)num);
-		byte b = ImGuiNative.igInputText(ptr, ptr2, (uint)num, flags, callback, user_data);
-		if (!Util.AreStringsEqual(ptr3, num, ptr2))
-		{
-			input = Util.StringFromPtr(ptr2);
-		}
-		if (byteCount > 2048)
-		{
-			Util.Free(ptr);
-		}
-		if (num > 2048)
-		{
-			Util.Free(ptr2);
-			Util.Free(ptr3);
-		}
-		return b != 0;
-	}
-
-	public static bool InputTextMultiline(string label, ref string input, uint maxLength, Vector2 size)
-	{
-		return InputTextMultiline(label, ref input, maxLength, size, ImGuiInputTextFlags.None, null, IntPtr.Zero);
-	}
-
-	public static bool InputTextMultiline(string label, ref string input, uint maxLength, Vector2 size, ImGuiInputTextFlags flags)
-	{
-		return InputTextMultiline(label, ref input, maxLength, size, flags, null, IntPtr.Zero);
-	}
-
-	public static bool InputTextMultiline(string label, ref string input, uint maxLength, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		return InputTextMultiline(label, ref input, maxLength, size, flags, callback, IntPtr.Zero);
-	}
-
-	public unsafe static bool InputTextMultiline(string label, ref string input, uint maxLength, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int byteCount = Encoding.UTF8.GetByteCount(label);
-		byte* ptr = ((byteCount <= 2048) ? stackalloc byte[(int)(uint)(byteCount + 1)] : Util.Allocate(byteCount + 1));
-		Util.GetUtf8(label, ptr, byteCount);
-		int byteCount2 = Encoding.UTF8.GetByteCount(input);
-		int num = Math.Max((int)(maxLength + 1), byteCount2 + 1);
-		byte* ptr2;
-		byte* ptr3;
-		if (num > 2048)
-		{
-			ptr2 = Util.Allocate(num);
-			ptr3 = Util.Allocate(num);
-		}
-		else
-		{
-			ptr2 = stackalloc byte[(int)(uint)num];
-			ptr3 = stackalloc byte[(int)(uint)num];
-		}
-		Util.GetUtf8(input, ptr2, num);
-		uint byteCount3 = (uint)(num - byteCount2);
-		Unsafe.InitBlockUnaligned(ptr2 + byteCount2, 0, byteCount3);
-		Unsafe.CopyBlock(ptr3, ptr2, (uint)num);
-		byte b = ImGuiNative.igInputTextMultiline(ptr, ptr2, (uint)num, size, flags, callback, user_data);
-		if (!Util.AreStringsEqual(ptr3, num, ptr2))
-		{
-			input = Util.StringFromPtr(ptr2);
-		}
-		if (byteCount > 2048)
-		{
-			Util.Free(ptr);
-		}
-		if (num > 2048)
-		{
-			Util.Free(ptr2);
-			Util.Free(ptr3);
-		}
-		return b != 0;
-	}
-
-	public static bool InputText(string label, IntPtr buf, uint buf_size)
-	{
-		return InputText(label, buf, buf_size, ImGuiInputTextFlags.None, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, IntPtr buf, uint buf_size, ImGuiInputTextFlags flags)
-	{
-		return InputText(label, buf, buf_size, flags, null, IntPtr.Zero);
-	}
-
-	public static bool InputText(string label, IntPtr buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback)
-	{
-		return InputText(label, buf, buf_size, flags, callback, IntPtr.Zero);
-	}
-
-	public unsafe static bool InputText(string label, IntPtr buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data)
-	{
-		int byteCount = Encoding.UTF8.GetByteCount(label);
-		byte* ptr = ((byteCount <= 2048) ? stackalloc byte[(int)(uint)(byteCount + 1)] : Util.Allocate(byteCount + 1));
-		Util.GetUtf8(label, ptr, byteCount);
-		bool result = ImGuiNative.igInputText(ptr, (byte*)buf.ToPointer(), buf_size, flags, callback, user_data) != 0;
-		if (byteCount > 2048)
-		{
-			Util.Free(ptr);
-		}
-		return result;
-	}
+  public struct ImBitArray
+  {
+  }
+  public struct ImBitArrayPtr
+  {
+    public unsafe ImBitArray* NativePtr { get => default; }
+    public void ClearAllBits() { }
+    public void ClearBit(int n) { }
+    public void SetAllBits() { }
+    public void SetBit(int n) { }
+    public void SetBitRange(int n, int n2) { }
+    public bool TestBit(int n) { return default; }
+    public void ImBitArray_destroy() { }
+  }
+  public struct ImColor
+  {
+    public UnityEngine.Vector4 Value;
+  }
+  public struct ImColorPtr
+  {
+    public unsafe ImColor* NativePtr { get => default; }
+    public ref UnityEngine.Vector4 Value { get => ref __0; }
+    public static ImColorPtr HSV(float h, float s, float v) { return default; }
+    public static ImColorPtr HSV(float h, float s, float v, float a) { return default; }
+    public void SetHSV(float h, float s, float v) { }
+    public void SetHSV(float h, float s, float v, float a) { }
+    public void ImColor_destroy() { }
+    internal static UnityEngine.Vector4 __0;
+  }
+  public struct ImDrawChannel
+  {
+    public ImVector _CmdBuffer;
+    public ImVector _IdxBuffer;
+  }
+  public struct ImDrawChannelPtr
+  {
+    public unsafe ImDrawChannel* NativePtr { get => default; }
+    public ImPtrVector<ImDrawCmdPtr> _CmdBuffer { get => default; }
+    public ImVector<ushort> _IdxBuffer { get => default; }
+  }
+  public struct ImDrawCmd
+  {
+    public UnityEngine.Vector4 ClipRect;
+    public System.IntPtr TextureId;
+    public uint VtxOffset;
+    public uint IdxOffset;
+    public uint ElemCount;
+    public System.IntPtr UserCallback;
+    public unsafe void* UserCallbackData;
+  }
+  public struct ImDrawCmdPtr
+  {
+    public unsafe ImDrawCmd* NativePtr { get => default; }
+    public ref UnityEngine.Vector4 ClipRect { get => ref __0; }
+    public System.IntPtr TextureId { get => default; set { } }
+    public ref uint VtxOffset { get => ref __1; }
+    public ref uint IdxOffset { get => ref __1; }
+    public ref uint ElemCount { get => ref __1; }
+    public ref ImDrawCallback UserCallback { get => ref __2; }
+    public System.IntPtr UserCallbackData { get => default; set { } }
+    public unsafe void* GetTexID() { return default; }
+    public void ImDrawCmd_destroy() { }
+    internal static UnityEngine.Vector4 __0;
+    internal static uint __1;
+    internal static ImDrawCallback __2;
+  }
+  public struct ImDrawCmdHeader
+  {
+    public UnityEngine.Vector4 ClipRect;
+    public System.IntPtr TextureId;
+    public uint VtxOffset;
+  }
+  public struct ImDrawCmdHeaderPtr
+  {
+    public unsafe ImDrawCmdHeader* NativePtr { get => default; }
+    public ref UnityEngine.Vector4 ClipRect { get => ref __0; }
+    public System.IntPtr TextureId { get => default; set { } }
+    public ref uint VtxOffset { get => ref __1; }
+    internal static UnityEngine.Vector4 __0;
+    internal static uint __1;
+  }
+  public struct ImDrawData
+  {
+    public byte Valid;
+    public int CmdListsCount;
+    public int TotalIdxCount;
+    public int TotalVtxCount;
+    public unsafe ImDrawList** CmdLists;
+    public UnityEngine.Vector2 DisplayPos;
+    public UnityEngine.Vector2 DisplaySize;
+    public UnityEngine.Vector2 FramebufferScale;
+  }
+  public struct ImDrawDataPtr
+  {
+    public unsafe ImDrawData* NativePtr { get => default; }
+    public ref bool Valid { get => ref __0; }
+    public ref int CmdListsCount { get => ref __1; }
+    public ref int TotalIdxCount { get => ref __1; }
+    public ref int TotalVtxCount { get => ref __1; }
+    public System.IntPtr CmdLists { get => default; set { } }
+    public ref UnityEngine.Vector2 DisplayPos { get => ref __2; }
+    public ref UnityEngine.Vector2 DisplaySize { get => ref __2; }
+    public ref UnityEngine.Vector2 FramebufferScale { get => ref __2; }
+    public RangePtrAccessor<ImDrawListPtr> CmdListsRange { get => default; }
+    public void Clear() { }
+    public void DeIndexAllBuffers() { }
+    public void ScaleClipRects(UnityEngine.Vector2 fb_scale) { }
+    public void ImDrawData_destroy() { }
+    internal static bool __0;
+    internal static int __1;
+    internal static UnityEngine.Vector2 __2;
+  }
+  public struct ImDrawDataBuilder
+  {
+    public ImVector Layers_0;
+    public ImVector Layers_1;
+  }
+  public struct ImDrawDataBuilderPtr
+  {
+    public unsafe ImDrawDataBuilder* NativePtr { get => default; }
+    public RangeAccessor<ImVector> Layers { get => default; }
+    public void Clear() { }
+    public void ClearFreeMemory() { }
+    public void FlattenIntoSingleLayer() { }
+    public int GetDrawListCount() { return default; }
+  }
+  public enum ImDrawFlags
+  {
+    None = 0,
+    Closed = 1,
+    RoundCornersTopLeft = 16,
+    RoundCornersTopRight = 32,
+    RoundCornersTop = 48,
+    RoundCornersBottomLeft = 64,
+    RoundCornersLeft = 80,
+    RoundCornersBottomRight = 128,
+    RoundCornersRight = 160,
+    RoundCornersBottom = 192,
+    RoundCornersAll = 240,
+    RoundCornersDefault_ = 240,
+    RoundCornersNone = 256,
+    RoundCornersMask_ = 496,
+  }
+  public struct ImDrawList
+  {
+    public ImVector CmdBuffer;
+    public ImVector IdxBuffer;
+    public ImVector VtxBuffer;
+    public ImDrawListFlags Flags;
+    public uint _VtxCurrentIdx;
+    public unsafe ImDrawListSharedData* _Data;
+    public unsafe byte* _OwnerName;
+    public unsafe ImDrawVert* _VtxWritePtr;
+    public unsafe ushort* _IdxWritePtr;
+    public ImVector _ClipRectStack;
+    public ImVector _TextureIdStack;
+    public ImVector _Path;
+    public ImDrawCmdHeader _CmdHeader;
+    public ImDrawListSplitter _Splitter;
+    public float _FringeScale;
+  }
+  public struct ImDrawListPtr
+  {
+    public unsafe ImDrawList* NativePtr { get => default; }
+    public ImPtrVector<ImDrawCmdPtr> CmdBuffer { get => default; }
+    public ImVector<ushort> IdxBuffer { get => default; }
+    public ImPtrVector<ImDrawVertPtr> VtxBuffer { get => default; }
+    public ref ImDrawListFlags Flags { get => ref __0; }
+    public ref uint _VtxCurrentIdx { get => ref __1; }
+    public ref ImDrawListSharedDataPtr _Data { get => ref __2; }
+    public ref string _OwnerName { get => ref __3; }
+    public ref ImDrawVertPtr _VtxWritePtr { get => ref __4; }
+    public System.IntPtr _IdxWritePtr { get => default; set { } }
+    public ImPtrVector<UnityEngine.Vector4> _ClipRectStack { get => default; }
+    public ImVector<System.IntPtr> _TextureIdStack { get => default; }
+    public ImPtrVector<UnityEngine.Vector2> _Path { get => default; }
+    public ref ImDrawCmdHeader _CmdHeader { get => ref __5; }
+    public ref ImDrawListSplitter _Splitter { get => ref __6; }
+    public ref float _FringeScale { get => ref __7; }
+    public void AddBezierCubic(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col, float thickness) { }
+    public void AddBezierCubic(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col, float thickness, int num_segments) { }
+    public void AddBezierQuadratic(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col, float thickness) { }
+    public void AddBezierQuadratic(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col, float thickness, int num_segments) { }
+    public void AddCallback(ImDrawCallback callback, System.IntPtr callback_data) { }
+    public void AddCircle(UnityEngine.Vector2 center, float radius, uint col) { }
+    public void AddCircle(UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public void AddCircle(UnityEngine.Vector2 center, float radius, uint col, float thickness) { }
+    public void AddCircle(UnityEngine.Vector2 center, float radius, uint col, int num_segments, float thickness) { }
+    public void AddCircleFilled(UnityEngine.Vector2 center, float radius, uint col) { }
+    public void AddCircleFilled(UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public void AddConvexPolyFilled(ref UnityEngine.Vector2 points, int num_points, uint col) { }
+    public void AddDrawCmd() { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max) { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min) { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col) { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max) { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, uint col) { }
+    public void AddImage(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max, uint col) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, uint col) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, uint col) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3, UnityEngine.Vector2 uv4) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3, uint col) { }
+    public void AddImageQuad(System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3, UnityEngine.Vector2 uv4, uint col) { }
+    public void AddImageRounded(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max, uint col, float rounding) { }
+    public void AddImageRounded(System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max, uint col, float rounding, ImDrawFlags flags) { }
+    public void AddLine(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, uint col) { }
+    public void AddLine(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, uint col, float thickness) { }
+    public void AddNgon(UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public void AddNgon(UnityEngine.Vector2 center, float radius, uint col, int num_segments, float thickness) { }
+    public void AddNgonFilled(UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public void AddPolyline(ref UnityEngine.Vector2 points, int num_points, uint col, ImDrawFlags flags, float thickness) { }
+    public void AddQuad(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col) { }
+    public void AddQuad(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col, float thickness) { }
+    public void AddQuadFilled(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, ImDrawFlags flags) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, ImDrawFlags flags) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, float thickness) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, ImDrawFlags flags, float thickness) { }
+    public void AddRect(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness) { }
+    public void AddRectFilled(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col) { }
+    public void AddRectFilled(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding) { }
+    public void AddRectFilled(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, ImDrawFlags flags) { }
+    public void AddRectFilled(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, ImDrawFlags flags) { }
+    public void AddRectFilledMultiColor(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left) { }
+    public void AddText(UnityEngine.Vector2 pos, uint col, string text_begin) { }
+    public void AddText(UnityEngine.Vector2 pos, uint col, string text_begin, string text_end) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, string text_end) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, float wrap_width) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, ref UnityEngine.Vector4 cpu_fine_clip_rect) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, string text_end, float wrap_width) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, string text_end, ref UnityEngine.Vector4 cpu_fine_clip_rect) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, float wrap_width, ref UnityEngine.Vector4 cpu_fine_clip_rect) { }
+    public void AddText(ImFontPtr font, float font_size, UnityEngine.Vector2 pos, uint col, string text_begin, string text_end, float wrap_width, ref UnityEngine.Vector4 cpu_fine_clip_rect) { }
+    public void AddTriangle(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col) { }
+    public void AddTriangle(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col, float thickness) { }
+    public void AddTriangleFilled(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col) { }
+    public void ChannelsMerge() { }
+    public void ChannelsSetCurrent(int n) { }
+    public void ChannelsSplit(int count) { }
+    public ImDrawListPtr CloneOutput() { return default; }
+    public UnityEngine.Vector2 GetClipRectMax() { return default; }
+    public UnityEngine.Vector2 GetClipRectMin() { return default; }
+    public void PathArcTo(UnityEngine.Vector2 center, float radius, float a_min, float a_max) { }
+    public void PathArcTo(UnityEngine.Vector2 center, float radius, float a_min, float a_max, int num_segments) { }
+    public void PathArcToFast(UnityEngine.Vector2 center, float radius, int a_min_of_12, int a_max_of_12) { }
+    public void PathBezierCubicCurveTo(UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4) { }
+    public void PathBezierCubicCurveTo(UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, int num_segments) { }
+    public void PathBezierQuadraticCurveTo(UnityEngine.Vector2 p2, UnityEngine.Vector2 p3) { }
+    public void PathBezierQuadraticCurveTo(UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, int num_segments) { }
+    public void PathClear() { }
+    public void PathFillConvex(uint col) { }
+    public void PathLineTo(UnityEngine.Vector2 pos) { }
+    public void PathLineToMergeDuplicate(UnityEngine.Vector2 pos) { }
+    public void PathRect(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max) { }
+    public void PathRect(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max, float rounding) { }
+    public void PathRect(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max, ImDrawFlags flags) { }
+    public void PathRect(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max, float rounding, ImDrawFlags flags) { }
+    public void PathStroke(uint col) { }
+    public void PathStroke(uint col, ImDrawFlags flags) { }
+    public void PathStroke(uint col, float thickness) { }
+    public void PathStroke(uint col, ImDrawFlags flags, float thickness) { }
+    public void PopClipRect() { }
+    public void PopTextureID() { }
+    public void PrimQuadUV(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 d, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, UnityEngine.Vector2 uv_c, UnityEngine.Vector2 uv_d, uint col) { }
+    public void PrimRect(UnityEngine.Vector2 a, UnityEngine.Vector2 b, uint col) { }
+    public void PrimRectUV(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, uint col) { }
+    public void PrimReserve(int idx_count, int vtx_count) { }
+    public void PrimUnreserve(int idx_count, int vtx_count) { }
+    public void PrimVtx(UnityEngine.Vector2 pos, UnityEngine.Vector2 uv, uint col) { }
+    public void PrimWriteIdx(ushort idx) { }
+    public void PrimWriteVtx(UnityEngine.Vector2 pos, UnityEngine.Vector2 uv, uint col) { }
+    public void PushClipRect(UnityEngine.Vector2 clip_rect_min, UnityEngine.Vector2 clip_rect_max) { }
+    public void PushClipRect(UnityEngine.Vector2 clip_rect_min, UnityEngine.Vector2 clip_rect_max, bool intersect_with_current_clip_rect) { }
+    public void PushClipRectFullScreen() { }
+    public void PushTextureID(System.IntPtr texture_id) { }
+    public int _CalcCircleAutoSegmentCount(float radius) { return default; }
+    public void _ClearFreeMemory() { }
+    public void _OnChangedClipRect() { }
+    public void _OnChangedTextureID() { }
+    public void _OnChangedVtxOffset() { }
+    public void _PathArcToFastEx(UnityEngine.Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step) { }
+    public void _PathArcToN(UnityEngine.Vector2 center, float radius, float a_min, float a_max, int num_segments) { }
+    public void _PopUnusedDrawCmd() { }
+    public void _ResetForNewFrame() { }
+    public void _TryMergeDrawCmds() { }
+    public void ImDrawList_destroy() { }
+    public bool Equals(ImDrawListPtr other) { return default; }
+    internal static ImDrawListFlags __0;
+    internal static uint __1;
+    internal static ImDrawListSharedDataPtr __2;
+    internal static string __3;
+    internal static ImDrawVertPtr __4;
+    internal static ImDrawCmdHeader __5;
+    internal static ImDrawListSplitter __6;
+    internal static float __7;
+  }
+  public enum ImDrawListFlags
+  {
+    None = 0,
+    AntiAliasedLines = 1,
+    AntiAliasedLinesUseTex = 2,
+    AntiAliasedFill = 4,
+    AllowVtxOffset = 8,
+  }
+  public struct ImDrawListSharedData
+  {
+    public UnityEngine.Vector2 TexUvWhitePixel;
+    public unsafe ImFont* Font;
+    public float FontSize;
+    public float CurveTessellationTol;
+    public float CircleSegmentMaxError;
+    public UnityEngine.Vector4 ClipRectFullscreen;
+    public ImDrawListFlags InitialFlags;
+    public UnityEngine.Vector2 ArcFastVtx_0;
+    public UnityEngine.Vector2 ArcFastVtx_1;
+    public UnityEngine.Vector2 ArcFastVtx_2;
+    public UnityEngine.Vector2 ArcFastVtx_3;
+    public UnityEngine.Vector2 ArcFastVtx_4;
+    public UnityEngine.Vector2 ArcFastVtx_5;
+    public UnityEngine.Vector2 ArcFastVtx_6;
+    public UnityEngine.Vector2 ArcFastVtx_7;
+    public UnityEngine.Vector2 ArcFastVtx_8;
+    public UnityEngine.Vector2 ArcFastVtx_9;
+    public UnityEngine.Vector2 ArcFastVtx_10;
+    public UnityEngine.Vector2 ArcFastVtx_11;
+    public UnityEngine.Vector2 ArcFastVtx_12;
+    public UnityEngine.Vector2 ArcFastVtx_13;
+    public UnityEngine.Vector2 ArcFastVtx_14;
+    public UnityEngine.Vector2 ArcFastVtx_15;
+    public UnityEngine.Vector2 ArcFastVtx_16;
+    public UnityEngine.Vector2 ArcFastVtx_17;
+    public UnityEngine.Vector2 ArcFastVtx_18;
+    public UnityEngine.Vector2 ArcFastVtx_19;
+    public UnityEngine.Vector2 ArcFastVtx_20;
+    public UnityEngine.Vector2 ArcFastVtx_21;
+    public UnityEngine.Vector2 ArcFastVtx_22;
+    public UnityEngine.Vector2 ArcFastVtx_23;
+    public UnityEngine.Vector2 ArcFastVtx_24;
+    public UnityEngine.Vector2 ArcFastVtx_25;
+    public UnityEngine.Vector2 ArcFastVtx_26;
+    public UnityEngine.Vector2 ArcFastVtx_27;
+    public UnityEngine.Vector2 ArcFastVtx_28;
+    public UnityEngine.Vector2 ArcFastVtx_29;
+    public UnityEngine.Vector2 ArcFastVtx_30;
+    public UnityEngine.Vector2 ArcFastVtx_31;
+    public UnityEngine.Vector2 ArcFastVtx_32;
+    public UnityEngine.Vector2 ArcFastVtx_33;
+    public UnityEngine.Vector2 ArcFastVtx_34;
+    public UnityEngine.Vector2 ArcFastVtx_35;
+    public UnityEngine.Vector2 ArcFastVtx_36;
+    public UnityEngine.Vector2 ArcFastVtx_37;
+    public UnityEngine.Vector2 ArcFastVtx_38;
+    public UnityEngine.Vector2 ArcFastVtx_39;
+    public UnityEngine.Vector2 ArcFastVtx_40;
+    public UnityEngine.Vector2 ArcFastVtx_41;
+    public UnityEngine.Vector2 ArcFastVtx_42;
+    public UnityEngine.Vector2 ArcFastVtx_43;
+    public UnityEngine.Vector2 ArcFastVtx_44;
+    public UnityEngine.Vector2 ArcFastVtx_45;
+    public UnityEngine.Vector2 ArcFastVtx_46;
+    public UnityEngine.Vector2 ArcFastVtx_47;
+    public float ArcFastRadiusCutoff;
+    public byte CircleSegmentCounts_0;
+    public byte CircleSegmentCounts_1;
+    public byte CircleSegmentCounts_2;
+    public byte CircleSegmentCounts_3;
+    public byte CircleSegmentCounts_4;
+    public byte CircleSegmentCounts_5;
+    public byte CircleSegmentCounts_6;
+    public byte CircleSegmentCounts_7;
+    public byte CircleSegmentCounts_8;
+    public byte CircleSegmentCounts_9;
+    public byte CircleSegmentCounts_10;
+    public byte CircleSegmentCounts_11;
+    public byte CircleSegmentCounts_12;
+    public byte CircleSegmentCounts_13;
+    public byte CircleSegmentCounts_14;
+    public byte CircleSegmentCounts_15;
+    public byte CircleSegmentCounts_16;
+    public byte CircleSegmentCounts_17;
+    public byte CircleSegmentCounts_18;
+    public byte CircleSegmentCounts_19;
+    public byte CircleSegmentCounts_20;
+    public byte CircleSegmentCounts_21;
+    public byte CircleSegmentCounts_22;
+    public byte CircleSegmentCounts_23;
+    public byte CircleSegmentCounts_24;
+    public byte CircleSegmentCounts_25;
+    public byte CircleSegmentCounts_26;
+    public byte CircleSegmentCounts_27;
+    public byte CircleSegmentCounts_28;
+    public byte CircleSegmentCounts_29;
+    public byte CircleSegmentCounts_30;
+    public byte CircleSegmentCounts_31;
+    public byte CircleSegmentCounts_32;
+    public byte CircleSegmentCounts_33;
+    public byte CircleSegmentCounts_34;
+    public byte CircleSegmentCounts_35;
+    public byte CircleSegmentCounts_36;
+    public byte CircleSegmentCounts_37;
+    public byte CircleSegmentCounts_38;
+    public byte CircleSegmentCounts_39;
+    public byte CircleSegmentCounts_40;
+    public byte CircleSegmentCounts_41;
+    public byte CircleSegmentCounts_42;
+    public byte CircleSegmentCounts_43;
+    public byte CircleSegmentCounts_44;
+    public byte CircleSegmentCounts_45;
+    public byte CircleSegmentCounts_46;
+    public byte CircleSegmentCounts_47;
+    public byte CircleSegmentCounts_48;
+    public byte CircleSegmentCounts_49;
+    public byte CircleSegmentCounts_50;
+    public byte CircleSegmentCounts_51;
+    public byte CircleSegmentCounts_52;
+    public byte CircleSegmentCounts_53;
+    public byte CircleSegmentCounts_54;
+    public byte CircleSegmentCounts_55;
+    public byte CircleSegmentCounts_56;
+    public byte CircleSegmentCounts_57;
+    public byte CircleSegmentCounts_58;
+    public byte CircleSegmentCounts_59;
+    public byte CircleSegmentCounts_60;
+    public byte CircleSegmentCounts_61;
+    public byte CircleSegmentCounts_62;
+    public byte CircleSegmentCounts_63;
+    public unsafe UnityEngine.Vector4* TexUvLines;
+  }
+  public struct ImDrawListSharedDataPtr
+  {
+    public unsafe ImDrawListSharedData* NativePtr { get => default; }
+    public ref UnityEngine.Vector2 TexUvWhitePixel { get => ref __0; }
+    public ref ImFontPtr Font { get => ref __1; }
+    public ref float FontSize { get => ref __2; }
+    public ref float CurveTessellationTol { get => ref __2; }
+    public ref float CircleSegmentMaxError { get => ref __2; }
+    public ref UnityEngine.Vector4 ClipRectFullscreen { get => ref __3; }
+    public ref ImDrawListFlags InitialFlags { get => ref __4; }
+    public RangeAccessor<UnityEngine.Vector2> ArcFastVtx { get => default; }
+    public ref float ArcFastRadiusCutoff { get => ref __2; }
+    public RangeAccessor<byte> CircleSegmentCounts { get => default; }
+    public System.IntPtr TexUvLines { get => default; set { } }
+    public void SetCircleTessellationMaxError(float max_error) { }
+    public void ImDrawListSharedData_destroy() { }
+    internal static UnityEngine.Vector2 __0;
+    internal static ImFontPtr __1;
+    internal static float __2;
+    internal static UnityEngine.Vector4 __3;
+    internal static ImDrawListFlags __4;
+  }
+  public struct ImDrawListSplitter
+  {
+    public int _Current;
+    public int _Count;
+    public ImVector _Channels;
+  }
+  public struct ImDrawListSplitterPtr
+  {
+    public unsafe ImDrawListSplitter* NativePtr { get => default; }
+    public ref int _Current { get => ref __0; }
+    public ref int _Count { get => ref __0; }
+    public ImPtrVector<ImDrawChannelPtr> _Channels { get => default; }
+    public void Clear() { }
+    public void ClearFreeMemory() { }
+    public void Merge(ImDrawListPtr draw_list) { }
+    public void SetCurrentChannel(ImDrawListPtr draw_list, int channel_idx) { }
+    public void Split(ImDrawListPtr draw_list, int count) { }
+    public void ImDrawListSplitter_destroy() { }
+    internal static int __0;
+  }
+  public struct ImDrawVert
+  {
+    public UnityEngine.Vector2 pos;
+    public UnityEngine.Vector2 uv;
+    public uint col;
+  }
+  public struct ImDrawVertPtr
+  {
+    public unsafe ImDrawVert* NativePtr { get => default; }
+    public ref UnityEngine.Vector2 pos { get => ref __0; }
+    public ref UnityEngine.Vector2 uv { get => ref __0; }
+    public ref uint col { get => ref __1; }
+    internal static UnityEngine.Vector2 __0;
+    internal static uint __1;
+  }
+  public struct ImFont
+  {
+    public ImVector IndexAdvanceX;
+    public float FallbackAdvanceX;
+    public float FontSize;
+    public ImVector IndexLookup;
+    public ImVector Glyphs;
+    public unsafe ImFontGlyph* FallbackGlyph;
+    public unsafe ImFontAtlas* ContainerAtlas;
+    public unsafe ImFontConfig* ConfigData;
+    public short ConfigDataCount;
+    public ushort FallbackChar;
+    public ushort EllipsisChar;
+    public ushort DotChar;
+    public byte DirtyLookupTables;
+    public float Scale;
+    public float Ascent;
+    public float Descent;
+    public int MetricsTotalSurface;
+    public byte Used4kPagesMap_0;
+    public byte Used4kPagesMap_1;
+  }
+  public struct ImFontPtr
+  {
+    public unsafe ImFont* NativePtr { get => default; }
+    public ImVector<float> IndexAdvanceX { get => default; }
+    public ref float FallbackAdvanceX { get => ref __0; }
+    public ref float FontSize { get => ref __0; }
+    public ImVector<ushort> IndexLookup { get => default; }
+    public ImPtrVector<ImFontGlyphPtr> Glyphs { get => default; }
+    public ref ImFontGlyphPtr FallbackGlyph { get => ref __1; }
+    public ref ImFontAtlasPtr ContainerAtlas { get => ref __2; }
+    public ref ImFontConfigPtr ConfigData { get => ref __3; }
+    public ref short ConfigDataCount { get => ref __4; }
+    public ref ushort FallbackChar { get => ref __5; }
+    public ref ushort EllipsisChar { get => ref __5; }
+    public ref ushort DotChar { get => ref __5; }
+    public ref bool DirtyLookupTables { get => ref __6; }
+    public ref float Scale { get => ref __0; }
+    public ref float Ascent { get => ref __0; }
+    public ref float Descent { get => ref __0; }
+    public ref int MetricsTotalSurface { get => ref __7; }
+    public RangeAccessor<byte> Used4kPagesMap { get => default; }
+    public void AddGlyph(ImFontConfigPtr src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) { }
+    public void AddRemapChar(ushort dst, ushort src) { }
+    public void AddRemapChar(ushort dst, ushort src, bool overwrite_dst) { }
+    public void BuildLookupTable() { }
+    public UnityEngine.Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin) { return default; }
+    public UnityEngine.Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end) { return default; }
+    public unsafe UnityEngine.Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, ref byte* remaining) { return default; }
+    public unsafe UnityEngine.Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end, ref byte* remaining) { return default; }
+    public string CalcWordWrapPositionA(float scale, string text, string text_end, float wrap_width) { return default; }
+    public void ClearOutputData() { }
+    public ImFontGlyphPtr FindGlyph(ushort c) { return default; }
+    public ImFontGlyphPtr FindGlyphNoFallback(ushort c) { return default; }
+    public float GetCharAdvance(ushort c) { return default; }
+    public string GetDebugName() { return default; }
+    public void GrowIndex(int new_size) { }
+    public bool IsGlyphRangeUnused(uint c_begin, uint c_last) { return default; }
+    public bool IsLoaded() { return default; }
+    public void RenderChar(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, ushort c) { }
+    public void RenderText(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, string text_begin, string text_end) { }
+    public void RenderText(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, string text_begin, string text_end, float wrap_width) { }
+    public void RenderText(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, string text_begin, string text_end, bool cpu_fine_clip) { }
+    public void RenderText(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, string text_begin, string text_end, float wrap_width, bool cpu_fine_clip) { }
+    public void SetGlyphVisible(ushort c, bool visible) { }
+    public void ImFont_destroy() { }
+    public UnityEngine.Vector2 CalcTextSizeA(float font_size, float max_width, float wrap_width, char ch) { return default; }
+    public int CalcWordWrapPositionA(float scale, string text, float wrap_width) { return default; }
+    public void RenderText(ImDrawListPtr draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, string text, float wrap_width, bool cpu_fine_clip) { }
+    internal static float __0;
+    internal static ImFontGlyphPtr __1;
+    internal static ImFontAtlasPtr __2;
+    internal static ImFontConfigPtr __3;
+    internal static short __4;
+    internal static ushort __5;
+    internal static bool __6;
+    internal static int __7;
+  }
+  public struct ImFontAtlas
+  {
+    public ImFontAtlasFlags Flags;
+    public System.IntPtr TexID;
+    public int TexDesiredWidth;
+    public int TexGlyphPadding;
+    public byte Locked;
+    public byte TexReady;
+    public byte TexPixelsUseColors;
+    public unsafe byte* TexPixelsAlpha8;
+    public unsafe System.UInt32* TexPixelsRGBA32;
+    public int TexWidth;
+    public int TexHeight;
+    public UnityEngine.Vector2 TexUvScale;
+    public UnityEngine.Vector2 TexUvWhitePixel;
+    public ImVector Fonts;
+    public ImVector CustomRects;
+    public ImVector ConfigData;
+    public UnityEngine.Vector4 TexUvLines_0;
+    public UnityEngine.Vector4 TexUvLines_1;
+    public UnityEngine.Vector4 TexUvLines_2;
+    public UnityEngine.Vector4 TexUvLines_3;
+    public UnityEngine.Vector4 TexUvLines_4;
+    public UnityEngine.Vector4 TexUvLines_5;
+    public UnityEngine.Vector4 TexUvLines_6;
+    public UnityEngine.Vector4 TexUvLines_7;
+    public UnityEngine.Vector4 TexUvLines_8;
+    public UnityEngine.Vector4 TexUvLines_9;
+    public UnityEngine.Vector4 TexUvLines_10;
+    public UnityEngine.Vector4 TexUvLines_11;
+    public UnityEngine.Vector4 TexUvLines_12;
+    public UnityEngine.Vector4 TexUvLines_13;
+    public UnityEngine.Vector4 TexUvLines_14;
+    public UnityEngine.Vector4 TexUvLines_15;
+    public UnityEngine.Vector4 TexUvLines_16;
+    public UnityEngine.Vector4 TexUvLines_17;
+    public UnityEngine.Vector4 TexUvLines_18;
+    public UnityEngine.Vector4 TexUvLines_19;
+    public UnityEngine.Vector4 TexUvLines_20;
+    public UnityEngine.Vector4 TexUvLines_21;
+    public UnityEngine.Vector4 TexUvLines_22;
+    public UnityEngine.Vector4 TexUvLines_23;
+    public UnityEngine.Vector4 TexUvLines_24;
+    public UnityEngine.Vector4 TexUvLines_25;
+    public UnityEngine.Vector4 TexUvLines_26;
+    public UnityEngine.Vector4 TexUvLines_27;
+    public UnityEngine.Vector4 TexUvLines_28;
+    public UnityEngine.Vector4 TexUvLines_29;
+    public UnityEngine.Vector4 TexUvLines_30;
+    public UnityEngine.Vector4 TexUvLines_31;
+    public UnityEngine.Vector4 TexUvLines_32;
+    public UnityEngine.Vector4 TexUvLines_33;
+    public UnityEngine.Vector4 TexUvLines_34;
+    public UnityEngine.Vector4 TexUvLines_35;
+    public UnityEngine.Vector4 TexUvLines_36;
+    public UnityEngine.Vector4 TexUvLines_37;
+    public UnityEngine.Vector4 TexUvLines_38;
+    public UnityEngine.Vector4 TexUvLines_39;
+    public UnityEngine.Vector4 TexUvLines_40;
+    public UnityEngine.Vector4 TexUvLines_41;
+    public UnityEngine.Vector4 TexUvLines_42;
+    public UnityEngine.Vector4 TexUvLines_43;
+    public UnityEngine.Vector4 TexUvLines_44;
+    public UnityEngine.Vector4 TexUvLines_45;
+    public UnityEngine.Vector4 TexUvLines_46;
+    public UnityEngine.Vector4 TexUvLines_47;
+    public UnityEngine.Vector4 TexUvLines_48;
+    public UnityEngine.Vector4 TexUvLines_49;
+    public UnityEngine.Vector4 TexUvLines_50;
+    public UnityEngine.Vector4 TexUvLines_51;
+    public UnityEngine.Vector4 TexUvLines_52;
+    public UnityEngine.Vector4 TexUvLines_53;
+    public UnityEngine.Vector4 TexUvLines_54;
+    public UnityEngine.Vector4 TexUvLines_55;
+    public UnityEngine.Vector4 TexUvLines_56;
+    public UnityEngine.Vector4 TexUvLines_57;
+    public UnityEngine.Vector4 TexUvLines_58;
+    public UnityEngine.Vector4 TexUvLines_59;
+    public UnityEngine.Vector4 TexUvLines_60;
+    public UnityEngine.Vector4 TexUvLines_61;
+    public UnityEngine.Vector4 TexUvLines_62;
+    public UnityEngine.Vector4 TexUvLines_63;
+    public unsafe ImFontBuilderIO* FontBuilderIO;
+    public uint FontBuilderFlags;
+    public int PackIdMouseCursors;
+    public int PackIdLines;
+  }
+  public struct ImFontAtlasPtr
+  {
+    public unsafe ImFontAtlas* NativePtr { get => default; }
+    public ref ImFontAtlasFlags Flags { get => ref __0; }
+    public System.IntPtr TexID { get => default; set { } }
+    public ref int TexDesiredWidth { get => ref __1; }
+    public ref int TexGlyphPadding { get => ref __1; }
+    public ref bool Locked { get => ref __2; }
+    public ref bool TexReady { get => ref __2; }
+    public ref bool TexPixelsUseColors { get => ref __2; }
+    public System.IntPtr TexPixelsAlpha8 { get => default; set { } }
+    public System.IntPtr TexPixelsRGBA32 { get => default; set { } }
+    public ref int TexWidth { get => ref __1; }
+    public ref int TexHeight { get => ref __1; }
+    public ref UnityEngine.Vector2 TexUvScale { get => ref __3; }
+    public ref UnityEngine.Vector2 TexUvWhitePixel { get => ref __3; }
+    public ImVector<ImFontPtr> Fonts { get => default; }
+    public ImPtrVector<ImFontAtlasCustomRectPtr> CustomRects { get => default; }
+    public ImPtrVector<ImFontConfigPtr> ConfigData { get => default; }
+    public RangeAccessor<UnityEngine.Vector4> TexUvLines { get => default; }
+    public ref ImFontBuilderIOPtr FontBuilderIO { get => ref __4; }
+    public ref uint FontBuilderFlags { get => ref __5; }
+    public ref int PackIdMouseCursors { get => ref __1; }
+    public ref int PackIdLines { get => ref __1; }
+    public int AddCustomRectFontGlyph(ImFontPtr font, ushort id, int width, int height, float advance_x) { return default; }
+    public int AddCustomRectFontGlyph(ImFontPtr font, ushort id, int width, int height, float advance_x, UnityEngine.Vector2 offset) { return default; }
+    public int AddCustomRectRegular(int width, int height) { return default; }
+    public ImFontPtr AddFont(ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontDefault() { return default; }
+    public ImFontPtr AddFontDefault(ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontFromFileTTF(string filename, float size_pixels) { return default; }
+    public ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromFileTTF(string filename, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedTTF(System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedTTF(System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedTTF(System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryCompressedTTF(System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryTTF(System.IntPtr font_data, int font_size, float size_pixels) { return default; }
+    public ImFontPtr AddFontFromMemoryTTF(System.IntPtr font_data, int font_size, float size_pixels, ImFontConfigPtr font_cfg) { return default; }
+    public ImFontPtr AddFontFromMemoryTTF(System.IntPtr font_data, int font_size, float size_pixels, ref ushort glyph_ranges) { return default; }
+    public ImFontPtr AddFontFromMemoryTTF(System.IntPtr font_data, int font_size, float size_pixels, ImFontConfigPtr font_cfg, ref ushort glyph_ranges) { return default; }
+    public bool Build() { return default; }
+    public void CalcCustomRectUV(ImFontAtlasCustomRectPtr rect, out UnityEngine.Vector2 out_uv_min, out UnityEngine.Vector2 out_uv_max) { out_uv_max = default; out_uv_min = default; }
+    public void Clear() { }
+    public void ClearFonts() { }
+    public void ClearInputData() { }
+    public void ClearTexData() { }
+    public ImFontAtlasCustomRectPtr GetCustomRectByIndex(int index) { return default; }
+    public unsafe ushort* GetGlyphRangesChineseFull() { return default; }
+    public unsafe ushort* GetGlyphRangesChineseSimplifiedCommon() { return default; }
+    public unsafe ushort* GetGlyphRangesCyrillic() { return default; }
+    public unsafe ushort* GetGlyphRangesDefault() { return default; }
+    public unsafe ushort* GetGlyphRangesJapanese() { return default; }
+    public unsafe ushort* GetGlyphRangesKorean() { return default; }
+    public unsafe ushort* GetGlyphRangesThai() { return default; }
+    public unsafe ushort* GetGlyphRangesVietnamese() { return default; }
+    public bool GetMouseCursorTexData(ImGuiMouseCursor cursor, out UnityEngine.Vector2 out_offset, out UnityEngine.Vector2 out_size, out UnityEngine.Vector2 out_uv_border, out UnityEngine.Vector2 out_uv_fill) { out_uv_fill = default; out_uv_border = default; out_size = default; out_offset = default; return default; }
+    public unsafe void GetTexDataAsAlpha8(out byte* out_pixels, out int out_width, out int out_height) { out_height = default; out_width = default; out_pixels = default; }
+    public unsafe void GetTexDataAsAlpha8(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel) { out_bytes_per_pixel = default; out_height = default; out_width = default; out_pixels = default; }
+    public unsafe void GetTexDataAsRGBA32(out byte* out_pixels, out int out_width, out int out_height) { out_height = default; out_width = default; out_pixels = default; }
+    public unsafe void GetTexDataAsRGBA32(out byte* out_pixels, out int out_width, out int out_height, out int out_bytes_per_pixel) { out_bytes_per_pixel = default; out_height = default; out_width = default; out_pixels = default; }
+    public bool IsBuilt() { return default; }
+    public void SetTexID(System.IntPtr id) { }
+    public void ImFontAtlas_destroy() { }
+    internal static ImFontAtlasFlags __0;
+    internal static int __1;
+    internal static bool __2;
+    internal static UnityEngine.Vector2 __3;
+    internal static ImFontBuilderIOPtr __4;
+    internal static uint __5;
+  }
+  public struct ImFontAtlasCustomRect
+  {
+    public ushort Width;
+    public ushort Height;
+    public ushort X;
+    public ushort Y;
+    public uint GlyphID;
+    public float GlyphAdvanceX;
+    public UnityEngine.Vector2 GlyphOffset;
+    public unsafe ImFont* Font;
+  }
+  public struct ImFontAtlasCustomRectPtr
+  {
+    public unsafe ImFontAtlasCustomRect* NativePtr { get => default; }
+    public ref ushort Width { get => ref __0; }
+    public ref ushort Height { get => ref __0; }
+    public ref ushort X { get => ref __0; }
+    public ref ushort Y { get => ref __0; }
+    public ref uint GlyphID { get => ref __1; }
+    public ref float GlyphAdvanceX { get => ref __2; }
+    public ref UnityEngine.Vector2 GlyphOffset { get => ref __3; }
+    public ref ImFontPtr Font { get => ref __4; }
+    public bool IsPacked() { return default; }
+    public void ImFontAtlasCustomRect_destroy() { }
+    internal static ushort __0;
+    internal static uint __1;
+    internal static float __2;
+    internal static UnityEngine.Vector2 __3;
+    internal static ImFontPtr __4;
+  }
+  public enum ImFontAtlasFlags
+  {
+    None = 0,
+    NoPowerOfTwoHeight = 1,
+    NoMouseCursors = 2,
+    NoBakedLines = 4,
+  }
+  public struct ImFontBuilderIO
+  {
+    public System.IntPtr FontBuilder_Build;
+  }
+  public struct ImFontBuilderIOPtr
+  {
+    public unsafe ImFontBuilderIO* NativePtr { get => default; }
+    public System.IntPtr FontBuilder_Build { get => default; set { } }
+  }
+  public struct ImFontConfig
+  {
+    public unsafe void* FontData;
+    public int FontDataSize;
+    public byte FontDataOwnedByAtlas;
+    public int FontNo;
+    public float SizePixels;
+    public int OversampleH;
+    public int OversampleV;
+    public byte PixelSnapH;
+    public UnityEngine.Vector2 GlyphExtraSpacing;
+    public UnityEngine.Vector2 GlyphOffset;
+    public unsafe ushort* GlyphRanges;
+    public float GlyphMinAdvanceX;
+    public float GlyphMaxAdvanceX;
+    public byte MergeMode;
+    public uint FontBuilderFlags;
+    public float RasterizerMultiply;
+    public ushort EllipsisChar;
+    public byte Name_0;
+    public byte Name_1;
+    public byte Name_2;
+    public byte Name_3;
+    public byte Name_4;
+    public byte Name_5;
+    public byte Name_6;
+    public byte Name_7;
+    public byte Name_8;
+    public byte Name_9;
+    public byte Name_10;
+    public byte Name_11;
+    public byte Name_12;
+    public byte Name_13;
+    public byte Name_14;
+    public byte Name_15;
+    public byte Name_16;
+    public byte Name_17;
+    public byte Name_18;
+    public byte Name_19;
+    public byte Name_20;
+    public byte Name_21;
+    public byte Name_22;
+    public byte Name_23;
+    public byte Name_24;
+    public byte Name_25;
+    public byte Name_26;
+    public byte Name_27;
+    public byte Name_28;
+    public byte Name_29;
+    public byte Name_30;
+    public byte Name_31;
+    public byte Name_32;
+    public byte Name_33;
+    public byte Name_34;
+    public byte Name_35;
+    public byte Name_36;
+    public byte Name_37;
+    public byte Name_38;
+    public byte Name_39;
+    public unsafe ImFont* DstFont;
+  }
+  public struct ImFontConfigPtr
+  {
+    public unsafe ImFontConfig* NativePtr { get => default; }
+    public System.IntPtr FontData { get => default; set { } }
+    public ref int FontDataSize { get => ref __0; }
+    public ref bool FontDataOwnedByAtlas { get => ref __1; }
+    public ref int FontNo { get => ref __0; }
+    public ref float SizePixels { get => ref __2; }
+    public ref int OversampleH { get => ref __0; }
+    public ref int OversampleV { get => ref __0; }
+    public ref bool PixelSnapH { get => ref __1; }
+    public ref UnityEngine.Vector2 GlyphExtraSpacing { get => ref __3; }
+    public ref UnityEngine.Vector2 GlyphOffset { get => ref __3; }
+    public System.IntPtr GlyphRanges { get => default; set { } }
+    public ref float GlyphMinAdvanceX { get => ref __2; }
+    public ref float GlyphMaxAdvanceX { get => ref __2; }
+    public ref bool MergeMode { get => ref __1; }
+    public ref uint FontBuilderFlags { get => ref __4; }
+    public ref float RasterizerMultiply { get => ref __2; }
+    public ref ushort EllipsisChar { get => ref __5; }
+    public RangeAccessor<byte> Name { get => default; }
+    public ref ImFontPtr DstFont { get => ref __6; }
+    public void ImFontConfig_destroy() { }
+    internal static int __0;
+    internal static bool __1;
+    internal static float __2;
+    internal static UnityEngine.Vector2 __3;
+    internal static uint __4;
+    internal static ushort __5;
+    internal static ImFontPtr __6;
+  }
+  public struct ImFontGlyph
+  {
+    public uint Colored;
+    public uint Visible;
+    public uint Codepoint;
+    public float AdvanceX;
+    public float X0;
+    public float Y0;
+    public float X1;
+    public float Y1;
+    public float U0;
+    public float V0;
+    public float U1;
+    public float V1;
+  }
+  public struct ImFontGlyphPtr
+  {
+    public unsafe ImFontGlyph* NativePtr { get => default; }
+    public ref uint Colored { get => ref __0; }
+    public ref uint Visible { get => ref __0; }
+    public ref uint Codepoint { get => ref __0; }
+    public ref float AdvanceX { get => ref __1; }
+    public ref float X0 { get => ref __1; }
+    public ref float Y0 { get => ref __1; }
+    public ref float X1 { get => ref __1; }
+    public ref float Y1 { get => ref __1; }
+    public ref float U0 { get => ref __1; }
+    public ref float V0 { get => ref __1; }
+    public ref float U1 { get => ref __1; }
+    public ref float V1 { get => ref __1; }
+    internal static uint __0;
+    internal static float __1;
+  }
+  public struct ImFontGlyphRangesBuilder
+  {
+    public ImVector UsedChars;
+  }
+  public struct ImFontGlyphRangesBuilderPtr
+  {
+    public unsafe ImFontGlyphRangesBuilder* NativePtr { get => default; }
+    public ImVector<uint> UsedChars { get => default; }
+    public void AddChar(ushort c) { }
+    public void AddRanges(ref ushort ranges) { }
+    public void AddText(string text) { }
+    public void AddText(string text, string text_end) { }
+    public void BuildRanges(ImVector out_ranges) { }
+    public void Clear() { }
+    public bool GetBit(uint n) { return default; }
+    public void SetBit(uint n) { }
+    public void ImFontGlyphRangesBuilder_destroy() { }
+  }
+  public class ImGui
+  {
+    public static ImGuiPayloadPtr AcceptDragDropPayload(string type) { return default; }
+    public static ImGuiPayloadPtr AcceptDragDropPayload(string type, ImGuiDragDropFlags flags) { return default; }
+    public static void ActivateItem(uint id) { }
+    public static uint AddContextHook(System.IntPtr context, System.IntPtr hook) { return default; }
+    public static void AddSettingsHandler(ImGuiSettingsHandlerPtr handler) { }
+    public static void AlignTextToFramePadding() { }
+    public static bool ArrowButton(string str_id, ImGuiDir dir) { return default; }
+    public static bool ArrowButtonEx(string str_id, ImGuiDir dir, UnityEngine.Vector2 size_arg) { return default; }
+    public static bool ArrowButtonEx(string str_id, ImGuiDir dir, UnityEngine.Vector2 size_arg, ImGuiButtonFlags flags) { return default; }
+    public static bool Begin(string name) { return default; }
+    public static bool Begin(string name, ref bool p_open) { return default; }
+    public static bool Begin(string name, ImGuiWindowFlags flags) { return default; }
+    public static bool Begin(string name, ref bool p_open, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(string str_id) { return default; }
+    public static bool BeginChild(string str_id, UnityEngine.Vector2 size) { return default; }
+    public static bool BeginChild(string str_id, bool border) { return default; }
+    public static bool BeginChild(string str_id, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(string str_id, UnityEngine.Vector2 size, bool border) { return default; }
+    public static bool BeginChild(string str_id, UnityEngine.Vector2 size, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(string str_id, bool border, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(string str_id, UnityEngine.Vector2 size, bool border, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(uint id) { return default; }
+    public static bool BeginChild(uint id, UnityEngine.Vector2 size) { return default; }
+    public static bool BeginChild(uint id, bool border) { return default; }
+    public static bool BeginChild(uint id, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(uint id, UnityEngine.Vector2 size, bool border) { return default; }
+    public static bool BeginChild(uint id, UnityEngine.Vector2 size, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(uint id, bool border, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChild(uint id, UnityEngine.Vector2 size, bool border, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChildEx(string name, uint id, UnityEngine.Vector2 size_arg, bool border, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginChildFrame(uint id, UnityEngine.Vector2 size) { return default; }
+    public static bool BeginChildFrame(uint id, UnityEngine.Vector2 size, ImGuiWindowFlags flags) { return default; }
+    public static void BeginColumns(string str_id, int count) { }
+    public static void BeginColumns(string str_id, int count, ImGuiOldColumnFlags flags) { }
+    public static bool BeginCombo(string label, string preview_value) { return default; }
+    public static bool BeginCombo(string label, string preview_value, ImGuiComboFlags flags) { return default; }
+    public static bool BeginComboPopup(uint popup_id, UnityEngine.Rect bb, ImGuiComboFlags flags) { return default; }
+    public static bool BeginComboPreview() { return default; }
+    public static void BeginDisabled() { }
+    public static void BeginDisabled(bool disabled) { }
+    public static bool BeginDragDropSource() { return default; }
+    public static bool BeginDragDropSource(ImGuiDragDropFlags flags) { return default; }
+    public static bool BeginDragDropTarget() { return default; }
+    public static bool BeginDragDropTargetCustom(UnityEngine.Rect bb, uint id) { return default; }
+    public static void BeginGroup() { }
+    public static bool BeginListBox(string label) { return default; }
+    public static bool BeginListBox(string label, UnityEngine.Vector2 size) { return default; }
+    public static bool BeginMainMenuBar() { return default; }
+    public static bool BeginMenu(string label) { return default; }
+    public static bool BeginMenu(string label, bool enabled) { return default; }
+    public static bool BeginMenuBar() { return default; }
+    public static bool BeginMenuEx(string label, string icon) { return default; }
+    public static bool BeginMenuEx(string label, string icon, bool enabled) { return default; }
+    public static bool BeginPopup(string str_id) { return default; }
+    public static bool BeginPopup(string str_id, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginPopupContextItem() { return default; }
+    public static bool BeginPopupContextItem(string str_id) { return default; }
+    public static bool BeginPopupContextItem(ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupContextItem(string str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupContextVoid() { return default; }
+    public static bool BeginPopupContextVoid(string str_id) { return default; }
+    public static bool BeginPopupContextVoid(ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupContextVoid(string str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupContextWindow() { return default; }
+    public static bool BeginPopupContextWindow(string str_id) { return default; }
+    public static bool BeginPopupContextWindow(ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupContextWindow(string str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static bool BeginPopupEx(uint id, ImGuiWindowFlags extra_flags) { return default; }
+    public static bool BeginPopupModal(string name) { return default; }
+    public static bool BeginPopupModal(string name, ref bool p_open) { return default; }
+    public static bool BeginPopupModal(string name, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginPopupModal(string name, ref bool p_open, ImGuiWindowFlags flags) { return default; }
+    public static bool BeginTabBar(string str_id) { return default; }
+    public static bool BeginTabBar(string str_id, ImGuiTabBarFlags flags) { return default; }
+    public static bool BeginTabBarEx(ImGuiTabBarPtr tab_bar, UnityEngine.Rect bb, ImGuiTabBarFlags flags) { return default; }
+    public static bool BeginTabItem(string label) { return default; }
+    public static bool BeginTabItem(string label, ref bool p_open) { return default; }
+    public static bool BeginTabItem(string label, ImGuiTabItemFlags flags) { return default; }
+    public static bool BeginTabItem(string label, ref bool p_open, ImGuiTabItemFlags flags) { return default; }
+    public static bool BeginTable(string str_id, int column) { return default; }
+    public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags) { return default; }
+    public static bool BeginTable(string str_id, int column, UnityEngine.Vector2 outer_size) { return default; }
+    public static bool BeginTable(string str_id, int column, float inner_width) { return default; }
+    public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size) { return default; }
+    public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, float inner_width) { return default; }
+    public static bool BeginTable(string str_id, int column, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, UnityEngine.Vector2 outer_size) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, float inner_width) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, float inner_width) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static bool BeginTableEx(string name, uint id, int columns_count, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static void BeginTooltip() { }
+    public static void BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags) { }
+    public static bool BeginViewportSideBar(string name, ImGuiViewportPtr viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags) { return default; }
+    public static void BringWindowToDisplayBack(ImGuiWindowPtr window) { }
+    public static void BringWindowToDisplayBehind(ImGuiWindowPtr window, ImGuiWindowPtr above_window) { }
+    public static void BringWindowToDisplayFront(ImGuiWindowPtr window) { }
+    public static void BringWindowToFocusFront(ImGuiWindowPtr window) { }
+    public static void Bullet() { }
+    public static void BulletText(string fmt) { }
+    public static void BulletTextV(string fmt) { }
+    public static bool Button(string label) { return default; }
+    public static bool Button(string label, UnityEngine.Vector2 size) { return default; }
+    public static bool ButtonBehavior(UnityEngine.Rect bb, uint id, out bool out_hovered, out bool out_held) { out_held = default; out_hovered = default; return default; }
+    public static bool ButtonBehavior(UnityEngine.Rect bb, uint id, out bool out_hovered, out bool out_held, ImGuiButtonFlags flags) { out_held = default; out_hovered = default; return default; }
+    public static bool ButtonEx(string label) { return default; }
+    public static bool ButtonEx(string label, UnityEngine.Vector2 size_arg) { return default; }
+    public static bool ButtonEx(string label, ImGuiButtonFlags flags) { return default; }
+    public static bool ButtonEx(string label, UnityEngine.Vector2 size_arg, ImGuiButtonFlags flags) { return default; }
+    public static UnityEngine.Vector2 CalcItemSize(UnityEngine.Vector2 size, float default_w, float default_h) { return default; }
+    public static float CalcItemWidth() { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, string text_end) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, bool hide_text_after_double_hash) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, float wrap_width) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, string text_end, float wrap_width) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, bool hide_text_after_double_hash, float wrap_width) { return default; }
+    public static UnityEngine.Vector2 CalcTextSize(string text, string text_end, bool hide_text_after_double_hash, float wrap_width) { return default; }
+    public static int CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate) { return default; }
+    public static UnityEngine.Vector2 CalcWindowNextAutoFitSize(ImGuiWindowPtr window) { return default; }
+    public static float CalcWrapWidthForPos(UnityEngine.Vector2 pos, float wrap_pos_x) { return default; }
+    public static void CallContextHooks(System.IntPtr context, System.IntPtr type) { }
+    public static bool Checkbox(string label, ref bool v) { return default; }
+    public static bool CheckboxFlags(string label, ref int flags, int flags_value) { return default; }
+    public static bool CheckboxFlags(string label, ref uint flags, uint flags_value) { return default; }
+    public static bool CheckboxFlags(string label, ref long flags, long flags_value) { return default; }
+    public static bool CheckboxFlags(string label, ref ulong flags, ulong flags_value) { return default; }
+    public static void ClearActiveID() { }
+    public static void ClearDragDrop() { }
+    public static void ClearIniSettings() { }
+    public static bool CloseButton(uint id, UnityEngine.Vector2 pos) { return default; }
+    public static void CloseCurrentPopup() { }
+    public static void ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup) { }
+    public static void ClosePopupsExceptModals() { }
+    public static void ClosePopupsOverWindow(ImGuiWindowPtr ref_window, bool restore_focus_to_window_under_popup) { }
+    public static bool CollapseButton(uint id, UnityEngine.Vector2 pos) { return default; }
+    public static bool CollapsingHeader(string label) { return default; }
+    public static bool CollapsingHeader(string label, ImGuiTreeNodeFlags flags) { return default; }
+    public static bool CollapsingHeader(string label, ref bool p_visible) { return default; }
+    public static bool CollapsingHeader(string label, ref bool p_visible, ImGuiTreeNodeFlags flags) { return default; }
+    public static bool ColorButton(string desc_id, UnityEngine.Vector4 col) { return default; }
+    public static bool ColorButton(string desc_id, UnityEngine.Vector4 col, ImGuiColorEditFlags flags) { return default; }
+    public static bool ColorButton(string desc_id, UnityEngine.Vector4 col, UnityEngine.Vector2 size) { return default; }
+    public static bool ColorButton(string desc_id, UnityEngine.Vector4 col, ImGuiColorEditFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static uint ColorConvertFloat4ToU32(UnityEngine.Vector4 @in) { return default; }
+    public static void ColorConvertHSVtoRGB(float h, float s, float v, out float out_r, out float out_g, out float out_b) { out_b = default; out_g = default; out_r = default; }
+    public static void ColorConvertRGBtoHSV(float r, float g, float b, out float out_h, out float out_s, out float out_v) { out_v = default; out_s = default; out_h = default; }
+    public static UnityEngine.Vector4 ColorConvertU32ToFloat4(uint @in) { return default; }
+    public static bool ColorEdit3(string label, ref UnityEngine.Vector3 col) { return default; }
+    public static bool ColorEdit3(string label, ref UnityEngine.Vector3 col, ImGuiColorEditFlags flags) { return default; }
+    public static bool ColorEdit4(string label, ref UnityEngine.Vector4 col) { return default; }
+    public static bool ColorEdit4(string label, ref UnityEngine.Vector4 col, ImGuiColorEditFlags flags) { return default; }
+    public static void ColorEditOptionsPopup(ref System.Single[] col, ImGuiColorEditFlags flags) { }
+    public static bool ColorPicker3(string label, ref UnityEngine.Vector3 col) { return default; }
+    public static bool ColorPicker3(string label, ref UnityEngine.Vector3 col, ImGuiColorEditFlags flags) { return default; }
+    public static bool ColorPicker4(string label, ref UnityEngine.Vector4 col) { return default; }
+    public static bool ColorPicker4(string label, ref UnityEngine.Vector4 col, ImGuiColorEditFlags flags) { return default; }
+    public static bool ColorPicker4(string label, ref UnityEngine.Vector4 col, ref System.Single[] ref_col) { return default; }
+    public static bool ColorPicker4(string label, ref UnityEngine.Vector4 col, ImGuiColorEditFlags flags, ref System.Single[] ref_col) { return default; }
+    public static void ColorPickerOptionsPopup(ref System.Single[] ref_col, ImGuiColorEditFlags flags) { }
+    public static void ColorTooltip(string text, ref System.Single[] col, ImGuiColorEditFlags flags) { }
+    public static void Columns() { }
+    public static void Columns(int count) { }
+    public static void Columns(string id) { }
+    public static void Columns(bool border) { }
+    public static void Columns(int count, string id) { }
+    public static void Columns(int count, bool border) { }
+    public static void Columns(string id, bool border) { }
+    public static void Columns(int count, string id, bool border) { }
+    public static bool Combo(string label, ref int current_item, System.String[] items, int items_count) { return default; }
+    public static bool Combo(string label, ref int current_item, System.String[] items, int items_count, int popup_max_height_in_items) { return default; }
+    public static bool Combo(string label, ref int current_item, string items_separated_by_zeros) { return default; }
+    public static bool Combo(string label, ref int current_item, string items_separated_by_zeros, int popup_max_height_in_items) { return default; }
+    public static bool Combo(string label, ref int current_item, System.IntPtr items_getter, System.IntPtr data, int items_count) { return default; }
+    public static bool Combo(string label, ref int current_item, System.IntPtr items_getter, System.IntPtr data, int items_count, int popup_max_height_in_items) { return default; }
+    public static System.IntPtr CreateContext() { return default; }
+    public static System.IntPtr CreateContext(ImFontAtlasPtr shared_font_atlas) { return default; }
+    public static System.IntPtr CreateNewWindowSettings(string name) { return default; }
+    public static bool DataTypeApplyFromText(string buf, ImGuiDataType data_type, System.IntPtr p_data, string format) { return default; }
+    public static void DataTypeApplyOp(ImGuiDataType data_type, int op, System.IntPtr output, System.IntPtr arg_1, System.IntPtr arg_2) { }
+    public static bool DataTypeClamp(ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static int DataTypeCompare(ImGuiDataType data_type, System.IntPtr arg_1, System.IntPtr arg_2) { return default; }
+    public static int DataTypeFormatString(ref byte buf, int buf_size, ImGuiDataType data_type, System.IntPtr p_data, string format) { return default; }
+    public static ImGuiDataTypeInfoPtr DataTypeGetInfo(ImGuiDataType data_type) { return default; }
+    public static bool DebugCheckVersionAndDataLayout(string version_str, uint sz_io, uint sz_style, uint sz_vec2, uint sz_vec4, uint sz_drawvert, uint sz_drawidx) { return default; }
+    public static void DebugDrawItemRect() { }
+    public static void DebugDrawItemRect(uint col) { }
+    public static void DebugHookIdInfo(uint id, ImGuiDataType data_type, System.IntPtr data_id, System.IntPtr data_id_end) { }
+    public static void DebugLog(string fmt) { }
+    public static void DebugLogV(string fmt) { }
+    public static void DebugNodeColumns(ImGuiOldColumnsPtr columns) { }
+    public static void DebugNodeDrawList(ImGuiWindowPtr window, ImDrawListPtr draw_list, string label) { }
+    public static void DebugNodeFont(ImFontPtr font) { }
+    public static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph) { }
+    public static void DebugNodeInputTextState(System.IntPtr state) { }
+    public static void DebugNodeStorage(ImGuiStoragePtr storage, string label) { }
+    public static void DebugNodeTabBar(ImGuiTabBarPtr tab_bar, string label) { }
+    public static void DebugNodeTable(ImGuiTablePtr table) { }
+    public static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings) { }
+    public static void DebugNodeViewport(ImGuiViewportPPtr viewport) { }
+    public static void DebugNodeWindow(ImGuiWindowPtr window, string label) { }
+    public static void DebugNodeWindowSettings(System.IntPtr settings) { }
+    public static void DebugNodeWindowsList(ImVector windows, string label) { }
+    public static unsafe void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windows_size, ImGuiWindowPtr parent_in_begin_stack) { }
+    public static void DebugRenderViewportThumbnail(ImDrawListPtr draw_list, ImGuiViewportPPtr viewport, UnityEngine.Rect bb) { }
+    public static void DebugStartItemPicker() { }
+    public static void DebugTextEncoding(string text) { }
+    public static void DestroyContext() { }
+    public static void DestroyContext(System.IntPtr ctx) { }
+    public static bool DragBehavior(uint id, ImGuiDataType data_type, System.IntPtr p_v, float v_speed, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed) { return default; }
+    public static bool DragFloat(string label, ref float v, string format) { return default; }
+    public static bool DragFloat(string label, ref float v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, string format) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, string format) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, string format) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, string format) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, float v_max) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, string format) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, float v_max, string format) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat2(string label, ref UnityEngine.Vector2 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, string format) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, string format) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, float v_max) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, string format) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, float v_max, string format) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat3(string label, ref UnityEngine.Vector3 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, string format) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, string format) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, float v_max) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, string format) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, float v_max, string format) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloat4(string label, ref UnityEngine.Vector4 v, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, string format_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, string format_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, string format_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min) { return default; }
+    public static bool DragInt(string label, ref int v, string format) { return default; }
+    public static bool DragInt(string label, ref int v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, string format) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, string format) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, string format) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min) { return default; }
+    public static bool DragInt2(string label, ref int v, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt2(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min) { return default; }
+    public static bool DragInt3(string label, ref int v, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt3(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min) { return default; }
+    public static bool DragInt4(string label, ref int v, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, string format) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragInt4(string label, ref int v, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, int v_min, int v_max, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool DragScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static void Dummy(UnityEngine.Vector2 size) { }
+    public static void End() { }
+    public static void EndChild() { }
+    public static void EndChildFrame() { }
+    public static void EndColumns() { }
+    public static void EndCombo() { }
+    public static void EndComboPreview() { }
+    public static void EndDisabled() { }
+    public static void EndDragDropSource() { }
+    public static void EndDragDropTarget() { }
+    public static void EndFrame() { }
+    public static void EndGroup() { }
+    public static void EndListBox() { }
+    public static void EndMainMenuBar() { }
+    public static void EndMenu() { }
+    public static void EndMenuBar() { }
+    public static void EndPopup() { }
+    public static void EndTabBar() { }
+    public static void EndTabItem() { }
+    public static void EndTable() { }
+    public static void EndTooltip() { }
+    public static UnityEngine.Vector2 FindBestWindowPosForPopup(ImGuiWindowPtr window) { return default; }
+    public static UnityEngine.Vector2 FindBestWindowPosForPopupEx(UnityEngine.Vector2 ref_pos, UnityEngine.Vector2 size, ref ImGuiDir last_dir, UnityEngine.Rect r_outer, UnityEngine.Rect r_avoid, ImGuiPopupPositionPolicy policy) { return default; }
+    public static ImGuiWindowPtr FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindowPtr window) { return default; }
+    public static ImGuiOldColumnsPtr FindOrCreateColumns(ImGuiWindowPtr window, uint id) { return default; }
+    public static System.IntPtr FindOrCreateWindowSettings(string name) { return default; }
+    public static string FindRenderedTextEnd(string text) { return default; }
+    public static string FindRenderedTextEnd(string text, string text_end) { return default; }
+    public static ImGuiSettingsHandlerPtr FindSettingsHandler(string type_name) { return default; }
+    public static ImGuiWindowPtr FindWindowByID(uint id) { return default; }
+    public static ImGuiWindowPtr FindWindowByName(string name) { return default; }
+    public static int FindWindowDisplayIndex(ImGuiWindowPtr window) { return default; }
+    public static System.IntPtr FindWindowSettings(uint id) { return default; }
+    public static void FocusTopMostWindowUnderOne(ImGuiWindowPtr under_this_window, ImGuiWindowPtr ignore_window) { }
+    public static void FocusWindow(ImGuiWindowPtr window) { }
+    public static void GcAwakeTransientWindowBuffers(ImGuiWindowPtr window) { }
+    public static void GcCompactTransientMiscBuffers() { }
+    public static void GcCompactTransientWindowBuffers(ImGuiWindowPtr window) { }
+    public static uint GetActiveID() { return default; }
+    public static ImDrawListPtr GetBackgroundDrawList() { return default; }
+    public static ImDrawListPtr GetBackgroundDrawList(ImGuiViewportPtr viewport) { return default; }
+    public static string GetClipboardText() { return default; }
+    public static uint GetColorU32(ImGuiCol idx) { return default; }
+    public static uint GetColorU32(ImGuiCol idx, float alpha_mul) { return default; }
+    public static uint GetColorU32(UnityEngine.Vector4 col) { return default; }
+    public static uint GetColorU32(uint col) { return default; }
+    public static int GetColumnIndex() { return default; }
+    public static float GetColumnNormFromOffset(ImGuiOldColumnsPtr columns, float offset) { return default; }
+    public static float GetColumnOffset() { return default; }
+    public static float GetColumnOffset(int column_index) { return default; }
+    public static float GetColumnOffsetFromNorm(ImGuiOldColumnsPtr columns, float offset_norm) { return default; }
+    public static float GetColumnWidth() { return default; }
+    public static float GetColumnWidth(int column_index) { return default; }
+    public static int GetColumnsCount() { return default; }
+    public static uint GetColumnsID(string str_id, int count) { return default; }
+    public static UnityEngine.Vector2 GetContentRegionAvail() { return default; }
+    public static UnityEngine.Vector2 GetContentRegionMax() { return default; }
+    public static UnityEngine.Vector2 GetContentRegionMaxAbs() { return default; }
+    public static System.IntPtr GetCurrentContext() { return default; }
+    public static ImGuiTablePtr GetCurrentTable() { return default; }
+    public static ImGuiWindowPtr GetCurrentWindow() { return default; }
+    public static ImGuiWindowPtr GetCurrentWindowRead() { return default; }
+    public static UnityEngine.Vector2 GetCursorPos() { return default; }
+    public static float GetCursorPosX() { return default; }
+    public static float GetCursorPosY() { return default; }
+    public static UnityEngine.Vector2 GetCursorScreenPos() { return default; }
+    public static UnityEngine.Vector2 GetCursorStartPos() { return default; }
+    public static ImFontPtr GetDefaultFont() { return default; }
+    public static ImGuiPayloadPtr GetDragDropPayload() { return default; }
+    public static ImDrawDataPtr GetDrawData() { return default; }
+    public static ImDrawListSharedDataPtr GetDrawListSharedData() { return default; }
+    public static uint GetFocusID() { return default; }
+    public static uint GetFocusScope() { return default; }
+    public static uint GetFocusedFocusScope() { return default; }
+    public static ImFontPtr GetFont() { return default; }
+    public static float GetFontSize() { return default; }
+    public static UnityEngine.Vector2 GetFontTexUvWhitePixel() { return default; }
+    public static ImDrawListPtr GetForegroundDrawList() { return default; }
+    public static ImDrawListPtr GetForegroundDrawList(ImGuiWindowPtr window) { return default; }
+    public static ImDrawListPtr GetForegroundDrawList(ImGuiViewportPtr viewport) { return default; }
+    public static int GetFrameCount() { return default; }
+    public static float GetFrameHeight() { return default; }
+    public static float GetFrameHeightWithSpacing() { return default; }
+    public static uint GetHoveredID() { return default; }
+    public static uint GetID(string str_id) { return default; }
+    public static uint GetID(string str_id_begin, string str_id_end) { return default; }
+    public static uint GetID(System.IntPtr ptr_id) { return default; }
+    public static uint GetIDWithSeed(string str_id_begin, string str_id_end, uint seed) { return default; }
+    public static ImGuiIOPtr GetIO() { return default; }
+    public static System.IntPtr GetInputTextState(uint id) { return default; }
+    public static ImGuiItemFlags GetItemFlags() { return default; }
+    public static uint GetItemID() { return default; }
+    public static UnityEngine.Vector2 GetItemRectMax() { return default; }
+    public static UnityEngine.Vector2 GetItemRectMin() { return default; }
+    public static UnityEngine.Vector2 GetItemRectSize() { return default; }
+    public static ImGuiItemStatusFlags GetItemStatusFlags() { return default; }
+    public static ImGuiKeyDataPtr GetKeyData(ImGuiKey key) { return default; }
+    public static int GetKeyIndex(ImGuiKey key) { return default; }
+    public static string GetKeyName(ImGuiKey key) { return default; }
+    public static int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate) { return default; }
+    public static ImGuiViewportPtr GetMainViewport() { return default; }
+    public static ImGuiModFlags GetMergedModFlags() { return default; }
+    public static int GetMouseClickedCount(ImGuiMouseButton button) { return default; }
+    public static ImGuiMouseCursor GetMouseCursor() { return default; }
+    public static UnityEngine.Vector2 GetMouseDragDelta() { return default; }
+    public static UnityEngine.Vector2 GetMouseDragDelta(ImGuiMouseButton button) { return default; }
+    public static UnityEngine.Vector2 GetMouseDragDelta(float lock_threshold) { return default; }
+    public static UnityEngine.Vector2 GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold) { return default; }
+    public static UnityEngine.Vector2 GetMousePos() { return default; }
+    public static UnityEngine.Vector2 GetMousePosOnOpeningCurrentPopup() { return default; }
+    public static float GetNavInputAmount(ImGuiNavInput n, ImGuiNavReadMode mode) { return default; }
+    public static UnityEngine.Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode) { return default; }
+    public static UnityEngine.Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor) { return default; }
+    public static UnityEngine.Vector2 GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor, float fast_factor) { return default; }
+    public static string GetNavInputName(ImGuiNavInput n) { return default; }
+    public static UnityEngine.Rect GetPopupAllowedExtentRect(ImGuiWindowPtr window) { return default; }
+    public static float GetScrollMaxX() { return default; }
+    public static float GetScrollMaxY() { return default; }
+    public static float GetScrollX() { return default; }
+    public static float GetScrollY() { return default; }
+    public static ImGuiStoragePtr GetStateStorage() { return default; }
+    public static ImGuiStylePtr GetStyle() { return default; }
+    public static string GetStyleColorName(ImGuiCol idx) { return default; }
+    public static unsafe UnityEngine.Vector4* GetStyleColorVec4(ImGuiCol idx) { return default; }
+    public static float GetTextLineHeight() { return default; }
+    public static float GetTextLineHeightWithSpacing() { return default; }
+    public static double GetTime() { return default; }
+    public static ImGuiWindowPtr GetTopMostAndVisiblePopupModal() { return default; }
+    public static ImGuiWindowPtr GetTopMostPopupModal() { return default; }
+    public static float GetTreeNodeToLabelSpacing() { return default; }
+    public static string GetVersion() { return default; }
+    public static UnityEngine.Vector2 GetWindowContentRegionMax() { return default; }
+    public static UnityEngine.Vector2 GetWindowContentRegionMin() { return default; }
+    public static ImDrawListPtr GetWindowDrawList() { return default; }
+    public static float GetWindowHeight() { return default; }
+    public static UnityEngine.Vector2 GetWindowPos() { return default; }
+    public static uint GetWindowResizeBorderID(ImGuiWindowPtr window, ImGuiDir dir) { return default; }
+    public static uint GetWindowResizeCornerID(ImGuiWindowPtr window, int n) { return default; }
+    public static uint GetWindowScrollbarID(ImGuiWindowPtr window, ImGuiAxis axis) { return default; }
+    public static UnityEngine.Rect GetWindowScrollbarRect(ImGuiWindowPtr window, ImGuiAxis axis) { return default; }
+    public static UnityEngine.Vector2 GetWindowSize() { return default; }
+    public static float GetWindowWidth() { return default; }
+    public static int ImAbs(int x) { return default; }
+    public static float ImAbs(float x) { return default; }
+    public static double ImAbs(double x) { return default; }
+    public static uint ImAlphaBlendColors(uint col_a, uint col_b) { return default; }
+    public static UnityEngine.Vector2 ImBezierCubicCalc(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, float t) { return default; }
+    public static UnityEngine.Vector2 ImBezierCubicClosestPoint(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 p, int num_segments) { return default; }
+    public static UnityEngine.Vector2 ImBezierCubicClosestPointCasteljau(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 p, float tess_tol) { return default; }
+    public static UnityEngine.Vector2 ImBezierQuadraticCalc(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, float t) { return default; }
+    public static void ImBitArrayClearBit(ref uint arr, int n) { }
+    public static void ImBitArraySetBit(ref uint arr, int n) { }
+    public static void ImBitArraySetBitRange(ref uint arr, int n, int n2) { }
+    public static bool ImBitArrayTestBit(ref uint arr, int n) { return default; }
+    public static bool ImCharIsBlankA(byte c) { return default; }
+    public static bool ImCharIsBlankW(uint c) { return default; }
+    public static UnityEngine.Vector2 ImClamp(UnityEngine.Vector2 v, UnityEngine.Vector2 mn, UnityEngine.Vector2 mx) { return default; }
+    public static float ImDot(UnityEngine.Vector2 a, UnityEngine.Vector2 b) { return default; }
+    public static unsafe void* ImFileLoadToMemory(string filename, string mode) { return default; }
+    public static unsafe void* ImFileLoadToMemory(string filename, string mode, out uint out_file_size) { out_file_size = default; return default; }
+    public static unsafe void* ImFileLoadToMemory(string filename, string mode, int padding_bytes) { return default; }
+    public static unsafe void* ImFileLoadToMemory(string filename, string mode, out uint out_file_size, int padding_bytes) { out_file_size = default; return default; }
+    public static float ImFloor(float f) { return default; }
+    public static UnityEngine.Vector2 ImFloor(UnityEngine.Vector2 v) { return default; }
+    public static float ImFloorSigned(float f) { return default; }
+    public static UnityEngine.Vector2 ImFloorSigned(UnityEngine.Vector2 v) { return default; }
+    public static void ImFontAtlasBuildFinish(ImFontAtlasPtr atlas) { }
+    public static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas) { }
+    public static void ImFontAtlasBuildMultiplyCalcLookupTable(out byte out_table, float in_multiply_factor) { out_table = default; }
+    public static void ImFontAtlasBuildMultiplyRectAlpha8(ref byte table, ref byte pixels, int x, int y, int w, int h, int stride) { }
+    public static void ImFontAtlasBuildPackCustomRects(ImFontAtlasPtr atlas, System.IntPtr stbrp_context_opaque) { }
+    public static void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string in_str, byte in_marker_char, uint in_marker_pixel_value) { }
+    public static void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string in_str, byte in_marker_char, byte in_marker_pixel_value) { }
+    public static void ImFontAtlasBuildSetupFont(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr font_config, float ascent, float descent) { }
+    public static ImFontBuilderIOPtr ImFontAtlasGetBuilderForStbTruetype() { return default; }
+    public static int ImFormatString(ref byte buf, uint buf_size, string fmt) { return default; }
+    public static unsafe void ImFormatStringToTempBuffer(out byte* out_buf, out byte* out_buf_end, string fmt) { out_buf_end = default; out_buf = default; }
+    public static unsafe void ImFormatStringToTempBufferV(out byte* out_buf, out byte* out_buf_end, string fmt) { out_buf_end = default; out_buf = default; }
+    public static int ImFormatStringV(ref byte buf, uint buf_size, string fmt) { return default; }
+    public static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy) { return default; }
+    public static uint ImHashData(System.IntPtr data, uint data_size) { return default; }
+    public static uint ImHashData(System.IntPtr data, uint data_size, uint seed) { return default; }
+    public static uint ImHashStr(string data) { return default; }
+    public static uint ImHashStr(string data, uint data_size) { return default; }
+    public static uint ImHashStr(string data, uint data_size, uint seed) { return default; }
+    public static float ImInvLength(UnityEngine.Vector2 lhs, float fail_value) { return default; }
+    public static bool ImIsFloatAboveGuaranteedIntegerPrecision(float f) { return default; }
+    public static bool ImIsPowerOfTwo(int v) { return default; }
+    public static bool ImIsPowerOfTwo(ulong v) { return default; }
+    public static float ImLengthSqr(UnityEngine.Vector2 lhs) { return default; }
+    public static float ImLengthSqr(UnityEngine.Vector4 lhs) { return default; }
+    public static UnityEngine.Vector2 ImLerp(UnityEngine.Vector2 a, UnityEngine.Vector2 b, float t) { return default; }
+    public static UnityEngine.Vector2 ImLerp(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 t) { return default; }
+    public static UnityEngine.Vector4 ImLerp(UnityEngine.Vector4 a, UnityEngine.Vector4 b, float t) { return default; }
+    public static UnityEngine.Vector2 ImLineClosestPoint(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 p) { return default; }
+    public static float ImLinearSweep(float current, float target, float speed) { return default; }
+    public static float ImLog(float x) { return default; }
+    public static double ImLog(double x) { return default; }
+    public static UnityEngine.Vector2 ImMax(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { return default; }
+    public static UnityEngine.Vector2 ImMin(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { return default; }
+    public static int ImModPositive(int a, int b) { return default; }
+    public static UnityEngine.Vector2 ImMul(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { return default; }
+    public static string ImParseFormatFindEnd(string format) { return default; }
+    public static string ImParseFormatFindStart(string format) { return default; }
+    public static int ImParseFormatPrecision(string format, int default_value) { return default; }
+    public static void ImParseFormatSanitizeForPrinting(string fmt_in, ref byte fmt_out, uint fmt_out_size) { }
+    public static string ImParseFormatSanitizeForScanning(string fmt_in, ref byte fmt_out, uint fmt_out_size) { return default; }
+    public static string ImParseFormatTrimDecorations(string format, ref byte buf, uint buf_size) { return default; }
+    public static float ImPow(float x, float y) { return default; }
+    public static double ImPow(double x, double y) { return default; }
+    public static void ImQsort(System.IntPtr @base, uint count, uint size_of_element, System.IntPtr compare_func) { }
+    public static UnityEngine.Vector2 ImRotate(UnityEngine.Vector2 v, float cos_a, float sin_a) { return default; }
+    public static float ImRsqrt(float x) { return default; }
+    public static double ImRsqrt(double x) { return default; }
+    public static float ImSaturate(float f) { return default; }
+    public static float ImSign(float x) { return default; }
+    public static double ImSign(double x) { return default; }
+    public static string ImStrSkipBlank(string str) { return default; }
+    public static void ImStrTrimBlanks(ref byte str) { }
+    public static unsafe ushort* ImStrbolW(ref ushort buf_mid_line, ref ushort buf_begin) { return default; }
+    public static string ImStrchrRange(string str_begin, string str_end, byte c) { return default; }
+    public static unsafe byte* ImStrdup(string str) { return default; }
+    public static unsafe byte* ImStrdupcpy(ref byte dst, ref uint p_dst_size, string str) { return default; }
+    public static string ImStreolRange(string str, string str_end) { return default; }
+    public static int ImStricmp(string str1, string str2) { return default; }
+    public static string ImStristr(string haystack, string haystack_end, string needle, string needle_end) { return default; }
+    public static int ImStrlenW(ref ushort str) { return default; }
+    public static void ImStrncpy(ref byte dst, string src, uint count) { }
+    public static int ImStrnicmp(string str1, string str2, uint count) { return default; }
+    public static int ImTextCharFromUtf8(out uint out_char, string in_text, string in_text_end) { out_char = default; return default; }
+    public static string ImTextCharToUtf8(out byte out_buf, uint c) { out_buf = default; return default; }
+    public static int ImTextCountCharsFromUtf8(string in_text, string in_text_end) { return default; }
+    public static int ImTextCountUtf8BytesFromChar(string in_text, string in_text_end) { return default; }
+    public static int ImTextCountUtf8BytesFromStr(ref ushort in_text, ref ushort in_text_end) { return default; }
+    public static int ImTextStrFromUtf8(out ushort out_buf, int out_buf_size, string in_text, string in_text_end) { out_buf = default; return default; }
+    public static unsafe int ImTextStrFromUtf8(out ushort out_buf, int out_buf_size, string in_text, string in_text_end, ref byte* in_remaining) { out_buf = default; return default; }
+    public static int ImTextStrToUtf8(out byte out_buf, int out_buf_size, ref ushort in_text, ref ushort in_text_end) { out_buf = default; return default; }
+    public static float ImTriangleArea(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c) { return default; }
+    public static void ImTriangleBarycentricCoords(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p, out float out_u, out float out_v, out float out_w) { out_w = default; out_v = default; out_u = default; }
+    public static UnityEngine.Vector2 ImTriangleClosestPoint(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p) { return default; }
+    public static bool ImTriangleContainsPoint(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p) { return default; }
+    public static int ImUpperPowerOfTwo(int v) { return default; }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector4 tint_col) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector4 tint_col) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector4 tint_col, UnityEngine.Vector4 border_col) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector4 tint_col) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector4 tint_col, UnityEngine.Vector4 border_col) { }
+    public static void Image(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector4 tint_col, UnityEngine.Vector4 border_col) { }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, int frame_padding) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, int frame_padding) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, int frame_padding, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, int frame_padding) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, int frame_padding, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, int frame_padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, int frame_padding, UnityEngine.Vector4 bg_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, int frame_padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, int frame_padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static bool ImageButtonEx(uint id, System.IntPtr texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector2 padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static void Indent() { }
+    public static void Indent(float indent_w) { }
+    public static void Initialize() { }
+    public static bool InputDouble(string label, ref double v) { return default; }
+    public static bool InputDouble(string label, ref double v, double step) { return default; }
+    public static bool InputDouble(string label, ref double v, string format) { return default; }
+    public static bool InputDouble(string label, ref double v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, double step_fast) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, string format) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputDouble(string label, ref double v, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, double step_fast, string format) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, double step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputDouble(string label, ref double v, double step, double step_fast, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v) { return default; }
+    public static bool InputFloat(string label, ref float v, float step) { return default; }
+    public static bool InputFloat(string label, ref float v, string format) { return default; }
+    public static bool InputFloat(string label, ref float v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, float step_fast) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, string format) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, float step_fast, string format) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, float step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat(string label, ref float v, float step, float step_fast, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat2(string label, ref UnityEngine.Vector2 v) { return default; }
+    public static bool InputFloat2(string label, ref UnityEngine.Vector2 v, string format) { return default; }
+    public static bool InputFloat2(string label, ref UnityEngine.Vector2 v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat2(string label, ref UnityEngine.Vector2 v, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat3(string label, ref UnityEngine.Vector3 v) { return default; }
+    public static bool InputFloat3(string label, ref UnityEngine.Vector3 v, string format) { return default; }
+    public static bool InputFloat3(string label, ref UnityEngine.Vector3 v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat3(string label, ref UnityEngine.Vector3 v, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat4(string label, ref UnityEngine.Vector4 v) { return default; }
+    public static bool InputFloat4(string label, ref UnityEngine.Vector4 v, string format) { return default; }
+    public static bool InputFloat4(string label, ref UnityEngine.Vector4 v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputFloat4(string label, ref UnityEngine.Vector4 v, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt(string label, ref int v) { return default; }
+    public static bool InputInt(string label, ref int v, int step) { return default; }
+    public static bool InputInt(string label, ref int v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt(string label, ref int v, int step, int step_fast) { return default; }
+    public static bool InputInt(string label, ref int v, int step, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt(string label, ref int v, int step, int step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt2(string label, ref int v) { return default; }
+    public static bool InputInt2(string label, ref int v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt3(string label, ref int v) { return default; }
+    public static bool InputInt3(string label, ref int v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputInt4(string label, ref int v) { return default; }
+    public static bool InputInt4(string label, ref int v, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, string format) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, System.IntPtr p_step_fast) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, string format) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, System.IntPtr p_step_fast, string format) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, System.IntPtr p_step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, System.IntPtr p_step_fast, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, string format) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, System.IntPtr p_step_fast) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, string format) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, System.IntPtr p_step_fast, string format) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, System.IntPtr p_step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, System.IntPtr p_step_fast, string format, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, UnityEngine.Vector2 size_arg, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, UnityEngine.Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, UnityEngine.Vector2 size_arg, ImGuiInputTextFlags flags, System.IntPtr user_data) { return default; }
+    public static bool InputTextEx(string label, string hint, ref byte buf, int buf_size, UnityEngine.Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref byte buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, System.IntPtr user_data) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, System.IntPtr user_data) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref byte buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InvisibleButton(string str_id, UnityEngine.Vector2 size) { return default; }
+    public static bool InvisibleButton(string str_id, UnityEngine.Vector2 size, ImGuiButtonFlags flags) { return default; }
+    public static bool IsActiveIdUsingKey(ImGuiKey key) { return default; }
+    public static bool IsActiveIdUsingNavDir(ImGuiDir dir) { return default; }
+    public static bool IsActiveIdUsingNavInput(ImGuiNavInput input) { return default; }
+    public static bool IsAnyItemActive() { return default; }
+    public static bool IsAnyItemFocused() { return default; }
+    public static bool IsAnyItemHovered() { return default; }
+    public static bool IsAnyMouseDown() { return default; }
+    public static bool IsClippedEx(UnityEngine.Rect bb, uint id) { return default; }
+    public static bool IsDragDropActive() { return default; }
+    public static bool IsDragDropPayloadBeingAccepted() { return default; }
+    public static bool IsGamepadKey(ImGuiKey key) { return default; }
+    public static bool IsItemActivated() { return default; }
+    public static bool IsItemActive() { return default; }
+    public static bool IsItemClicked() { return default; }
+    public static bool IsItemClicked(ImGuiMouseButton mouse_button) { return default; }
+    public static bool IsItemDeactivated() { return default; }
+    public static bool IsItemDeactivatedAfterEdit() { return default; }
+    public static bool IsItemEdited() { return default; }
+    public static bool IsItemFocused() { return default; }
+    public static bool IsItemHovered() { return default; }
+    public static bool IsItemHovered(ImGuiHoveredFlags flags) { return default; }
+    public static bool IsItemToggledOpen() { return default; }
+    public static bool IsItemToggledSelection() { return default; }
+    public static bool IsItemVisible() { return default; }
+    public static bool IsKeyDown(ImGuiKey key) { return default; }
+    public static bool IsKeyPressed(ImGuiKey key) { return default; }
+    public static bool IsKeyPressed(ImGuiKey key, bool repeat) { return default; }
+    public static bool IsKeyPressedMap(ImGuiKey key) { return default; }
+    public static bool IsKeyPressedMap(ImGuiKey key, bool repeat) { return default; }
+    public static bool IsKeyReleased(ImGuiKey key) { return default; }
+    public static bool IsLegacyKey(ImGuiKey key) { return default; }
+    public static bool IsMouseClicked(ImGuiMouseButton button) { return default; }
+    public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat) { return default; }
+    public static bool IsMouseDoubleClicked(ImGuiMouseButton button) { return default; }
+    public static bool IsMouseDown(ImGuiMouseButton button) { return default; }
+    public static bool IsMouseDragPastThreshold(ImGuiMouseButton button) { return default; }
+    public static bool IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold) { return default; }
+    public static bool IsMouseDragging(ImGuiMouseButton button) { return default; }
+    public static bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold) { return default; }
+    public static bool IsMouseHoveringRect(UnityEngine.Vector2 r_min, UnityEngine.Vector2 r_max) { return default; }
+    public static bool IsMouseHoveringRect(UnityEngine.Vector2 r_min, UnityEngine.Vector2 r_max, bool clip) { return default; }
+    public static bool IsMousePosValid() { return default; }
+    public static bool IsMousePosValid(ref UnityEngine.Vector2 mouse_pos) { return default; }
+    public static bool IsMouseReleased(ImGuiMouseButton button) { return default; }
+    public static bool IsNamedKey(ImGuiKey key) { return default; }
+    public static bool IsNavInputDown(ImGuiNavInput n) { return default; }
+    public static bool IsNavInputTest(ImGuiNavInput n, ImGuiNavReadMode rm) { return default; }
+    public static bool IsPopupOpen(string str_id) { return default; }
+    public static bool IsPopupOpen(string str_id, ImGuiPopupFlags flags) { return default; }
+    public static bool IsPopupOpen(uint id, ImGuiPopupFlags popup_flags) { return default; }
+    public static bool IsRectVisible(UnityEngine.Vector2 size) { return default; }
+    public static bool IsRectVisible(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max) { return default; }
+    public static bool IsWindowAbove(ImGuiWindowPtr potential_above, ImGuiWindowPtr potential_below) { return default; }
+    public static bool IsWindowAppearing() { return default; }
+    public static bool IsWindowChildOf(ImGuiWindowPtr window, ImGuiWindowPtr potential_parent, bool popup_hierarchy) { return default; }
+    public static bool IsWindowCollapsed() { return default; }
+    public static bool IsWindowFocused() { return default; }
+    public static bool IsWindowFocused(ImGuiFocusedFlags flags) { return default; }
+    public static bool IsWindowHovered() { return default; }
+    public static bool IsWindowHovered(ImGuiHoveredFlags flags) { return default; }
+    public static bool IsWindowNavFocusable(ImGuiWindowPtr window) { return default; }
+    public static bool IsWindowWithinBeginStackOf(ImGuiWindowPtr window, ImGuiWindowPtr potential_parent) { return default; }
+    public static bool ItemAdd(UnityEngine.Rect bb, uint id) { return default; }
+    public static bool ItemAdd(UnityEngine.Rect bb, uint id, ref UnityEngine.Rect nav_bb) { return default; }
+    public static bool ItemAdd(UnityEngine.Rect bb, uint id, ImGuiItemFlags extra_flags) { return default; }
+    public static bool ItemAdd(UnityEngine.Rect bb, uint id, ref UnityEngine.Rect nav_bb, ImGuiItemFlags extra_flags) { return default; }
+    public static bool ItemHoverable(UnityEngine.Rect bb, uint id) { return default; }
+    public static void ItemSize(UnityEngine.Vector2 size) { }
+    public static void ItemSize(UnityEngine.Vector2 size, float text_baseline_y) { }
+    public static void ItemSize(UnityEngine.Rect bb) { }
+    public static void ItemSize(UnityEngine.Rect bb, float text_baseline_y) { }
+    public static void KeepAliveID(uint id) { }
+    public static void LabelText(string label, string fmt) { }
+    public static void LabelTextV(string label, string fmt) { }
+    public static bool ListBox(string label, ref int current_item, System.String[] items, int items_count) { return default; }
+    public static bool ListBox(string label, ref int current_item, System.String[] items, int items_count, int height_in_items) { return default; }
+    public static bool ListBox(string label, ref int current_item, System.IntPtr items_getter, System.IntPtr data, int items_count) { return default; }
+    public static bool ListBox(string label, ref int current_item, System.IntPtr items_getter, System.IntPtr data, int items_count, int height_in_items) { return default; }
+    public static void LoadIniSettingsFromDisk(string ini_filename) { }
+    public static void LoadIniSettingsFromMemory(string ini_data) { }
+    public static void LoadIniSettingsFromMemory(string ini_data, uint ini_size) { }
+    public static void LogBegin(ImGuiLogType type, int auto_open_depth) { }
+    public static void LogButtons() { }
+    public static void LogFinish() { }
+    public static void LogRenderedText(ref UnityEngine.Vector2 ref_pos, string text) { }
+    public static void LogRenderedText(ref UnityEngine.Vector2 ref_pos, string text, string text_end) { }
+    public static void LogSetNextTextDecoration(string prefix, string suffix) { }
+    public static void LogText(string fmt) { }
+    public static void LogTextV(string fmt) { }
+    public static void LogToBuffer() { }
+    public static void LogToBuffer(int auto_open_depth) { }
+    public static void LogToClipboard() { }
+    public static void LogToClipboard(int auto_open_depth) { }
+    public static void LogToFile() { }
+    public static void LogToFile(int auto_open_depth) { }
+    public static void LogToFile(string filename) { }
+    public static void LogToFile(int auto_open_depth, string filename) { }
+    public static void LogToTTY() { }
+    public static void LogToTTY(int auto_open_depth) { }
+    public static void MarkIniSettingsDirty() { }
+    public static void MarkIniSettingsDirty(ImGuiWindowPtr window) { }
+    public static void MarkItemEdited(uint id) { }
+    public static unsafe void* MemAlloc(uint size) { return default; }
+    public static void MemFree(System.IntPtr ptr) { }
+    public static bool MenuItem(string label) { return default; }
+    public static bool MenuItem(string label, string shortcut) { return default; }
+    public static bool MenuItem(string label, bool selected) { return default; }
+    public static bool MenuItem(string label, string shortcut, bool selected) { return default; }
+    public static bool MenuItem(string label, bool selected, bool enabled) { return default; }
+    public static bool MenuItem(string label, string shortcut, bool selected, bool enabled) { return default; }
+    public static bool MenuItem(string label, string shortcut, ref bool p_selected) { return default; }
+    public static bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled) { return default; }
+    public static bool MenuItemEx(string label, string icon) { return default; }
+    public static bool MenuItemEx(string label, string icon, string shortcut) { return default; }
+    public static bool MenuItemEx(string label, string icon, bool selected) { return default; }
+    public static bool MenuItemEx(string label, string icon, string shortcut, bool selected) { return default; }
+    public static bool MenuItemEx(string label, string icon, bool selected, bool enabled) { return default; }
+    public static bool MenuItemEx(string label, string icon, string shortcut, bool selected, bool enabled) { return default; }
+    public static void NavInitRequestApplyResult() { }
+    public static void NavInitWindow(ImGuiWindowPtr window, bool force_reinit) { }
+    public static void NavMoveRequestApplyResult() { }
+    public static bool NavMoveRequestButNoResultYet() { return default; }
+    public static void NavMoveRequestCancel() { }
+    public static void NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags) { }
+    public static void NavMoveRequestResolveWithLastItem(System.IntPtr result) { }
+    public static void NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags) { }
+    public static void NavMoveRequestTryWrapping(ImGuiWindowPtr window, ImGuiNavMoveFlags move_flags) { }
+    public static void NewFrame() { }
+    public static void NewLine() { }
+    public static void NextColumn() { }
+    public static void OpenPopup(string str_id) { }
+    public static void OpenPopup(string str_id, ImGuiPopupFlags popup_flags) { }
+    public static void OpenPopup(uint id) { }
+    public static void OpenPopup(uint id, ImGuiPopupFlags popup_flags) { }
+    public static void OpenPopupEx(uint id) { }
+    public static void OpenPopupEx(uint id, ImGuiPopupFlags popup_flags) { }
+    public static void OpenPopupOnItemClick() { }
+    public static void OpenPopupOnItemClick(string str_id) { }
+    public static void OpenPopupOnItemClick(ImGuiPopupFlags popup_flags) { }
+    public static void OpenPopupOnItemClick(string str_id, ImGuiPopupFlags popup_flags) { }
+    public static int PlotEx(ImGuiPlotType plot_type, string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 frame_size) { return default; }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotHistogram(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, ref System.Single[] values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PlotLines(string label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void PopAllowKeyboardFocus() { }
+    public static void PopButtonRepeat() { }
+    public static void PopClipRect() { }
+    public static void PopColumnsBackground() { }
+    public static void PopFocusScope() { }
+    public static void PopFont() { }
+    public static void PopID() { }
+    public static void PopItemFlag() { }
+    public static void PopItemWidth() { }
+    public static void PopStyleColor() { }
+    public static void PopStyleColor(int count) { }
+    public static void PopStyleVar() { }
+    public static void PopStyleVar(int count) { }
+    public static void PopTextWrapPos() { }
+    public static void ProgressBar(float fraction) { }
+    public static void ProgressBar(float fraction, UnityEngine.Vector2 size_arg) { }
+    public static void ProgressBar(float fraction, string overlay) { }
+    public static void ProgressBar(float fraction, UnityEngine.Vector2 size_arg, string overlay) { }
+    public static void PushAllowKeyboardFocus(bool allow_keyboard_focus) { }
+    public static void PushButtonRepeat(bool repeat) { }
+    public static void PushClipRect(UnityEngine.Vector2 clip_rect_min, UnityEngine.Vector2 clip_rect_max, bool intersect_with_current_clip_rect) { }
+    public static void PushColumnClipRect(int column_index) { }
+    public static void PushColumnsBackground() { }
+    public static void PushFocusScope(uint id) { }
+    public static void PushFont(ImFontPtr font) { }
+    public static void PushID(string str_id) { }
+    public static void PushID(string str_id_begin, string str_id_end) { }
+    public static void PushID(System.IntPtr ptr_id) { }
+    public static void PushID(int int_id) { }
+    public static void PushItemFlag(ImGuiItemFlags option, bool enabled) { }
+    public static void PushItemWidth(float item_width) { }
+    public static void PushMultiItemsWidths(int components, float width_full) { }
+    public static void PushOverrideID(uint id) { }
+    public static void PushStyleColor(ImGuiCol idx, uint col) { }
+    public static void PushStyleColor(ImGuiCol idx, UnityEngine.Vector4 col) { }
+    public static void PushStyleVar(ImGuiStyleVar idx, float val) { }
+    public static void PushStyleVar(ImGuiStyleVar idx, UnityEngine.Vector2 val) { }
+    public static void PushTextWrapPos() { }
+    public static void PushTextWrapPos(float wrap_local_pos_x) { }
+    public static bool RadioButton(string label, bool active) { return default; }
+    public static bool RadioButton(string label, ref int v, int v_button) { return default; }
+    public static void RemoveContextHook(System.IntPtr context, uint hook_to_remove) { }
+    public static void RemoveSettingsHandler(string type_name) { }
+    public static void Render() { }
+    public static void RenderArrow(ImDrawListPtr draw_list, UnityEngine.Vector2 pos, uint col, ImGuiDir dir) { }
+    public static void RenderArrow(ImDrawListPtr draw_list, UnityEngine.Vector2 pos, uint col, ImGuiDir dir, float scale) { }
+    public static void RenderArrowPointingAt(ImDrawListPtr draw_list, UnityEngine.Vector2 pos, UnityEngine.Vector2 half_sz, ImGuiDir direction, uint col) { }
+    public static void RenderBullet(ImDrawListPtr draw_list, UnityEngine.Vector2 pos, uint col) { }
+    public static void RenderCheckMark(ImDrawListPtr draw_list, UnityEngine.Vector2 pos, uint col, float sz) { }
+    public static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float grid_step, UnityEngine.Vector2 grid_off) { }
+    public static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float grid_step, UnityEngine.Vector2 grid_off, float rounding) { }
+    public static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float grid_step, UnityEngine.Vector2 grid_off, ImDrawFlags flags) { }
+    public static void RenderColorRectWithAlphaCheckerboard(ImDrawListPtr draw_list, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float grid_step, UnityEngine.Vector2 grid_off, float rounding, ImDrawFlags flags) { }
+    public static void RenderFrame(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col) { }
+    public static void RenderFrame(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, bool border) { }
+    public static void RenderFrame(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float rounding) { }
+    public static void RenderFrame(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, bool border, float rounding) { }
+    public static void RenderFrameBorder(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max) { }
+    public static void RenderFrameBorder(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, float rounding) { }
+    public static void RenderMouseCursor(UnityEngine.Vector2 pos, float scale, ImGuiMouseCursor mouse_cursor, uint col_fill, uint col_border, uint col_shadow) { }
+    public static void RenderNavHighlight(UnityEngine.Rect bb, uint id) { }
+    public static void RenderNavHighlight(UnityEngine.Rect bb, uint id, ImGuiNavHighlightFlags flags) { }
+    public static void RenderRectFilledRangeH(ImDrawListPtr draw_list, UnityEngine.Rect rect, uint col, float x_start_norm, float x_end_norm, float rounding) { }
+    public static void RenderRectFilledWithHole(ImDrawListPtr draw_list, UnityEngine.Rect outer, UnityEngine.Rect inner, uint col, float rounding) { }
+    public static void RenderText(UnityEngine.Vector2 pos, string text) { }
+    public static void RenderText(UnityEngine.Vector2 pos, string text, string text_end) { }
+    public static void RenderText(UnityEngine.Vector2 pos, string text, bool hide_text_after_hash) { }
+    public static void RenderText(UnityEngine.Vector2 pos, string text, string text_end, bool hide_text_after_hash) { }
+    public static void RenderTextClipped(UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known) { }
+    public static void RenderTextClipped(UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, UnityEngine.Vector2 align) { }
+    public static void RenderTextClipped(UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, ref UnityEngine.Rect clip_rect) { }
+    public static void RenderTextClipped(UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, UnityEngine.Vector2 align, ref UnityEngine.Rect clip_rect) { }
+    public static void RenderTextClippedEx(ImDrawListPtr draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known) { }
+    public static void RenderTextClippedEx(ImDrawListPtr draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, UnityEngine.Vector2 align) { }
+    public static void RenderTextClippedEx(ImDrawListPtr draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, ref UnityEngine.Rect clip_rect) { }
+    public static void RenderTextClippedEx(ImDrawListPtr draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known, UnityEngine.Vector2 align, ref UnityEngine.Rect clip_rect) { }
+    public static void RenderTextEllipsis(ImDrawListPtr draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, float clip_max_x, float ellipsis_max_x, string text, string text_end, ref UnityEngine.Vector2 text_size_if_known) { }
+    public static void RenderTextWrapped(UnityEngine.Vector2 pos, string text, string text_end, float wrap_width) { }
+    public static void ResetMouseDragDelta() { }
+    public static void ResetMouseDragDelta(ImGuiMouseButton button) { }
+    public static void SameLine() { }
+    public static void SameLine(float offset_from_start_x) { }
+    public static void SameLine(float offset_from_start_x, float spacing) { }
+    public static void SaveIniSettingsToDisk(string ini_filename) { }
+    public static string SaveIniSettingsToMemory() { return default; }
+    public static string SaveIniSettingsToMemory(out uint out_ini_size) { out_ini_size = default; return default; }
+    public static void ScrollToBringRectIntoView(ImGuiWindowPtr window, UnityEngine.Rect rect) { }
+    public static void ScrollToItem() { }
+    public static void ScrollToItem(ImGuiScrollFlags flags) { }
+    public static void ScrollToRect(ImGuiWindowPtr window, UnityEngine.Rect rect) { }
+    public static void ScrollToRect(ImGuiWindowPtr window, UnityEngine.Rect rect, ImGuiScrollFlags flags) { }
+    public static UnityEngine.Vector2 ScrollToRectEx(ImGuiWindowPtr window, UnityEngine.Rect rect) { return default; }
+    public static UnityEngine.Vector2 ScrollToRectEx(ImGuiWindowPtr window, UnityEngine.Rect rect, ImGuiScrollFlags flags) { return default; }
+    public static void Scrollbar(ImGuiAxis axis) { }
+    public static bool ScrollbarEx(UnityEngine.Rect bb, uint id, ImGuiAxis axis, ref long p_scroll_v, long avail_v, long contents_v, ImDrawFlags flags) { return default; }
+    public static bool Selectable(string label) { return default; }
+    public static bool Selectable(string label, bool selected) { return default; }
+    public static bool Selectable(string label, ImGuiSelectableFlags flags) { return default; }
+    public static bool Selectable(string label, UnityEngine.Vector2 size) { return default; }
+    public static bool Selectable(string label, bool selected, ImGuiSelectableFlags flags) { return default; }
+    public static bool Selectable(string label, bool selected, UnityEngine.Vector2 size) { return default; }
+    public static bool Selectable(string label, ImGuiSelectableFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static bool Selectable(string label, bool selected, ImGuiSelectableFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static bool Selectable(string label, ref bool p_selected) { return default; }
+    public static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags) { return default; }
+    public static bool Selectable(string label, ref bool p_selected, UnityEngine.Vector2 size) { return default; }
+    public static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static void Separator() { }
+    public static void SeparatorEx(ImGuiSeparatorFlags flags) { }
+    public static void SetActiveID(uint id, ImGuiWindowPtr window) { }
+    public static void SetActiveIdUsingKey(ImGuiKey key) { }
+    public static void SetActiveIdUsingNavAndKeys() { }
+    public static void SetClipboardText(string text) { }
+    public static void SetColorEditOptions(ImGuiColorEditFlags flags) { }
+    public static void SetColumnOffset(int column_index, float offset_x) { }
+    public static void SetColumnWidth(int column_index, float width) { }
+    public static void SetCurrentContext(System.IntPtr ctx) { }
+    public static void SetCurrentFont(ImFontPtr font) { }
+    public static void SetCursorPos(UnityEngine.Vector2 local_pos) { }
+    public static void SetCursorPosX(float local_x) { }
+    public static void SetCursorPosY(float local_y) { }
+    public static void SetCursorScreenPos(UnityEngine.Vector2 pos) { }
+    public static bool SetDragDropPayload(string type, System.IntPtr data, uint sz) { return default; }
+    public static bool SetDragDropPayload(string type, System.IntPtr data, uint sz, ImGuiCond cond) { return default; }
+    public static void SetFocusID(uint id, ImGuiWindowPtr window) { }
+    public static void SetHoveredID(uint id) { }
+    public static void SetItemAllowOverlap() { }
+    public static void SetItemDefaultFocus() { }
+    public static void SetItemUsingMouseWheel() { }
+    public static void SetKeyboardFocusHere() { }
+    public static void SetKeyboardFocusHere(int offset) { }
+    public static void SetLastItemData(uint item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, UnityEngine.Rect item_rect) { }
+    public static void SetMouseCursor(ImGuiMouseCursor cursor_type) { }
+    public static void SetNavID(uint id, ImGuiNavLayer nav_layer, uint focus_scope_id, UnityEngine.Rect rect_rel) { }
+    public static void SetNavWindow(ImGuiWindowPtr window) { }
+    public static void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard) { }
+    public static void SetNextFrameWantCaptureMouse(bool want_capture_mouse) { }
+    public static void SetNextItemOpen(bool is_open) { }
+    public static void SetNextItemOpen(bool is_open, ImGuiCond cond) { }
+    public static void SetNextItemWidth(float item_width) { }
+    public static void SetNextWindowBgAlpha(float alpha) { }
+    public static void SetNextWindowCollapsed(bool collapsed) { }
+    public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond) { }
+    public static void SetNextWindowContentSize(UnityEngine.Vector2 size) { }
+    public static void SetNextWindowFocus() { }
+    public static void SetNextWindowPos(UnityEngine.Vector2 pos) { }
+    public static void SetNextWindowPos(UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static void SetNextWindowPos(UnityEngine.Vector2 pos, UnityEngine.Vector2 pivot) { }
+    public static void SetNextWindowPos(UnityEngine.Vector2 pos, ImGuiCond cond, UnityEngine.Vector2 pivot) { }
+    public static void SetNextWindowScroll(UnityEngine.Vector2 scroll) { }
+    public static void SetNextWindowSize(UnityEngine.Vector2 size) { }
+    public static void SetNextWindowSize(UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static void SetNextWindowSizeConstraints(UnityEngine.Vector2 size_min, UnityEngine.Vector2 size_max) { }
+    public static void SetNextWindowSizeConstraints(UnityEngine.Vector2 size_min, UnityEngine.Vector2 size_max, ImGuiSizeCallback custom_callback) { }
+    public static void SetNextWindowSizeConstraints(UnityEngine.Vector2 size_min, UnityEngine.Vector2 size_max, System.IntPtr custom_callback_data) { }
+    public static void SetNextWindowSizeConstraints(UnityEngine.Vector2 size_min, UnityEngine.Vector2 size_max, ImGuiSizeCallback custom_callback, System.IntPtr custom_callback_data) { }
+    public static void SetScrollFromPosX(float local_x) { }
+    public static void SetScrollFromPosX(float local_x, float center_x_ratio) { }
+    public static void SetScrollFromPosX(ImGuiWindowPtr window, float local_x, float center_x_ratio) { }
+    public static void SetScrollFromPosY(float local_y) { }
+    public static void SetScrollFromPosY(float local_y, float center_y_ratio) { }
+    public static void SetScrollFromPosY(ImGuiWindowPtr window, float local_y, float center_y_ratio) { }
+    public static void SetScrollHereX() { }
+    public static void SetScrollHereX(float center_x_ratio) { }
+    public static void SetScrollHereY() { }
+    public static void SetScrollHereY(float center_y_ratio) { }
+    public static void SetScrollX(float scroll_x) { }
+    public static void SetScrollX(ImGuiWindowPtr window, float scroll_x) { }
+    public static void SetScrollY(float scroll_y) { }
+    public static void SetScrollY(ImGuiWindowPtr window, float scroll_y) { }
+    public static void SetStateStorage(ImGuiStoragePtr storage) { }
+    public static void SetTabItemClosed(string tab_or_docked_window_label) { }
+    public static void SetTooltip(string fmt) { }
+    public static void SetTooltipV(string fmt) { }
+    public static void SetWindowClipRectBeforeSetChannel(ImGuiWindowPtr window, UnityEngine.Rect clip_rect) { }
+    public static void SetWindowCollapsed(bool collapsed) { }
+    public static void SetWindowCollapsed(bool collapsed, ImGuiCond cond) { }
+    public static void SetWindowCollapsed(string name, bool collapsed) { }
+    public static void SetWindowCollapsed(string name, bool collapsed, ImGuiCond cond) { }
+    public static void SetWindowCollapsed(ImGuiWindowPtr window, bool collapsed) { }
+    public static void SetWindowCollapsed(ImGuiWindowPtr window, bool collapsed, ImGuiCond cond) { }
+    public static void SetWindowFocus() { }
+    public static void SetWindowFocus(string name) { }
+    public static void SetWindowFontScale(float scale) { }
+    public static void SetWindowHitTestHole(ImGuiWindowPtr window, UnityEngine.Vector2 pos, UnityEngine.Vector2 size) { }
+    public static void SetWindowPos(UnityEngine.Vector2 pos) { }
+    public static void SetWindowPos(UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static void SetWindowPos(string name, UnityEngine.Vector2 pos) { }
+    public static void SetWindowPos(string name, UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static void SetWindowPos(ImGuiWindowPtr window, UnityEngine.Vector2 pos) { }
+    public static void SetWindowPos(ImGuiWindowPtr window, UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static void SetWindowSize(UnityEngine.Vector2 size) { }
+    public static void SetWindowSize(UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static void SetWindowSize(string name, UnityEngine.Vector2 size) { }
+    public static void SetWindowSize(string name, UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static void SetWindowSize(ImGuiWindowPtr window, UnityEngine.Vector2 size) { }
+    public static void SetWindowSize(ImGuiWindowPtr window, UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static void SetWindowViewport(ImGuiWindowPtr window, ImGuiViewportPPtr viewport) { }
+    public static void ShadeVertsLinearColorGradientKeepAlpha(ImDrawListPtr draw_list, int vert_start_idx, int vert_end_idx, UnityEngine.Vector2 gradient_p0, UnityEngine.Vector2 gradient_p1, uint col0, uint col1) { }
+    public static void ShadeVertsLinearUV(ImDrawListPtr draw_list, int vert_start_idx, int vert_end_idx, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, bool clamp) { }
+    public static void ShowAboutWindow() { }
+    public static void ShowAboutWindow(ref bool p_open) { }
+    public static void ShowDebugLogWindow() { }
+    public static void ShowDebugLogWindow(ref bool p_open) { }
+    public static void ShowDemoWindow() { }
+    public static void ShowDemoWindow(ref bool p_open) { }
+    public static void ShowFontAtlas(ImFontAtlasPtr atlas) { }
+    public static void ShowFontSelector(string label) { }
+    public static void ShowMetricsWindow() { }
+    public static void ShowMetricsWindow(ref bool p_open) { }
+    public static void ShowStackToolWindow() { }
+    public static void ShowStackToolWindow(ref bool p_open) { }
+    public static void ShowStyleEditor() { }
+    public static void ShowStyleEditor(ImGuiStylePtr @ref) { }
+    public static bool ShowStyleSelector(string label) { return default; }
+    public static void ShowUserGuide() { }
+    public static void ShrinkWidths(ImGuiShrinkWidthItemPtr items, int count, float width_excess) { }
+    public static void Shutdown() { }
+    public static bool SliderAngle(string label, ref float v_rad) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, string format) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, string format) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderBehavior(UnityEngine.Rect bb, uint id, ImGuiDataType data_type, System.IntPtr p_v, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags, out UnityEngine.Rect out_grab_bb) { out_grab_bb = default; return default; }
+    public static bool SliderFloat(string label, ref float v, float v_min, float v_max) { return default; }
+    public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format) { return default; }
+    public static bool SliderFloat(string label, ref float v, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat2(string label, ref UnityEngine.Vector2 v, float v_min, float v_max) { return default; }
+    public static bool SliderFloat2(string label, ref UnityEngine.Vector2 v, float v_min, float v_max, string format) { return default; }
+    public static bool SliderFloat2(string label, ref UnityEngine.Vector2 v, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat2(string label, ref UnityEngine.Vector2 v, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat3(string label, ref UnityEngine.Vector3 v, float v_min, float v_max) { return default; }
+    public static bool SliderFloat3(string label, ref UnityEngine.Vector3 v, float v_min, float v_max, string format) { return default; }
+    public static bool SliderFloat3(string label, ref UnityEngine.Vector3 v, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat3(string label, ref UnityEngine.Vector3 v, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat4(string label, ref UnityEngine.Vector4 v, float v_min, float v_max) { return default; }
+    public static bool SliderFloat4(string label, ref UnityEngine.Vector4 v, float v_min, float v_max, string format) { return default; }
+    public static bool SliderFloat4(string label, ref UnityEngine.Vector4 v, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderFloat4(string label, ref UnityEngine.Vector4 v, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool SliderInt(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt2(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool SliderInt2(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool SliderInt2(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt2(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt3(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool SliderInt3(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool SliderInt3(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt3(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt4(string label, ref int v, int v_min, int v_max) { return default; }
+    public static bool SliderInt4(string label, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool SliderInt4(string label, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderInt4(string label, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool SliderScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool SliderScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderScalar(string label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool SliderScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool SliderScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool SliderScalarN(string label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool SmallButton(string label) { return default; }
+    public static void Spacing() { }
+    public static bool SplitterBehavior(UnityEngine.Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2) { return default; }
+    public static bool SplitterBehavior(UnityEngine.Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2, float hover_extend) { return default; }
+    public static bool SplitterBehavior(UnityEngine.Rect bb, uint id, ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay) { return default; }
+    public static void StartMouseMovingWindow(ImGuiWindowPtr window) { }
+    public static void StyleColorsClassic() { }
+    public static void StyleColorsClassic(ImGuiStylePtr dst) { }
+    public static void StyleColorsDark() { }
+    public static void StyleColorsDark(ImGuiStylePtr dst) { }
+    public static void StyleColorsLight() { }
+    public static void StyleColorsLight(ImGuiStylePtr dst) { }
+    public static void TabBarCloseTab(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab) { }
+    public static ImGuiTabItemPtr TabBarFindTabByID(ImGuiTabBarPtr tab_bar, uint tab_id) { return default; }
+    public static bool TabBarProcessReorder(ImGuiTabBarPtr tab_bar) { return default; }
+    public static void TabBarQueueReorder(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab, int offset) { }
+    public static void TabBarQueueReorderFromMousePos(ImGuiTabBarPtr tab_bar, ImGuiTabItemPtr tab, UnityEngine.Vector2 mouse_pos) { }
+    public static void TabBarRemoveTab(ImGuiTabBarPtr tab_bar, uint tab_id) { }
+    public static void TabItemBackground(ImDrawListPtr draw_list, UnityEngine.Rect bb, ImGuiTabItemFlags flags, uint col) { }
+    public static bool TabItemButton(string label) { return default; }
+    public static bool TabItemButton(string label, ImGuiTabItemFlags flags) { return default; }
+    public static UnityEngine.Vector2 TabItemCalcSize(string label, bool has_close_button) { return default; }
+    public static bool TabItemEx(ImGuiTabBarPtr tab_bar, string label, ref bool p_open, ImGuiTabItemFlags flags) { return default; }
+    public static void TabItemLabelAndCloseButton(ImDrawListPtr draw_list, UnityEngine.Rect bb, ImGuiTabItemFlags flags, UnityEngine.Vector2 frame_padding, string label, uint tab_id, uint close_button_id, bool is_contents_visible, out bool out_just_closed, out bool out_text_clipped) { out_text_clipped = default; out_just_closed = default; }
+    public static void TableBeginApplyRequests(ImGuiTablePtr table) { }
+    public static void TableBeginCell(ImGuiTablePtr table, int column_n) { }
+    public static void TableBeginInitMemory(ImGuiTablePtr table, int columns_count) { }
+    public static void TableBeginRow(ImGuiTablePtr table) { }
+    public static void TableDrawBorders(ImGuiTablePtr table) { }
+    public static void TableDrawContextMenu(ImGuiTablePtr table) { }
+    public static void TableEndCell(ImGuiTablePtr table) { }
+    public static void TableEndRow(ImGuiTablePtr table) { }
+    public static ImGuiTablePtr TableFindByID(uint id) { return default; }
+    public static void TableFixColumnSortDirection(ImGuiTablePtr table, ImGuiTableColumnPtr column) { }
+    public static void TableGcCompactSettings() { }
+    public static void TableGcCompactTransientBuffers(ImGuiTablePtr table) { }
+    public static void TableGcCompactTransientBuffers(ImGuiTableTempDataPtr table) { }
+    public static ImGuiTableSettingsPtr TableGetBoundSettings(ImGuiTablePtr table) { return default; }
+    public static UnityEngine.Rect TableGetCellBgRect(ImGuiTablePtr table, int column_n) { return default; }
+    public static int TableGetColumnCount() { return default; }
+    public static ImGuiTableColumnFlags TableGetColumnFlags() { return default; }
+    public static ImGuiTableColumnFlags TableGetColumnFlags(int column_n) { return default; }
+    public static int TableGetColumnIndex() { return default; }
+    public static string TableGetColumnName() { return default; }
+    public static string TableGetColumnName(int column_n) { return default; }
+    public static string TableGetColumnName(ImGuiTablePtr table, int column_n) { return default; }
+    public static ImGuiSortDirection TableGetColumnNextSortDirection(ImGuiTableColumnPtr column) { return default; }
+    public static uint TableGetColumnResizeID(ImGuiTablePtr table, int column_n) { return default; }
+    public static uint TableGetColumnResizeID(ImGuiTablePtr table, int column_n, int instance_no) { return default; }
+    public static float TableGetColumnWidthAuto(ImGuiTablePtr table, ImGuiTableColumnPtr column) { return default; }
+    public static float TableGetHeaderRowHeight() { return default; }
+    public static int TableGetHoveredColumn() { return default; }
+    public static ImGuiTableInstanceDataPtr TableGetInstanceData(ImGuiTablePtr table, int instance_no) { return default; }
+    public static float TableGetMaxColumnWidth(ImGuiTablePtr table, int column_n) { return default; }
+    public static int TableGetRowIndex() { return default; }
+    public static ImGuiTableSortSpecsPtr TableGetSortSpecs() { return default; }
+    public static void TableHeader(string label) { }
+    public static void TableHeadersRow() { }
+    public static void TableLoadSettings(ImGuiTablePtr table) { }
+    public static void TableMergeDrawChannels(ImGuiTablePtr table) { }
+    public static bool TableNextColumn() { return default; }
+    public static void TableNextRow() { }
+    public static void TableNextRow(ImGuiTableRowFlags row_flags) { }
+    public static void TableNextRow(float min_row_height) { }
+    public static void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height) { }
+    public static void TableOpenContextMenu() { }
+    public static void TableOpenContextMenu(int column_n) { }
+    public static void TablePopBackgroundChannel() { }
+    public static void TablePushBackgroundChannel() { }
+    public static void TableRemove(ImGuiTablePtr table) { }
+    public static void TableResetSettings(ImGuiTablePtr table) { }
+    public static void TableSaveSettings(ImGuiTablePtr table) { }
+    public static void TableSetBgColor(ImGuiTableBgTarget target, uint color) { }
+    public static void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n) { }
+    public static void TableSetColumnEnabled(int column_n, bool v) { }
+    public static bool TableSetColumnIndex(int column_n) { return default; }
+    public static void TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs) { }
+    public static void TableSetColumnWidth(int column_n, float width) { }
+    public static void TableSetColumnWidthAutoAll(ImGuiTablePtr table) { }
+    public static void TableSetColumnWidthAutoSingle(ImGuiTablePtr table, int column_n) { }
+    public static void TableSettingsAddSettingsHandler() { }
+    public static ImGuiTableSettingsPtr TableSettingsCreate(uint id, int columns_count) { return default; }
+    public static ImGuiTableSettingsPtr TableSettingsFindByID(uint id) { return default; }
+    public static void TableSetupColumn(string label) { }
+    public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags) { }
+    public static void TableSetupColumn(string label, float init_width_or_weight) { }
+    public static void TableSetupColumn(string label, uint user_id) { }
+    public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, float init_width_or_weight) { }
+    public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, uint user_id) { }
+    public static void TableSetupColumn(string label, float init_width_or_weight, uint user_id) { }
+    public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id) { }
+    public static void TableSetupDrawChannels(ImGuiTablePtr table) { }
+    public static void TableSetupScrollFreeze(int cols, int rows) { }
+    public static void TableSortSpecsBuild(ImGuiTablePtr table) { }
+    public static void TableSortSpecsSanitize(ImGuiTablePtr table) { }
+    public static void TableUpdateBorders(ImGuiTablePtr table) { }
+    public static void TableUpdateColumnsWeightFromWidth(ImGuiTablePtr table) { }
+    public static void TableUpdateLayout(ImGuiTablePtr table) { }
+    public static bool TempInputIsActive(uint id) { return default; }
+    public static bool TempInputScalar(UnityEngine.Rect bb, uint id, string label, ImGuiDataType data_type, System.IntPtr p_data, string format) { return default; }
+    public static bool TempInputScalar(UnityEngine.Rect bb, uint id, string label, ImGuiDataType data_type, System.IntPtr p_data, string format, System.IntPtr p_clamp_min) { return default; }
+    public static bool TempInputScalar(UnityEngine.Rect bb, uint id, string label, ImGuiDataType data_type, System.IntPtr p_data, string format, System.IntPtr p_clamp_min, System.IntPtr p_clamp_max) { return default; }
+    public static bool TempInputText(UnityEngine.Rect bb, uint id, string label, ref byte buf, int buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static void Text(string fmt) { }
+    public static void TextColored(UnityEngine.Vector4 col, string fmt) { }
+    public static void TextColoredV(UnityEngine.Vector4 col, string fmt) { }
+    public static void TextDisabled(string fmt) { }
+    public static void TextDisabledV(string fmt) { }
+    public static void TextEx(string text) { }
+    public static void TextEx(string text, string text_end) { }
+    public static void TextEx(string text, ImGuiTextFlags flags) { }
+    public static void TextEx(string text, string text_end, ImGuiTextFlags flags) { }
+    public static void TextUnformatted(string text) { }
+    public static void TextUnformatted(string text, string text_end) { }
+    public static void TextV(string fmt) { }
+    public static void TextWrapped(string fmt) { }
+    public static void TextWrappedV(string fmt) { }
+    public static bool TreeNode(string label) { return default; }
+    public static bool TreeNode(string str_id, string fmt) { return default; }
+    public static bool TreeNode(System.IntPtr ptr_id, string fmt) { return default; }
+    public static bool TreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, string label) { return default; }
+    public static bool TreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, string label, string label_end) { return default; }
+    public static bool TreeNodeBehaviorIsOpen(uint id) { return default; }
+    public static bool TreeNodeBehaviorIsOpen(uint id, ImGuiTreeNodeFlags flags) { return default; }
+    public static bool TreeNodeEx(string label) { return default; }
+    public static bool TreeNodeEx(string label, ImGuiTreeNodeFlags flags) { return default; }
+    public static bool TreeNodeEx(string str_id, ImGuiTreeNodeFlags flags, string fmt) { return default; }
+    public static bool TreeNodeEx(System.IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt) { return default; }
+    public static bool TreeNodeExV(string str_id, ImGuiTreeNodeFlags flags, string fmt) { return default; }
+    public static bool TreeNodeExV(System.IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt) { return default; }
+    public static bool TreeNodeV(string str_id, string fmt) { return default; }
+    public static bool TreeNodeV(System.IntPtr ptr_id, string fmt) { return default; }
+    public static void TreePop() { }
+    public static void TreePush(string str_id) { }
+    public static void TreePush() { }
+    public static void TreePush(System.IntPtr ptr_id) { }
+    public static void TreePushOverrideID(uint id) { }
+    public static void Unindent() { }
+    public static void Unindent(float indent_w) { }
+    public static void UpdateHoveredWindowAndCaptureFlags() { }
+    public static void UpdateInputEvents(bool trickle_fast_inputs) { }
+    public static void UpdateMouseMovingWindowEndFrame() { }
+    public static void UpdateMouseMovingWindowNewFrame() { }
+    public static void UpdateWindowParentAndRootLinks(ImGuiWindowPtr window, ImGuiWindowFlags flags, ImGuiWindowPtr parent_window) { }
+    public static bool VSliderFloat(string label, UnityEngine.Vector2 size, ref float v, float v_min, float v_max) { return default; }
+    public static bool VSliderFloat(string label, UnityEngine.Vector2 size, ref float v, float v_min, float v_max, string format) { return default; }
+    public static bool VSliderFloat(string label, UnityEngine.Vector2 size, ref float v, float v_min, float v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool VSliderFloat(string label, UnityEngine.Vector2 size, ref float v, float v_min, float v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool VSliderInt(string label, UnityEngine.Vector2 size, ref int v, int v_min, int v_max) { return default; }
+    public static bool VSliderInt(string label, UnityEngine.Vector2 size, ref int v, int v_min, int v_max, string format) { return default; }
+    public static bool VSliderInt(string label, UnityEngine.Vector2 size, ref int v, int v_min, int v_max, ImGuiSliderFlags flags) { return default; }
+    public static bool VSliderInt(string label, UnityEngine.Vector2 size, ref int v, int v_min, int v_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static bool VSliderScalar(string label, UnityEngine.Vector2 size, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static bool VSliderScalar(string label, UnityEngine.Vector2 size, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format) { return default; }
+    public static bool VSliderScalar(string label, UnityEngine.Vector2 size, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, ImGuiSliderFlags flags) { return default; }
+    public static bool VSliderScalar(string label, UnityEngine.Vector2 size, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, string format, ImGuiSliderFlags flags) { return default; }
+    public static void Value(string prefix, bool b) { }
+    public static void Value(string prefix, int v) { }
+    public static void Value(string prefix, uint v) { }
+    public static void Value(string prefix, float v) { }
+    public static void Value(string prefix, float v, string float_format) { }
+    public static UnityEngine.Rect WindowRectAbsToRel(ImGuiWindowPtr window, UnityEngine.Rect r) { return default; }
+    public static UnityEngine.Rect WindowRectRelToAbs(ImGuiWindowPtr window, UnityEngine.Rect r) { return default; }
+    public static ImGuiInputTextCallback CreateInputTextCallback(ImGuiInputTextSafeCallback callback) { return default; }
+    public static ImGuiSizeCallback CreateSizeCallback(ImGuiSizeSafeCallback callback) { return default; }
+    public static void SetDragDropPayload<T>(string type, T data, ImGuiCond cond) { }
+    public static bool AcceptDragDropPayload<T>(string type, out T payload, ImGuiDragDropFlags flags) { payload = default; return default; }
+    public static void SetDragDropPayload(string type, string data, ImGuiCond cond) { }
+    public static bool AcceptDragDropPayload(string type, out string payload, ImGuiDragDropFlags flags) { payload = default; return default; }
+    public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextWithHint(string label, string hint, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, System.Byte[] buf, uint buf_size) { return default; }
+    public static bool InputText(string label, System.Byte[] buf, uint buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputText(string label, System.Byte[] buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputText(string label, System.Byte[] buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, ref string input, uint maxLength) { return default; }
+    public static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputText(string label, ref string input, uint maxLength, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputTextMultiline(string label, ref string input, uint maxLength, UnityEngine.Vector2 size) { return default; }
+    public static bool InputTextMultiline(string label, ref string input, uint maxLength, UnityEngine.Vector2 size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputTextMultiline(string label, ref string input, uint maxLength, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputTextMultiline(string label, ref string input, uint maxLength, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static bool InputText(string label, System.IntPtr buf, uint buf_size) { return default; }
+    public static bool InputText(string label, System.IntPtr buf, uint buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static bool InputText(string label, System.IntPtr buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback) { return default; }
+    public static bool InputText(string label, System.IntPtr buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+  }
+  public enum ImGuiActivateFlags
+  {
+    None = 0,
+    PreferInput = 1,
+    PreferTweak = 2,
+    TryToPreserveState = 4,
+  }
+  public enum ImGuiAxis
+  {
+    X = 0,
+    Y = 1,
+    None = -1,
+  }
+  public enum ImGuiBackendFlags
+  {
+    None = 0,
+    HasGamepad = 1,
+    HasMouseCursors = 2,
+    HasSetMousePos = 4,
+    RendererHasVtxOffset = 8,
+  }
+  public enum ImGuiButtonFlags
+  {
+    None = 0,
+    MouseButtonLeft = 1,
+    MouseButtonDefault_ = 1,
+    MouseButtonRight = 2,
+    MouseButtonMiddle = 4,
+    MouseButtonMask_ = 7,
+  }
+  public enum ImGuiCol
+  {
+    Text = 0,
+    TextDisabled = 1,
+    WindowBg = 2,
+    ChildBg = 3,
+    PopupBg = 4,
+    Border = 5,
+    BorderShadow = 6,
+    FrameBg = 7,
+    FrameBgHovered = 8,
+    FrameBgActive = 9,
+    TitleBg = 10,
+    TitleBgActive = 11,
+    TitleBgCollapsed = 12,
+    MenuBarBg = 13,
+    ScrollbarBg = 14,
+    ScrollbarGrab = 15,
+    ScrollbarGrabHovered = 16,
+    ScrollbarGrabActive = 17,
+    CheckMark = 18,
+    SliderGrab = 19,
+    SliderGrabActive = 20,
+    Button = 21,
+    ButtonHovered = 22,
+    ButtonActive = 23,
+    Header = 24,
+    HeaderHovered = 25,
+    HeaderActive = 26,
+    Separator = 27,
+    SeparatorHovered = 28,
+    SeparatorActive = 29,
+    ResizeGrip = 30,
+    ResizeGripHovered = 31,
+    ResizeGripActive = 32,
+    Tab = 33,
+    TabHovered = 34,
+    TabActive = 35,
+    TabUnfocused = 36,
+    TabUnfocusedActive = 37,
+    PlotLines = 38,
+    PlotLinesHovered = 39,
+    PlotHistogram = 40,
+    PlotHistogramHovered = 41,
+    TableHeaderBg = 42,
+    TableBorderStrong = 43,
+    TableBorderLight = 44,
+    TableRowBg = 45,
+    TableRowBgAlt = 46,
+    TextSelectedBg = 47,
+    DragDropTarget = 48,
+    NavHighlight = 49,
+    NavWindowingHighlight = 50,
+    NavWindowingDimBg = 51,
+    ModalWindowDimBg = 52,
+    COUNT = 53,
+  }
+  public enum ImGuiColorEditFlags
+  {
+    None = 0,
+    NoAlpha = 2,
+    NoPicker = 4,
+    NoOptions = 8,
+    NoSmallPreview = 16,
+    NoInputs = 32,
+    NoTooltip = 64,
+    NoLabel = 128,
+    NoSidePreview = 256,
+    NoDragDrop = 512,
+    NoBorder = 1024,
+    AlphaBar = 65536,
+    AlphaPreview = 131072,
+    AlphaPreviewHalf = 262144,
+    HDR = 524288,
+    DisplayRGB = 1048576,
+    DisplayHSV = 2097152,
+    DisplayHex = 4194304,
+    DisplayMask_ = 7340032,
+    Uint8 = 8388608,
+    Float = 16777216,
+    DataTypeMask_ = 25165824,
+    PickerHueBar = 33554432,
+    PickerHueWheel = 67108864,
+    PickerMask_ = 100663296,
+    InputRGB = 134217728,
+    DefaultOptions_ = 177209344,
+    InputHSV = 268435456,
+    InputMask_ = 402653184,
+  }
+  public struct ImGuiColorMod
+  {
+    public ImGuiCol Col;
+    public UnityEngine.Vector4 BackupValue;
+  }
+  public struct ImGuiColorModPtr
+  {
+    public unsafe ImGuiColorMod* NativePtr { get => default; }
+    public ref ImGuiCol Col { get => ref __0; }
+    public ref UnityEngine.Vector4 BackupValue { get => ref __1; }
+    internal static ImGuiCol __0;
+    internal static UnityEngine.Vector4 __1;
+  }
+  public enum ImGuiComboFlags
+  {
+    None = 0,
+    PopupAlignLeft = 1,
+    HeightSmall = 2,
+    HeightRegular = 4,
+    HeightLarge = 8,
+    HeightLargest = 16,
+    HeightMask_ = 30,
+    NoArrowButton = 32,
+    NoPreview = 64,
+  }
+  public enum ImGuiComboFlagsPrivate
+  {
+    CustomPreview = 1048576,
+  }
+  public struct ImGuiComboPreviewData
+  {
+    public UnityEngine.Rect PreviewRect;
+    public UnityEngine.Vector2 BackupCursorPos;
+    public UnityEngine.Vector2 BackupCursorMaxPos;
+    public UnityEngine.Vector2 BackupCursorPosPrevLine;
+    public float BackupPrevLineTextBaseOffset;
+    public ImGuiLayoutType BackupLayout;
+  }
+  public struct ImGuiComboPreviewDataPtr
+  {
+    public unsafe ImGuiComboPreviewData* NativePtr { get => default; }
+    public ref UnityEngine.Rect PreviewRect { get => ref __0; }
+    public ref UnityEngine.Vector2 BackupCursorPos { get => ref __1; }
+    public ref UnityEngine.Vector2 BackupCursorMaxPos { get => ref __1; }
+    public ref UnityEngine.Vector2 BackupCursorPosPrevLine { get => ref __1; }
+    public ref float BackupPrevLineTextBaseOffset { get => ref __2; }
+    public ref ImGuiLayoutType BackupLayout { get => ref __3; }
+    public void ImGuiComboPreviewData_destroy() { }
+    internal static UnityEngine.Rect __0;
+    internal static UnityEngine.Vector2 __1;
+    internal static float __2;
+    internal static ImGuiLayoutType __3;
+  }
+  public enum ImGuiCond
+  {
+    None = 0,
+    Always = 1,
+    Once = 2,
+    FirstUseEver = 4,
+    Appearing = 8,
+  }
+  public enum ImGuiConfigFlags
+  {
+    None = 0,
+    NavEnableKeyboard = 1,
+    NavEnableGamepad = 2,
+    NavEnableSetMousePos = 4,
+    NavNoCaptureKeyboard = 8,
+    NoMouse = 16,
+    NoMouseCursorChange = 32,
+    IsSRGB = 1048576,
+    IsTouchScreen = 2097152,
+  }
+  public enum ImGuiContextHookType
+  {
+    NewFramePre = 0,
+    NewFramePost = 1,
+    EndFramePre = 2,
+    EndFramePost = 3,
+    RenderPre = 4,
+    RenderPost = 5,
+    Shutdown = 6,
+    PendingRemoval_ = 7,
+  }
+  public enum ImGuiDataType
+  {
+    S8 = 0,
+    U8 = 1,
+    S16 = 2,
+    U16 = 3,
+    S32 = 4,
+    U32 = 5,
+    S64 = 6,
+    U64 = 7,
+    Float = 8,
+    Double = 9,
+    COUNT = 10,
+  }
+  public struct ImGuiDataTypeInfo
+  {
+    public uint Size;
+    public unsafe byte* Name;
+    public unsafe byte* PrintFmt;
+    public unsafe byte* ScanFmt;
+  }
+  public struct ImGuiDataTypeInfoPtr
+  {
+    public unsafe ImGuiDataTypeInfo* NativePtr { get => default; }
+    public ref uint Size { get => ref __0; }
+    public ref string Name { get => ref __1; }
+    public ref string PrintFmt { get => ref __1; }
+    public ref string ScanFmt { get => ref __1; }
+    internal static uint __0;
+    internal static string __1;
+  }
+  public enum ImGuiDataTypePrivate
+  {
+    String = 11,
+    Pointer = 12,
+    ID = 13,
+  }
+  public struct ImGuiDataTypeTempStorage
+  {
+    public byte Data_0;
+    public byte Data_1;
+    public byte Data_2;
+    public byte Data_3;
+    public byte Data_4;
+    public byte Data_5;
+    public byte Data_6;
+    public byte Data_7;
+  }
+  public struct ImGuiDataTypeTempStoragePtr
+  {
+    public unsafe ImGuiDataTypeTempStorage* NativePtr { get => default; }
+    public RangeAccessor<byte> Data { get => default; }
+  }
+  public enum ImGuiDebugLogFlags
+  {
+    None = 0,
+    EventActiveId = 1,
+    EventFocus = 2,
+    EventPopup = 4,
+    EventNav = 8,
+    EventIO = 16,
+    EventMask_ = 31,
+    OutputToTTY = 1024,
+  }
+  public enum ImGuiDir
+  {
+    Left = 0,
+    Right = 1,
+    Up = 2,
+    Down = 3,
+    COUNT = 4,
+    None = -1,
+  }
+  public enum ImGuiDragDropFlags
+  {
+    None = 0,
+    SourceNoPreviewTooltip = 1,
+    SourceNoDisableHover = 2,
+    SourceNoHoldToOpenOthers = 4,
+    SourceAllowNullID = 8,
+    SourceExtern = 16,
+    SourceAutoExpirePayload = 32,
+    AcceptBeforeDelivery = 1024,
+    AcceptNoDrawDefaultRect = 2048,
+    AcceptPeekOnly = 3072,
+    AcceptNoPreviewTooltip = 4096,
+  }
+  public enum ImGuiFocusedFlags
+  {
+    None = 0,
+    ChildWindows = 1,
+    RootWindow = 2,
+    RootAndChildWindows = 3,
+    AnyWindow = 4,
+    NoPopupHierarchy = 8,
+  }
+  public struct ImGuiGroupData
+  {
+    public uint WindowID;
+    public UnityEngine.Vector2 BackupCursorPos;
+    public UnityEngine.Vector2 BackupCursorMaxPos;
+    public ImVec1 BackupIndent;
+    public ImVec1 BackupGroupOffset;
+    public UnityEngine.Vector2 BackupCurrLineSize;
+    public float BackupCurrLineTextBaseOffset;
+    public uint BackupActiveIdIsAlive;
+    public byte BackupActiveIdPreviousFrameIsAlive;
+    public byte BackupHoveredIdIsAlive;
+    public byte EmitItem;
+  }
+  public struct ImGuiGroupDataPtr
+  {
+    public unsafe ImGuiGroupData* NativePtr { get => default; }
+    public ref uint WindowID { get => ref __0; }
+    public ref UnityEngine.Vector2 BackupCursorPos { get => ref __1; }
+    public ref UnityEngine.Vector2 BackupCursorMaxPos { get => ref __1; }
+    public ref ImVec1 BackupIndent { get => ref __2; }
+    public ref ImVec1 BackupGroupOffset { get => ref __2; }
+    public ref UnityEngine.Vector2 BackupCurrLineSize { get => ref __1; }
+    public ref float BackupCurrLineTextBaseOffset { get => ref __3; }
+    public ref uint BackupActiveIdIsAlive { get => ref __0; }
+    public ref bool BackupActiveIdPreviousFrameIsAlive { get => ref __4; }
+    public ref bool BackupHoveredIdIsAlive { get => ref __4; }
+    public ref bool EmitItem { get => ref __4; }
+    internal static uint __0;
+    internal static UnityEngine.Vector2 __1;
+    internal static ImVec1 __2;
+    internal static float __3;
+    internal static bool __4;
+  }
+  public enum ImGuiHoveredFlags
+  {
+    None = 0,
+    ChildWindows = 1,
+    RootWindow = 2,
+    RootAndChildWindows = 3,
+    AnyWindow = 4,
+    NoPopupHierarchy = 8,
+    AllowWhenBlockedByPopup = 32,
+    AllowWhenBlockedByActiveItem = 128,
+    AllowWhenOverlapped = 256,
+    RectOnly = 416,
+    AllowWhenDisabled = 512,
+    NoNavOverride = 1024,
+  }
+  public struct ImGuiInputEventAppFocused
+  {
+    public byte Focused;
+  }
+  public struct ImGuiInputEventAppFocusedPtr
+  {
+    public unsafe ImGuiInputEventAppFocused* NativePtr { get => default; }
+    public ref bool Focused { get => ref __0; }
+    internal static bool __0;
+  }
+  public struct ImGuiInputEventKey
+  {
+    public ImGuiKey Key;
+    public byte Down;
+    public float AnalogValue;
+  }
+  public struct ImGuiInputEventKeyPtr
+  {
+    public unsafe ImGuiInputEventKey* NativePtr { get => default; }
+    public ref ImGuiKey Key { get => ref __0; }
+    public ref bool Down { get => ref __1; }
+    public ref float AnalogValue { get => ref __2; }
+    internal static ImGuiKey __0;
+    internal static bool __1;
+    internal static float __2;
+  }
+  public struct ImGuiInputEventMouseButton
+  {
+    public int Button;
+    public byte Down;
+  }
+  public struct ImGuiInputEventMouseButtonPtr
+  {
+    public unsafe ImGuiInputEventMouseButton* NativePtr { get => default; }
+    public ref int Button { get => ref __0; }
+    public ref bool Down { get => ref __1; }
+    internal static int __0;
+    internal static bool __1;
+  }
+  public struct ImGuiInputEventMousePos
+  {
+    public float PosX;
+    public float PosY;
+  }
+  public struct ImGuiInputEventMousePosPtr
+  {
+    public unsafe ImGuiInputEventMousePos* NativePtr { get => default; }
+    public ref float PosX { get => ref __0; }
+    public ref float PosY { get => ref __0; }
+    internal static float __0;
+  }
+  public struct ImGuiInputEventMouseWheel
+  {
+    public float WheelX;
+    public float WheelY;
+  }
+  public struct ImGuiInputEventMouseWheelPtr
+  {
+    public unsafe ImGuiInputEventMouseWheel* NativePtr { get => default; }
+    public ref float WheelX { get => ref __0; }
+    public ref float WheelY { get => ref __0; }
+    internal static float __0;
+  }
+  public struct ImGuiInputEventText
+  {
+    public uint Char;
+  }
+  public struct ImGuiInputEventTextPtr
+  {
+    public unsafe ImGuiInputEventText* NativePtr { get => default; }
+    public ref uint Char { get => ref __0; }
+    internal static uint __0;
+  }
+  public enum ImGuiInputEventType
+  {
+    None = 0,
+    MousePos = 1,
+    MouseWheel = 2,
+    MouseButton = 3,
+    Key = 4,
+    Text = 5,
+    Focus = 6,
+    COUNT = 7,
+  }
+  public enum ImGuiInputSource
+  {
+    None = 0,
+    Mouse = 1,
+    Keyboard = 2,
+    Gamepad = 3,
+    Clipboard = 4,
+    Nav = 5,
+    COUNT = 6,
+  }
+  public struct ImGuiInputTextCallbackData
+  {
+    public ImGuiInputTextFlags EventFlag;
+    public ImGuiInputTextFlags Flags;
+    public unsafe void* UserData;
+    public ushort EventChar;
+    public ImGuiKey EventKey;
+    public unsafe byte* Buf;
+    public int BufTextLen;
+    public int BufSize;
+    public byte BufDirty;
+    public int CursorPos;
+    public int SelectionStart;
+    public int SelectionEnd;
+  }
+  public struct ImGuiInputTextCallbackDataPtr
+  {
+    public unsafe ImGuiInputTextCallbackData* NativePtr { get => default; }
+    public ref ImGuiInputTextFlags EventFlag { get => ref __0; }
+    public ref ImGuiInputTextFlags Flags { get => ref __0; }
+    public System.IntPtr UserData { get => default; set { } }
+    public ref ushort EventChar { get => ref __1; }
+    public ref ImGuiKey EventKey { get => ref __2; }
+    public System.IntPtr Buf { get => default; set { } }
+    public ref int BufTextLen { get => ref __3; }
+    public ref int BufSize { get => ref __3; }
+    public ref bool BufDirty { get => ref __4; }
+    public ref int CursorPos { get => ref __3; }
+    public ref int SelectionStart { get => ref __3; }
+    public ref int SelectionEnd { get => ref __3; }
+    public string Text { get => default; }
+    public void ClearSelection() { }
+    public void DeleteChars(int pos, int bytes_count) { }
+    public bool HasSelection() { return default; }
+    public void InsertChars(int pos, string text) { }
+    public void InsertChars(int pos, string text, string text_end) { }
+    public void SelectAll() { }
+    public void ImGuiInputTextCallbackData_destroy() { }
+    internal static ImGuiInputTextFlags __0;
+    internal static ushort __1;
+    internal static ImGuiKey __2;
+    internal static int __3;
+    internal static bool __4;
+  }
+  public enum ImGuiInputTextFlags
+  {
+    None = 0,
+    CharsDecimal = 1,
+    CharsHexadecimal = 2,
+    CharsUppercase = 4,
+    CharsNoBlank = 8,
+    AutoSelectAll = 16,
+    EnterReturnsTrue = 32,
+    CallbackCompletion = 64,
+    CallbackHistory = 128,
+    CallbackAlways = 256,
+    CallbackCharFilter = 512,
+    AllowTabInput = 1024,
+    CtrlEnterForNewLine = 2048,
+    NoHorizontalScroll = 4096,
+    AlwaysOverwrite = 8192,
+    ReadOnly = 16384,
+    Password = 32768,
+    NoUndoRedo = 65536,
+    CharsScientific = 131072,
+    CallbackResize = 262144,
+    CallbackEdit = 524288,
+  }
+  public enum ImGuiInputTextFlagsPrivate
+  {
+    Multiline = 67108864,
+    NoMarkEdited = 134217728,
+    MergedItem = 268435456,
+  }
+  public struct ImGuiIO
+  {
+    public ImGuiConfigFlags ConfigFlags;
+    public ImGuiBackendFlags BackendFlags;
+    public UnityEngine.Vector2 DisplaySize;
+    public float DeltaTime;
+    public float IniSavingRate;
+    public unsafe byte* IniFilename;
+    public unsafe byte* LogFilename;
+    public float MouseDoubleClickTime;
+    public float MouseDoubleClickMaxDist;
+    public float MouseDragThreshold;
+    public float KeyRepeatDelay;
+    public float KeyRepeatRate;
+    public unsafe void* UserData;
+    public unsafe ImFontAtlas* Fonts;
+    public float FontGlobalScale;
+    public byte FontAllowUserScaling;
+    public unsafe ImFont* FontDefault;
+    public UnityEngine.Vector2 DisplayFramebufferScale;
+    public byte MouseDrawCursor;
+    public byte ConfigMacOSXBehaviors;
+    public byte ConfigInputTrickleEventQueue;
+    public byte ConfigInputTextCursorBlink;
+    public byte ConfigDragClickToInputText;
+    public byte ConfigWindowsResizeFromEdges;
+    public byte ConfigWindowsMoveFromTitleBarOnly;
+    public float ConfigMemoryCompactTimer;
+    public unsafe byte* BackendPlatformName;
+    public unsafe byte* BackendRendererName;
+    public unsafe void* BackendPlatformUserData;
+    public unsafe void* BackendRendererUserData;
+    public unsafe void* BackendLanguageUserData;
+    public System.IntPtr GetClipboardTextFn;
+    public System.IntPtr SetClipboardTextFn;
+    public unsafe void* ClipboardUserData;
+    public System.IntPtr SetPlatformImeDataFn;
+    public System.IntPtr _UnusedPadding;
+    public byte WantCaptureMouse;
+    public byte WantCaptureKeyboard;
+    public byte WantTextInput;
+    public byte WantSetMousePos;
+    public byte WantSaveIniSettings;
+    public byte NavActive;
+    public byte NavVisible;
+    public float Framerate;
+    public int MetricsRenderVertices;
+    public int MetricsRenderIndices;
+    public int MetricsRenderWindows;
+    public int MetricsActiveWindows;
+    public int MetricsActiveAllocations;
+    public UnityEngine.Vector2 MouseDelta;
+    public unsafe fixed int KeyMap[645];
+    public unsafe fixed byte KeysDown[645];
+    public UnityEngine.Vector2 MousePos;
+    public unsafe fixed byte MouseDown[5];
+    public float MouseWheel;
+    public float MouseWheelH;
+    public byte KeyCtrl;
+    public byte KeyShift;
+    public byte KeyAlt;
+    public byte KeySuper;
+    public unsafe fixed float NavInputs[20];
+    public ImGuiModFlags KeyMods;
+    public ImGuiKeyData KeysData_0;
+    public ImGuiKeyData KeysData_1;
+    public ImGuiKeyData KeysData_2;
+    public ImGuiKeyData KeysData_3;
+    public ImGuiKeyData KeysData_4;
+    public ImGuiKeyData KeysData_5;
+    public ImGuiKeyData KeysData_6;
+    public ImGuiKeyData KeysData_7;
+    public ImGuiKeyData KeysData_8;
+    public ImGuiKeyData KeysData_9;
+    public ImGuiKeyData KeysData_10;
+    public ImGuiKeyData KeysData_11;
+    public ImGuiKeyData KeysData_12;
+    public ImGuiKeyData KeysData_13;
+    public ImGuiKeyData KeysData_14;
+    public ImGuiKeyData KeysData_15;
+    public ImGuiKeyData KeysData_16;
+    public ImGuiKeyData KeysData_17;
+    public ImGuiKeyData KeysData_18;
+    public ImGuiKeyData KeysData_19;
+    public ImGuiKeyData KeysData_20;
+    public ImGuiKeyData KeysData_21;
+    public ImGuiKeyData KeysData_22;
+    public ImGuiKeyData KeysData_23;
+    public ImGuiKeyData KeysData_24;
+    public ImGuiKeyData KeysData_25;
+    public ImGuiKeyData KeysData_26;
+    public ImGuiKeyData KeysData_27;
+    public ImGuiKeyData KeysData_28;
+    public ImGuiKeyData KeysData_29;
+    public ImGuiKeyData KeysData_30;
+    public ImGuiKeyData KeysData_31;
+    public ImGuiKeyData KeysData_32;
+    public ImGuiKeyData KeysData_33;
+    public ImGuiKeyData KeysData_34;
+    public ImGuiKeyData KeysData_35;
+    public ImGuiKeyData KeysData_36;
+    public ImGuiKeyData KeysData_37;
+    public ImGuiKeyData KeysData_38;
+    public ImGuiKeyData KeysData_39;
+    public ImGuiKeyData KeysData_40;
+    public ImGuiKeyData KeysData_41;
+    public ImGuiKeyData KeysData_42;
+    public ImGuiKeyData KeysData_43;
+    public ImGuiKeyData KeysData_44;
+    public ImGuiKeyData KeysData_45;
+    public ImGuiKeyData KeysData_46;
+    public ImGuiKeyData KeysData_47;
+    public ImGuiKeyData KeysData_48;
+    public ImGuiKeyData KeysData_49;
+    public ImGuiKeyData KeysData_50;
+    public ImGuiKeyData KeysData_51;
+    public ImGuiKeyData KeysData_52;
+    public ImGuiKeyData KeysData_53;
+    public ImGuiKeyData KeysData_54;
+    public ImGuiKeyData KeysData_55;
+    public ImGuiKeyData KeysData_56;
+    public ImGuiKeyData KeysData_57;
+    public ImGuiKeyData KeysData_58;
+    public ImGuiKeyData KeysData_59;
+    public ImGuiKeyData KeysData_60;
+    public ImGuiKeyData KeysData_61;
+    public ImGuiKeyData KeysData_62;
+    public ImGuiKeyData KeysData_63;
+    public ImGuiKeyData KeysData_64;
+    public ImGuiKeyData KeysData_65;
+    public ImGuiKeyData KeysData_66;
+    public ImGuiKeyData KeysData_67;
+    public ImGuiKeyData KeysData_68;
+    public ImGuiKeyData KeysData_69;
+    public ImGuiKeyData KeysData_70;
+    public ImGuiKeyData KeysData_71;
+    public ImGuiKeyData KeysData_72;
+    public ImGuiKeyData KeysData_73;
+    public ImGuiKeyData KeysData_74;
+    public ImGuiKeyData KeysData_75;
+    public ImGuiKeyData KeysData_76;
+    public ImGuiKeyData KeysData_77;
+    public ImGuiKeyData KeysData_78;
+    public ImGuiKeyData KeysData_79;
+    public ImGuiKeyData KeysData_80;
+    public ImGuiKeyData KeysData_81;
+    public ImGuiKeyData KeysData_82;
+    public ImGuiKeyData KeysData_83;
+    public ImGuiKeyData KeysData_84;
+    public ImGuiKeyData KeysData_85;
+    public ImGuiKeyData KeysData_86;
+    public ImGuiKeyData KeysData_87;
+    public ImGuiKeyData KeysData_88;
+    public ImGuiKeyData KeysData_89;
+    public ImGuiKeyData KeysData_90;
+    public ImGuiKeyData KeysData_91;
+    public ImGuiKeyData KeysData_92;
+    public ImGuiKeyData KeysData_93;
+    public ImGuiKeyData KeysData_94;
+    public ImGuiKeyData KeysData_95;
+    public ImGuiKeyData KeysData_96;
+    public ImGuiKeyData KeysData_97;
+    public ImGuiKeyData KeysData_98;
+    public ImGuiKeyData KeysData_99;
+    public ImGuiKeyData KeysData_100;
+    public ImGuiKeyData KeysData_101;
+    public ImGuiKeyData KeysData_102;
+    public ImGuiKeyData KeysData_103;
+    public ImGuiKeyData KeysData_104;
+    public ImGuiKeyData KeysData_105;
+    public ImGuiKeyData KeysData_106;
+    public ImGuiKeyData KeysData_107;
+    public ImGuiKeyData KeysData_108;
+    public ImGuiKeyData KeysData_109;
+    public ImGuiKeyData KeysData_110;
+    public ImGuiKeyData KeysData_111;
+    public ImGuiKeyData KeysData_112;
+    public ImGuiKeyData KeysData_113;
+    public ImGuiKeyData KeysData_114;
+    public ImGuiKeyData KeysData_115;
+    public ImGuiKeyData KeysData_116;
+    public ImGuiKeyData KeysData_117;
+    public ImGuiKeyData KeysData_118;
+    public ImGuiKeyData KeysData_119;
+    public ImGuiKeyData KeysData_120;
+    public ImGuiKeyData KeysData_121;
+    public ImGuiKeyData KeysData_122;
+    public ImGuiKeyData KeysData_123;
+    public ImGuiKeyData KeysData_124;
+    public ImGuiKeyData KeysData_125;
+    public ImGuiKeyData KeysData_126;
+    public ImGuiKeyData KeysData_127;
+    public ImGuiKeyData KeysData_128;
+    public ImGuiKeyData KeysData_129;
+    public ImGuiKeyData KeysData_130;
+    public ImGuiKeyData KeysData_131;
+    public ImGuiKeyData KeysData_132;
+    public ImGuiKeyData KeysData_133;
+    public ImGuiKeyData KeysData_134;
+    public ImGuiKeyData KeysData_135;
+    public ImGuiKeyData KeysData_136;
+    public ImGuiKeyData KeysData_137;
+    public ImGuiKeyData KeysData_138;
+    public ImGuiKeyData KeysData_139;
+    public ImGuiKeyData KeysData_140;
+    public ImGuiKeyData KeysData_141;
+    public ImGuiKeyData KeysData_142;
+    public ImGuiKeyData KeysData_143;
+    public ImGuiKeyData KeysData_144;
+    public ImGuiKeyData KeysData_145;
+    public ImGuiKeyData KeysData_146;
+    public ImGuiKeyData KeysData_147;
+    public ImGuiKeyData KeysData_148;
+    public ImGuiKeyData KeysData_149;
+    public ImGuiKeyData KeysData_150;
+    public ImGuiKeyData KeysData_151;
+    public ImGuiKeyData KeysData_152;
+    public ImGuiKeyData KeysData_153;
+    public ImGuiKeyData KeysData_154;
+    public ImGuiKeyData KeysData_155;
+    public ImGuiKeyData KeysData_156;
+    public ImGuiKeyData KeysData_157;
+    public ImGuiKeyData KeysData_158;
+    public ImGuiKeyData KeysData_159;
+    public ImGuiKeyData KeysData_160;
+    public ImGuiKeyData KeysData_161;
+    public ImGuiKeyData KeysData_162;
+    public ImGuiKeyData KeysData_163;
+    public ImGuiKeyData KeysData_164;
+    public ImGuiKeyData KeysData_165;
+    public ImGuiKeyData KeysData_166;
+    public ImGuiKeyData KeysData_167;
+    public ImGuiKeyData KeysData_168;
+    public ImGuiKeyData KeysData_169;
+    public ImGuiKeyData KeysData_170;
+    public ImGuiKeyData KeysData_171;
+    public ImGuiKeyData KeysData_172;
+    public ImGuiKeyData KeysData_173;
+    public ImGuiKeyData KeysData_174;
+    public ImGuiKeyData KeysData_175;
+    public ImGuiKeyData KeysData_176;
+    public ImGuiKeyData KeysData_177;
+    public ImGuiKeyData KeysData_178;
+    public ImGuiKeyData KeysData_179;
+    public ImGuiKeyData KeysData_180;
+    public ImGuiKeyData KeysData_181;
+    public ImGuiKeyData KeysData_182;
+    public ImGuiKeyData KeysData_183;
+    public ImGuiKeyData KeysData_184;
+    public ImGuiKeyData KeysData_185;
+    public ImGuiKeyData KeysData_186;
+    public ImGuiKeyData KeysData_187;
+    public ImGuiKeyData KeysData_188;
+    public ImGuiKeyData KeysData_189;
+    public ImGuiKeyData KeysData_190;
+    public ImGuiKeyData KeysData_191;
+    public ImGuiKeyData KeysData_192;
+    public ImGuiKeyData KeysData_193;
+    public ImGuiKeyData KeysData_194;
+    public ImGuiKeyData KeysData_195;
+    public ImGuiKeyData KeysData_196;
+    public ImGuiKeyData KeysData_197;
+    public ImGuiKeyData KeysData_198;
+    public ImGuiKeyData KeysData_199;
+    public ImGuiKeyData KeysData_200;
+    public ImGuiKeyData KeysData_201;
+    public ImGuiKeyData KeysData_202;
+    public ImGuiKeyData KeysData_203;
+    public ImGuiKeyData KeysData_204;
+    public ImGuiKeyData KeysData_205;
+    public ImGuiKeyData KeysData_206;
+    public ImGuiKeyData KeysData_207;
+    public ImGuiKeyData KeysData_208;
+    public ImGuiKeyData KeysData_209;
+    public ImGuiKeyData KeysData_210;
+    public ImGuiKeyData KeysData_211;
+    public ImGuiKeyData KeysData_212;
+    public ImGuiKeyData KeysData_213;
+    public ImGuiKeyData KeysData_214;
+    public ImGuiKeyData KeysData_215;
+    public ImGuiKeyData KeysData_216;
+    public ImGuiKeyData KeysData_217;
+    public ImGuiKeyData KeysData_218;
+    public ImGuiKeyData KeysData_219;
+    public ImGuiKeyData KeysData_220;
+    public ImGuiKeyData KeysData_221;
+    public ImGuiKeyData KeysData_222;
+    public ImGuiKeyData KeysData_223;
+    public ImGuiKeyData KeysData_224;
+    public ImGuiKeyData KeysData_225;
+    public ImGuiKeyData KeysData_226;
+    public ImGuiKeyData KeysData_227;
+    public ImGuiKeyData KeysData_228;
+    public ImGuiKeyData KeysData_229;
+    public ImGuiKeyData KeysData_230;
+    public ImGuiKeyData KeysData_231;
+    public ImGuiKeyData KeysData_232;
+    public ImGuiKeyData KeysData_233;
+    public ImGuiKeyData KeysData_234;
+    public ImGuiKeyData KeysData_235;
+    public ImGuiKeyData KeysData_236;
+    public ImGuiKeyData KeysData_237;
+    public ImGuiKeyData KeysData_238;
+    public ImGuiKeyData KeysData_239;
+    public ImGuiKeyData KeysData_240;
+    public ImGuiKeyData KeysData_241;
+    public ImGuiKeyData KeysData_242;
+    public ImGuiKeyData KeysData_243;
+    public ImGuiKeyData KeysData_244;
+    public ImGuiKeyData KeysData_245;
+    public ImGuiKeyData KeysData_246;
+    public ImGuiKeyData KeysData_247;
+    public ImGuiKeyData KeysData_248;
+    public ImGuiKeyData KeysData_249;
+    public ImGuiKeyData KeysData_250;
+    public ImGuiKeyData KeysData_251;
+    public ImGuiKeyData KeysData_252;
+    public ImGuiKeyData KeysData_253;
+    public ImGuiKeyData KeysData_254;
+    public ImGuiKeyData KeysData_255;
+    public ImGuiKeyData KeysData_256;
+    public ImGuiKeyData KeysData_257;
+    public ImGuiKeyData KeysData_258;
+    public ImGuiKeyData KeysData_259;
+    public ImGuiKeyData KeysData_260;
+    public ImGuiKeyData KeysData_261;
+    public ImGuiKeyData KeysData_262;
+    public ImGuiKeyData KeysData_263;
+    public ImGuiKeyData KeysData_264;
+    public ImGuiKeyData KeysData_265;
+    public ImGuiKeyData KeysData_266;
+    public ImGuiKeyData KeysData_267;
+    public ImGuiKeyData KeysData_268;
+    public ImGuiKeyData KeysData_269;
+    public ImGuiKeyData KeysData_270;
+    public ImGuiKeyData KeysData_271;
+    public ImGuiKeyData KeysData_272;
+    public ImGuiKeyData KeysData_273;
+    public ImGuiKeyData KeysData_274;
+    public ImGuiKeyData KeysData_275;
+    public ImGuiKeyData KeysData_276;
+    public ImGuiKeyData KeysData_277;
+    public ImGuiKeyData KeysData_278;
+    public ImGuiKeyData KeysData_279;
+    public ImGuiKeyData KeysData_280;
+    public ImGuiKeyData KeysData_281;
+    public ImGuiKeyData KeysData_282;
+    public ImGuiKeyData KeysData_283;
+    public ImGuiKeyData KeysData_284;
+    public ImGuiKeyData KeysData_285;
+    public ImGuiKeyData KeysData_286;
+    public ImGuiKeyData KeysData_287;
+    public ImGuiKeyData KeysData_288;
+    public ImGuiKeyData KeysData_289;
+    public ImGuiKeyData KeysData_290;
+    public ImGuiKeyData KeysData_291;
+    public ImGuiKeyData KeysData_292;
+    public ImGuiKeyData KeysData_293;
+    public ImGuiKeyData KeysData_294;
+    public ImGuiKeyData KeysData_295;
+    public ImGuiKeyData KeysData_296;
+    public ImGuiKeyData KeysData_297;
+    public ImGuiKeyData KeysData_298;
+    public ImGuiKeyData KeysData_299;
+    public ImGuiKeyData KeysData_300;
+    public ImGuiKeyData KeysData_301;
+    public ImGuiKeyData KeysData_302;
+    public ImGuiKeyData KeysData_303;
+    public ImGuiKeyData KeysData_304;
+    public ImGuiKeyData KeysData_305;
+    public ImGuiKeyData KeysData_306;
+    public ImGuiKeyData KeysData_307;
+    public ImGuiKeyData KeysData_308;
+    public ImGuiKeyData KeysData_309;
+    public ImGuiKeyData KeysData_310;
+    public ImGuiKeyData KeysData_311;
+    public ImGuiKeyData KeysData_312;
+    public ImGuiKeyData KeysData_313;
+    public ImGuiKeyData KeysData_314;
+    public ImGuiKeyData KeysData_315;
+    public ImGuiKeyData KeysData_316;
+    public ImGuiKeyData KeysData_317;
+    public ImGuiKeyData KeysData_318;
+    public ImGuiKeyData KeysData_319;
+    public ImGuiKeyData KeysData_320;
+    public ImGuiKeyData KeysData_321;
+    public ImGuiKeyData KeysData_322;
+    public ImGuiKeyData KeysData_323;
+    public ImGuiKeyData KeysData_324;
+    public ImGuiKeyData KeysData_325;
+    public ImGuiKeyData KeysData_326;
+    public ImGuiKeyData KeysData_327;
+    public ImGuiKeyData KeysData_328;
+    public ImGuiKeyData KeysData_329;
+    public ImGuiKeyData KeysData_330;
+    public ImGuiKeyData KeysData_331;
+    public ImGuiKeyData KeysData_332;
+    public ImGuiKeyData KeysData_333;
+    public ImGuiKeyData KeysData_334;
+    public ImGuiKeyData KeysData_335;
+    public ImGuiKeyData KeysData_336;
+    public ImGuiKeyData KeysData_337;
+    public ImGuiKeyData KeysData_338;
+    public ImGuiKeyData KeysData_339;
+    public ImGuiKeyData KeysData_340;
+    public ImGuiKeyData KeysData_341;
+    public ImGuiKeyData KeysData_342;
+    public ImGuiKeyData KeysData_343;
+    public ImGuiKeyData KeysData_344;
+    public ImGuiKeyData KeysData_345;
+    public ImGuiKeyData KeysData_346;
+    public ImGuiKeyData KeysData_347;
+    public ImGuiKeyData KeysData_348;
+    public ImGuiKeyData KeysData_349;
+    public ImGuiKeyData KeysData_350;
+    public ImGuiKeyData KeysData_351;
+    public ImGuiKeyData KeysData_352;
+    public ImGuiKeyData KeysData_353;
+    public ImGuiKeyData KeysData_354;
+    public ImGuiKeyData KeysData_355;
+    public ImGuiKeyData KeysData_356;
+    public ImGuiKeyData KeysData_357;
+    public ImGuiKeyData KeysData_358;
+    public ImGuiKeyData KeysData_359;
+    public ImGuiKeyData KeysData_360;
+    public ImGuiKeyData KeysData_361;
+    public ImGuiKeyData KeysData_362;
+    public ImGuiKeyData KeysData_363;
+    public ImGuiKeyData KeysData_364;
+    public ImGuiKeyData KeysData_365;
+    public ImGuiKeyData KeysData_366;
+    public ImGuiKeyData KeysData_367;
+    public ImGuiKeyData KeysData_368;
+    public ImGuiKeyData KeysData_369;
+    public ImGuiKeyData KeysData_370;
+    public ImGuiKeyData KeysData_371;
+    public ImGuiKeyData KeysData_372;
+    public ImGuiKeyData KeysData_373;
+    public ImGuiKeyData KeysData_374;
+    public ImGuiKeyData KeysData_375;
+    public ImGuiKeyData KeysData_376;
+    public ImGuiKeyData KeysData_377;
+    public ImGuiKeyData KeysData_378;
+    public ImGuiKeyData KeysData_379;
+    public ImGuiKeyData KeysData_380;
+    public ImGuiKeyData KeysData_381;
+    public ImGuiKeyData KeysData_382;
+    public ImGuiKeyData KeysData_383;
+    public ImGuiKeyData KeysData_384;
+    public ImGuiKeyData KeysData_385;
+    public ImGuiKeyData KeysData_386;
+    public ImGuiKeyData KeysData_387;
+    public ImGuiKeyData KeysData_388;
+    public ImGuiKeyData KeysData_389;
+    public ImGuiKeyData KeysData_390;
+    public ImGuiKeyData KeysData_391;
+    public ImGuiKeyData KeysData_392;
+    public ImGuiKeyData KeysData_393;
+    public ImGuiKeyData KeysData_394;
+    public ImGuiKeyData KeysData_395;
+    public ImGuiKeyData KeysData_396;
+    public ImGuiKeyData KeysData_397;
+    public ImGuiKeyData KeysData_398;
+    public ImGuiKeyData KeysData_399;
+    public ImGuiKeyData KeysData_400;
+    public ImGuiKeyData KeysData_401;
+    public ImGuiKeyData KeysData_402;
+    public ImGuiKeyData KeysData_403;
+    public ImGuiKeyData KeysData_404;
+    public ImGuiKeyData KeysData_405;
+    public ImGuiKeyData KeysData_406;
+    public ImGuiKeyData KeysData_407;
+    public ImGuiKeyData KeysData_408;
+    public ImGuiKeyData KeysData_409;
+    public ImGuiKeyData KeysData_410;
+    public ImGuiKeyData KeysData_411;
+    public ImGuiKeyData KeysData_412;
+    public ImGuiKeyData KeysData_413;
+    public ImGuiKeyData KeysData_414;
+    public ImGuiKeyData KeysData_415;
+    public ImGuiKeyData KeysData_416;
+    public ImGuiKeyData KeysData_417;
+    public ImGuiKeyData KeysData_418;
+    public ImGuiKeyData KeysData_419;
+    public ImGuiKeyData KeysData_420;
+    public ImGuiKeyData KeysData_421;
+    public ImGuiKeyData KeysData_422;
+    public ImGuiKeyData KeysData_423;
+    public ImGuiKeyData KeysData_424;
+    public ImGuiKeyData KeysData_425;
+    public ImGuiKeyData KeysData_426;
+    public ImGuiKeyData KeysData_427;
+    public ImGuiKeyData KeysData_428;
+    public ImGuiKeyData KeysData_429;
+    public ImGuiKeyData KeysData_430;
+    public ImGuiKeyData KeysData_431;
+    public ImGuiKeyData KeysData_432;
+    public ImGuiKeyData KeysData_433;
+    public ImGuiKeyData KeysData_434;
+    public ImGuiKeyData KeysData_435;
+    public ImGuiKeyData KeysData_436;
+    public ImGuiKeyData KeysData_437;
+    public ImGuiKeyData KeysData_438;
+    public ImGuiKeyData KeysData_439;
+    public ImGuiKeyData KeysData_440;
+    public ImGuiKeyData KeysData_441;
+    public ImGuiKeyData KeysData_442;
+    public ImGuiKeyData KeysData_443;
+    public ImGuiKeyData KeysData_444;
+    public ImGuiKeyData KeysData_445;
+    public ImGuiKeyData KeysData_446;
+    public ImGuiKeyData KeysData_447;
+    public ImGuiKeyData KeysData_448;
+    public ImGuiKeyData KeysData_449;
+    public ImGuiKeyData KeysData_450;
+    public ImGuiKeyData KeysData_451;
+    public ImGuiKeyData KeysData_452;
+    public ImGuiKeyData KeysData_453;
+    public ImGuiKeyData KeysData_454;
+    public ImGuiKeyData KeysData_455;
+    public ImGuiKeyData KeysData_456;
+    public ImGuiKeyData KeysData_457;
+    public ImGuiKeyData KeysData_458;
+    public ImGuiKeyData KeysData_459;
+    public ImGuiKeyData KeysData_460;
+    public ImGuiKeyData KeysData_461;
+    public ImGuiKeyData KeysData_462;
+    public ImGuiKeyData KeysData_463;
+    public ImGuiKeyData KeysData_464;
+    public ImGuiKeyData KeysData_465;
+    public ImGuiKeyData KeysData_466;
+    public ImGuiKeyData KeysData_467;
+    public ImGuiKeyData KeysData_468;
+    public ImGuiKeyData KeysData_469;
+    public ImGuiKeyData KeysData_470;
+    public ImGuiKeyData KeysData_471;
+    public ImGuiKeyData KeysData_472;
+    public ImGuiKeyData KeysData_473;
+    public ImGuiKeyData KeysData_474;
+    public ImGuiKeyData KeysData_475;
+    public ImGuiKeyData KeysData_476;
+    public ImGuiKeyData KeysData_477;
+    public ImGuiKeyData KeysData_478;
+    public ImGuiKeyData KeysData_479;
+    public ImGuiKeyData KeysData_480;
+    public ImGuiKeyData KeysData_481;
+    public ImGuiKeyData KeysData_482;
+    public ImGuiKeyData KeysData_483;
+    public ImGuiKeyData KeysData_484;
+    public ImGuiKeyData KeysData_485;
+    public ImGuiKeyData KeysData_486;
+    public ImGuiKeyData KeysData_487;
+    public ImGuiKeyData KeysData_488;
+    public ImGuiKeyData KeysData_489;
+    public ImGuiKeyData KeysData_490;
+    public ImGuiKeyData KeysData_491;
+    public ImGuiKeyData KeysData_492;
+    public ImGuiKeyData KeysData_493;
+    public ImGuiKeyData KeysData_494;
+    public ImGuiKeyData KeysData_495;
+    public ImGuiKeyData KeysData_496;
+    public ImGuiKeyData KeysData_497;
+    public ImGuiKeyData KeysData_498;
+    public ImGuiKeyData KeysData_499;
+    public ImGuiKeyData KeysData_500;
+    public ImGuiKeyData KeysData_501;
+    public ImGuiKeyData KeysData_502;
+    public ImGuiKeyData KeysData_503;
+    public ImGuiKeyData KeysData_504;
+    public ImGuiKeyData KeysData_505;
+    public ImGuiKeyData KeysData_506;
+    public ImGuiKeyData KeysData_507;
+    public ImGuiKeyData KeysData_508;
+    public ImGuiKeyData KeysData_509;
+    public ImGuiKeyData KeysData_510;
+    public ImGuiKeyData KeysData_511;
+    public ImGuiKeyData KeysData_512;
+    public ImGuiKeyData KeysData_513;
+    public ImGuiKeyData KeysData_514;
+    public ImGuiKeyData KeysData_515;
+    public ImGuiKeyData KeysData_516;
+    public ImGuiKeyData KeysData_517;
+    public ImGuiKeyData KeysData_518;
+    public ImGuiKeyData KeysData_519;
+    public ImGuiKeyData KeysData_520;
+    public ImGuiKeyData KeysData_521;
+    public ImGuiKeyData KeysData_522;
+    public ImGuiKeyData KeysData_523;
+    public ImGuiKeyData KeysData_524;
+    public ImGuiKeyData KeysData_525;
+    public ImGuiKeyData KeysData_526;
+    public ImGuiKeyData KeysData_527;
+    public ImGuiKeyData KeysData_528;
+    public ImGuiKeyData KeysData_529;
+    public ImGuiKeyData KeysData_530;
+    public ImGuiKeyData KeysData_531;
+    public ImGuiKeyData KeysData_532;
+    public ImGuiKeyData KeysData_533;
+    public ImGuiKeyData KeysData_534;
+    public ImGuiKeyData KeysData_535;
+    public ImGuiKeyData KeysData_536;
+    public ImGuiKeyData KeysData_537;
+    public ImGuiKeyData KeysData_538;
+    public ImGuiKeyData KeysData_539;
+    public ImGuiKeyData KeysData_540;
+    public ImGuiKeyData KeysData_541;
+    public ImGuiKeyData KeysData_542;
+    public ImGuiKeyData KeysData_543;
+    public ImGuiKeyData KeysData_544;
+    public ImGuiKeyData KeysData_545;
+    public ImGuiKeyData KeysData_546;
+    public ImGuiKeyData KeysData_547;
+    public ImGuiKeyData KeysData_548;
+    public ImGuiKeyData KeysData_549;
+    public ImGuiKeyData KeysData_550;
+    public ImGuiKeyData KeysData_551;
+    public ImGuiKeyData KeysData_552;
+    public ImGuiKeyData KeysData_553;
+    public ImGuiKeyData KeysData_554;
+    public ImGuiKeyData KeysData_555;
+    public ImGuiKeyData KeysData_556;
+    public ImGuiKeyData KeysData_557;
+    public ImGuiKeyData KeysData_558;
+    public ImGuiKeyData KeysData_559;
+    public ImGuiKeyData KeysData_560;
+    public ImGuiKeyData KeysData_561;
+    public ImGuiKeyData KeysData_562;
+    public ImGuiKeyData KeysData_563;
+    public ImGuiKeyData KeysData_564;
+    public ImGuiKeyData KeysData_565;
+    public ImGuiKeyData KeysData_566;
+    public ImGuiKeyData KeysData_567;
+    public ImGuiKeyData KeysData_568;
+    public ImGuiKeyData KeysData_569;
+    public ImGuiKeyData KeysData_570;
+    public ImGuiKeyData KeysData_571;
+    public ImGuiKeyData KeysData_572;
+    public ImGuiKeyData KeysData_573;
+    public ImGuiKeyData KeysData_574;
+    public ImGuiKeyData KeysData_575;
+    public ImGuiKeyData KeysData_576;
+    public ImGuiKeyData KeysData_577;
+    public ImGuiKeyData KeysData_578;
+    public ImGuiKeyData KeysData_579;
+    public ImGuiKeyData KeysData_580;
+    public ImGuiKeyData KeysData_581;
+    public ImGuiKeyData KeysData_582;
+    public ImGuiKeyData KeysData_583;
+    public ImGuiKeyData KeysData_584;
+    public ImGuiKeyData KeysData_585;
+    public ImGuiKeyData KeysData_586;
+    public ImGuiKeyData KeysData_587;
+    public ImGuiKeyData KeysData_588;
+    public ImGuiKeyData KeysData_589;
+    public ImGuiKeyData KeysData_590;
+    public ImGuiKeyData KeysData_591;
+    public ImGuiKeyData KeysData_592;
+    public ImGuiKeyData KeysData_593;
+    public ImGuiKeyData KeysData_594;
+    public ImGuiKeyData KeysData_595;
+    public ImGuiKeyData KeysData_596;
+    public ImGuiKeyData KeysData_597;
+    public ImGuiKeyData KeysData_598;
+    public ImGuiKeyData KeysData_599;
+    public ImGuiKeyData KeysData_600;
+    public ImGuiKeyData KeysData_601;
+    public ImGuiKeyData KeysData_602;
+    public ImGuiKeyData KeysData_603;
+    public ImGuiKeyData KeysData_604;
+    public ImGuiKeyData KeysData_605;
+    public ImGuiKeyData KeysData_606;
+    public ImGuiKeyData KeysData_607;
+    public ImGuiKeyData KeysData_608;
+    public ImGuiKeyData KeysData_609;
+    public ImGuiKeyData KeysData_610;
+    public ImGuiKeyData KeysData_611;
+    public ImGuiKeyData KeysData_612;
+    public ImGuiKeyData KeysData_613;
+    public ImGuiKeyData KeysData_614;
+    public ImGuiKeyData KeysData_615;
+    public ImGuiKeyData KeysData_616;
+    public ImGuiKeyData KeysData_617;
+    public ImGuiKeyData KeysData_618;
+    public ImGuiKeyData KeysData_619;
+    public ImGuiKeyData KeysData_620;
+    public ImGuiKeyData KeysData_621;
+    public ImGuiKeyData KeysData_622;
+    public ImGuiKeyData KeysData_623;
+    public ImGuiKeyData KeysData_624;
+    public ImGuiKeyData KeysData_625;
+    public ImGuiKeyData KeysData_626;
+    public ImGuiKeyData KeysData_627;
+    public ImGuiKeyData KeysData_628;
+    public ImGuiKeyData KeysData_629;
+    public ImGuiKeyData KeysData_630;
+    public ImGuiKeyData KeysData_631;
+    public ImGuiKeyData KeysData_632;
+    public ImGuiKeyData KeysData_633;
+    public ImGuiKeyData KeysData_634;
+    public ImGuiKeyData KeysData_635;
+    public ImGuiKeyData KeysData_636;
+    public ImGuiKeyData KeysData_637;
+    public ImGuiKeyData KeysData_638;
+    public ImGuiKeyData KeysData_639;
+    public ImGuiKeyData KeysData_640;
+    public ImGuiKeyData KeysData_641;
+    public ImGuiKeyData KeysData_642;
+    public ImGuiKeyData KeysData_643;
+    public ImGuiKeyData KeysData_644;
+    public byte WantCaptureMouseUnlessPopupClose;
+    public UnityEngine.Vector2 MousePosPrev;
+    public UnityEngine.Vector2 MouseClickedPos_0;
+    public UnityEngine.Vector2 MouseClickedPos_1;
+    public UnityEngine.Vector2 MouseClickedPos_2;
+    public UnityEngine.Vector2 MouseClickedPos_3;
+    public UnityEngine.Vector2 MouseClickedPos_4;
+    public unsafe fixed double MouseClickedTime[5];
+    public unsafe fixed byte MouseClicked[5];
+    public unsafe fixed byte MouseDoubleClicked[5];
+    public ushort MouseClickedCount_0;
+    public ushort MouseClickedCount_1;
+    public ushort MouseClickedCount_2;
+    public ushort MouseClickedCount_3;
+    public ushort MouseClickedCount_4;
+    public ushort MouseClickedLastCount_0;
+    public ushort MouseClickedLastCount_1;
+    public ushort MouseClickedLastCount_2;
+    public ushort MouseClickedLastCount_3;
+    public ushort MouseClickedLastCount_4;
+    public unsafe fixed byte MouseReleased[5];
+    public unsafe fixed byte MouseDownOwned[5];
+    public unsafe fixed byte MouseDownOwnedUnlessPopupClose[5];
+    public unsafe fixed float MouseDownDuration[5];
+    public unsafe fixed float MouseDownDurationPrev[5];
+    public unsafe fixed float MouseDragMaxDistanceSqr[5];
+    public unsafe fixed float NavInputsDownDuration[20];
+    public unsafe fixed float NavInputsDownDurationPrev[20];
+    public float PenPressure;
+    public byte AppFocusLost;
+    public byte AppAcceptingEvents;
+    public System.SByte BackendUsingLegacyKeyArrays;
+    public byte BackendUsingLegacyNavInputArray;
+    public ushort InputQueueSurrogate;
+    public ImVector InputQueueCharacters;
+  }
+  public struct ImGuiIOPtr
+  {
+    public unsafe ImGuiIO* NativePtr { get => default; }
+    public ref ImGuiConfigFlags ConfigFlags { get => ref __0; }
+    public ref ImGuiBackendFlags BackendFlags { get => ref __1; }
+    public ref UnityEngine.Vector2 DisplaySize { get => ref __2; }
+    public ref float DeltaTime { get => ref __3; }
+    public ref float IniSavingRate { get => ref __3; }
+    public ref string IniFilename { get => ref __4; }
+    public ref string LogFilename { get => ref __4; }
+    public ref float MouseDoubleClickTime { get => ref __3; }
+    public ref float MouseDoubleClickMaxDist { get => ref __3; }
+    public ref float MouseDragThreshold { get => ref __3; }
+    public ref float KeyRepeatDelay { get => ref __3; }
+    public ref float KeyRepeatRate { get => ref __3; }
+    public System.IntPtr UserData { get => default; set { } }
+    public ref ImFontAtlasPtr Fonts { get => ref __5; }
+    public ref float FontGlobalScale { get => ref __3; }
+    public ref bool FontAllowUserScaling { get => ref __6; }
+    public ref ImFontPtr FontDefault { get => ref __7; }
+    public ref UnityEngine.Vector2 DisplayFramebufferScale { get => ref __2; }
+    public ref bool MouseDrawCursor { get => ref __6; }
+    public ref bool ConfigMacOSXBehaviors { get => ref __6; }
+    public ref bool ConfigInputTrickleEventQueue { get => ref __6; }
+    public ref bool ConfigInputTextCursorBlink { get => ref __6; }
+    public ref bool ConfigDragClickToInputText { get => ref __6; }
+    public ref bool ConfigWindowsResizeFromEdges { get => ref __6; }
+    public ref bool ConfigWindowsMoveFromTitleBarOnly { get => ref __6; }
+    public ref float ConfigMemoryCompactTimer { get => ref __3; }
+    public ref string BackendPlatformName { get => ref __4; }
+    public ref string BackendRendererName { get => ref __4; }
+    public System.IntPtr BackendPlatformUserData { get => default; set { } }
+    public System.IntPtr BackendRendererUserData { get => default; set { } }
+    public System.IntPtr BackendLanguageUserData { get => default; set { } }
+    public System.IntPtr GetClipboardTextFn { get => default; set { } }
+    public System.IntPtr SetClipboardTextFn { get => default; set { } }
+    public System.IntPtr ClipboardUserData { get => default; set { } }
+    public System.IntPtr SetPlatformImeDataFn { get => default; set { } }
+    public System.IntPtr _UnusedPadding { get => default; set { } }
+    public ref bool WantCaptureMouse { get => ref __6; }
+    public ref bool WantCaptureKeyboard { get => ref __6; }
+    public ref bool WantTextInput { get => ref __6; }
+    public ref bool WantSetMousePos { get => ref __6; }
+    public ref bool WantSaveIniSettings { get => ref __6; }
+    public ref bool NavActive { get => ref __6; }
+    public ref bool NavVisible { get => ref __6; }
+    public ref float Framerate { get => ref __3; }
+    public ref int MetricsRenderVertices { get => ref __8; }
+    public ref int MetricsRenderIndices { get => ref __8; }
+    public ref int MetricsRenderWindows { get => ref __8; }
+    public ref int MetricsActiveWindows { get => ref __8; }
+    public ref int MetricsActiveAllocations { get => ref __8; }
+    public ref UnityEngine.Vector2 MouseDelta { get => ref __2; }
+    public RangeAccessor<int> KeyMap { get => default; }
+    public RangeAccessor<bool> KeysDown { get => default; }
+    public ref UnityEngine.Vector2 MousePos { get => ref __2; }
+    public RangeAccessor<bool> MouseDown { get => default; }
+    public ref float MouseWheel { get => ref __3; }
+    public ref float MouseWheelH { get => ref __3; }
+    public ref bool KeyCtrl { get => ref __6; }
+    public ref bool KeyShift { get => ref __6; }
+    public ref bool KeyAlt { get => ref __6; }
+    public ref bool KeySuper { get => ref __6; }
+    public RangeAccessor<float> NavInputs { get => default; }
+    public ref ImGuiModFlags KeyMods { get => ref __9; }
+    public RangeAccessor<ImGuiKeyData> KeysData { get => default; }
+    public ref bool WantCaptureMouseUnlessPopupClose { get => ref __6; }
+    public ref UnityEngine.Vector2 MousePosPrev { get => ref __2; }
+    public RangeAccessor<UnityEngine.Vector2> MouseClickedPos { get => default; }
+    public RangeAccessor<double> MouseClickedTime { get => default; }
+    public RangeAccessor<bool> MouseClicked { get => default; }
+    public RangeAccessor<bool> MouseDoubleClicked { get => default; }
+    public RangeAccessor<ushort> MouseClickedCount { get => default; }
+    public RangeAccessor<ushort> MouseClickedLastCount { get => default; }
+    public RangeAccessor<bool> MouseReleased { get => default; }
+    public RangeAccessor<bool> MouseDownOwned { get => default; }
+    public RangeAccessor<bool> MouseDownOwnedUnlessPopupClose { get => default; }
+    public RangeAccessor<float> MouseDownDuration { get => default; }
+    public RangeAccessor<float> MouseDownDurationPrev { get => default; }
+    public RangeAccessor<float> MouseDragMaxDistanceSqr { get => default; }
+    public RangeAccessor<float> NavInputsDownDuration { get => default; }
+    public RangeAccessor<float> NavInputsDownDurationPrev { get => default; }
+    public ref float PenPressure { get => ref __3; }
+    public ref bool AppFocusLost { get => ref __6; }
+    public ref bool AppAcceptingEvents { get => ref __6; }
+    public ref System.SByte BackendUsingLegacyKeyArrays { get => ref __10; }
+    public ref bool BackendUsingLegacyNavInputArray { get => ref __6; }
+    public ref ushort InputQueueSurrogate { get => ref __11; }
+    public ImVector<ushort> InputQueueCharacters { get => default; }
+    public void AddFocusEvent(bool focused) { }
+    public void AddInputCharacter(uint c) { }
+    public void AddInputCharacterUTF16(ushort c) { }
+    public void AddInputCharactersUTF8(string str) { }
+    public void AddKeyAnalogEvent(ImGuiKey key, bool down, float v) { }
+    public void AddKeyEvent(ImGuiKey key, bool down) { }
+    public void AddMouseButtonEvent(int button, bool down) { }
+    public void AddMousePosEvent(float x, float y) { }
+    public void AddMouseWheelEvent(float wh_x, float wh_y) { }
+    public void ClearInputCharacters() { }
+    public void ClearInputKeys() { }
+    public void SetAppAcceptingEvents(bool accepting_events) { }
+    public void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode) { }
+    public void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index) { }
+    public void ImGuiIO_destroy() { }
+    public void SetBackendRendererName(string name) { }
+    public void SetBackendPlatformName(string name) { }
+    public void SetIniFilename(string name) { }
+    public void SetBackendPlatformUserData<T>(T? data) where T : unmanaged { }
+    internal static ImGuiConfigFlags __0;
+    internal static ImGuiBackendFlags __1;
+    internal static UnityEngine.Vector2 __2;
+    internal static float __3;
+    internal static string __4;
+    internal static ImFontAtlasPtr __5;
+    internal static bool __6;
+    internal static ImFontPtr __7;
+    internal static int __8;
+    internal static ImGuiModFlags __9;
+    internal static System.SByte __10;
+    internal static ushort __11;
+  }
+  public enum ImGuiItemFlags
+  {
+    None = 0,
+    NoTabStop = 1,
+    ButtonRepeat = 2,
+    Disabled = 4,
+    NoNav = 8,
+    NoNavDefaultFocus = 16,
+    SelectableDontClosePopup = 32,
+    MixedValue = 64,
+    ReadOnly = 128,
+    Inputable = 256,
+  }
+  public enum ImGuiItemStatusFlags
+  {
+    None = 0,
+    HoveredRect = 1,
+    HasDisplayRect = 2,
+    Edited = 4,
+    ToggledSelection = 8,
+    ToggledOpen = 16,
+    HasDeactivated = 32,
+    Deactivated = 64,
+    HoveredWindow = 128,
+    FocusedByTabbing = 256,
+  }
+  public enum ImGuiKey
+  {
+    None = 0,
+    KeysData_OFFSET = 0,
+    NamedKey_COUNT = 133,
+    NamedKey_BEGIN = 512,
+    Tab = 512,
+    LeftArrow = 513,
+    RightArrow = 514,
+    UpArrow = 515,
+    DownArrow = 516,
+    PageUp = 517,
+    PageDown = 518,
+    Home = 519,
+    End = 520,
+    Insert = 521,
+    Delete = 522,
+    Backspace = 523,
+    Space = 524,
+    Enter = 525,
+    Escape = 526,
+    LeftCtrl = 527,
+    LeftShift = 528,
+    LeftAlt = 529,
+    LeftSuper = 530,
+    RightCtrl = 531,
+    RightShift = 532,
+    RightAlt = 533,
+    RightSuper = 534,
+    Menu = 535,
+    _0 = 536,
+    _1 = 537,
+    _2 = 538,
+    _3 = 539,
+    _4 = 540,
+    _5 = 541,
+    _6 = 542,
+    _7 = 543,
+    _8 = 544,
+    _9 = 545,
+    A = 546,
+    B = 547,
+    C = 548,
+    D = 549,
+    E = 550,
+    F = 551,
+    G = 552,
+    H = 553,
+    I = 554,
+    J = 555,
+    K = 556,
+    L = 557,
+    M = 558,
+    N = 559,
+    O = 560,
+    P = 561,
+    Q = 562,
+    R = 563,
+    S = 564,
+    T = 565,
+    U = 566,
+    V = 567,
+    W = 568,
+    X = 569,
+    Y = 570,
+    Z = 571,
+    F1 = 572,
+    F2 = 573,
+    F3 = 574,
+    F4 = 575,
+    F5 = 576,
+    F6 = 577,
+    F7 = 578,
+    F8 = 579,
+    F9 = 580,
+    F10 = 581,
+    F11 = 582,
+    F12 = 583,
+    Apostrophe = 584,
+    Comma = 585,
+    Minus = 586,
+    Period = 587,
+    Slash = 588,
+    Semicolon = 589,
+    Equal = 590,
+    LeftBracket = 591,
+    Backslash = 592,
+    RightBracket = 593,
+    GraveAccent = 594,
+    CapsLock = 595,
+    ScrollLock = 596,
+    NumLock = 597,
+    PrintScreen = 598,
+    Pause = 599,
+    Keypad0 = 600,
+    Keypad1 = 601,
+    Keypad2 = 602,
+    Keypad3 = 603,
+    Keypad4 = 604,
+    Keypad5 = 605,
+    Keypad6 = 606,
+    Keypad7 = 607,
+    Keypad8 = 608,
+    Keypad9 = 609,
+    KeypadDecimal = 610,
+    KeypadDivide = 611,
+    KeypadMultiply = 612,
+    KeypadSubtract = 613,
+    KeypadAdd = 614,
+    KeypadEnter = 615,
+    KeypadEqual = 616,
+    GamepadStart = 617,
+    GamepadBack = 618,
+    GamepadFaceUp = 619,
+    GamepadFaceDown = 620,
+    GamepadFaceLeft = 621,
+    GamepadFaceRight = 622,
+    GamepadDpadUp = 623,
+    GamepadDpadDown = 624,
+    GamepadDpadLeft = 625,
+    GamepadDpadRight = 626,
+    GamepadL1 = 627,
+    GamepadR1 = 628,
+    GamepadL2 = 629,
+    GamepadR2 = 630,
+    GamepadL3 = 631,
+    GamepadR3 = 632,
+    GamepadLStickUp = 633,
+    GamepadLStickDown = 634,
+    GamepadLStickLeft = 635,
+    GamepadLStickRight = 636,
+    GamepadRStickUp = 637,
+    GamepadRStickDown = 638,
+    GamepadRStickLeft = 639,
+    GamepadRStickRight = 640,
+    ModCtrl = 641,
+    ModShift = 642,
+    ModAlt = 643,
+    ModSuper = 644,
+    COUNT = 645,
+    NamedKey_END = 645,
+    KeysData_SIZE = 645,
+  }
+  public struct ImGuiKeyData
+  {
+    public byte Down;
+    public float DownDuration;
+    public float DownDurationPrev;
+    public float AnalogValue;
+  }
+  public struct ImGuiKeyDataPtr
+  {
+    public unsafe ImGuiKeyData* NativePtr { get => default; }
+    public ref bool Down { get => ref __0; }
+    public ref float DownDuration { get => ref __1; }
+    public ref float DownDurationPrev { get => ref __1; }
+    public ref float AnalogValue { get => ref __1; }
+    internal static bool __0;
+    internal static float __1;
+  }
+  public enum ImGuiKeyPrivate
+  {
+    LegacyNativeKey_BEGIN = 0,
+    LegacyNativeKey_END = 512,
+    Gamepad_BEGIN = 617,
+    Gamepad_END = 641,
+  }
+  public struct ImGuiLastItemData
+  {
+    public uint ID;
+    public ImGuiItemFlags InFlags;
+    public ImGuiItemStatusFlags StatusFlags;
+    public UnityEngine.Rect Rect;
+    public UnityEngine.Rect NavRect;
+    public UnityEngine.Rect DisplayRect;
+  }
+  public struct ImGuiLastItemDataPtr
+  {
+    public unsafe ImGuiLastItemData* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiItemFlags InFlags { get => ref __1; }
+    public ref ImGuiItemStatusFlags StatusFlags { get => ref __2; }
+    public ref UnityEngine.Rect Rect { get => ref __3; }
+    public ref UnityEngine.Rect NavRect { get => ref __3; }
+    public ref UnityEngine.Rect DisplayRect { get => ref __3; }
+    public void ImGuiLastItemData_destroy() { }
+    internal static uint __0;
+    internal static ImGuiItemFlags __1;
+    internal static ImGuiItemStatusFlags __2;
+    internal static UnityEngine.Rect __3;
+  }
+  public enum ImGuiLayoutType
+  {
+    Horizontal = 0,
+    Vertical = 1,
+  }
+  public struct ImGuiListClipper
+  {
+    public int DisplayStart;
+    public int DisplayEnd;
+    public int ItemsCount;
+    public float ItemsHeight;
+    public float StartPosY;
+    public unsafe void* TempData;
+  }
+  public struct ImGuiListClipperPtr
+  {
+    public unsafe ImGuiListClipper* NativePtr { get => default; }
+    public ref int DisplayStart { get => ref __0; }
+    public ref int DisplayEnd { get => ref __0; }
+    public ref int ItemsCount { get => ref __0; }
+    public ref float ItemsHeight { get => ref __1; }
+    public ref float StartPosY { get => ref __1; }
+    public System.IntPtr TempData { get => default; set { } }
+    public void Begin(int items_count) { }
+    public void Begin(int items_count, float items_height) { }
+    public void End() { }
+    public void ForceDisplayRangeByIndices(int item_min, int item_max) { }
+    public bool Step() { return default; }
+    public void ImGuiListClipper_destroy() { }
+    internal static int __0;
+    internal static float __1;
+  }
+  public struct ImGuiListClipperData
+  {
+    public unsafe ImGuiListClipper* ListClipper;
+    public float LossynessOffset;
+    public int StepNo;
+    public int ItemsFrozen;
+    public ImVector Ranges;
+  }
+  public struct ImGuiListClipperDataPtr
+  {
+    public unsafe ImGuiListClipperData* NativePtr { get => default; }
+    public ref ImGuiListClipperPtr ListClipper { get => ref __0; }
+    public ref float LossynessOffset { get => ref __1; }
+    public ref int StepNo { get => ref __2; }
+    public ref int ItemsFrozen { get => ref __2; }
+    public ImPtrVector<ImGuiListClipperRangePtr> Ranges { get => default; }
+    public void Reset(ImGuiListClipperPtr clipper) { }
+    public void ImGuiListClipperData_destroy() { }
+    internal static ImGuiListClipperPtr __0;
+    internal static float __1;
+    internal static int __2;
+  }
+  public struct ImGuiListClipperRange
+  {
+    public int Min;
+    public int Max;
+    public byte PosToIndexConvert;
+    public System.SByte PosToIndexOffsetMin;
+    public System.SByte PosToIndexOffsetMax;
+  }
+  public struct ImGuiListClipperRangePtr
+  {
+    public unsafe ImGuiListClipperRange* NativePtr { get => default; }
+    public ref int Min { get => ref __0; }
+    public ref int Max { get => ref __0; }
+    public ref bool PosToIndexConvert { get => ref __1; }
+    public ref System.SByte PosToIndexOffsetMin { get => ref __2; }
+    public ref System.SByte PosToIndexOffsetMax { get => ref __2; }
+    public static ImGuiListClipperRange FromIndices(int min, int max) { return default; }
+    public static ImGuiListClipperRange FromPositions(float y1, float y2, int off_min, int off_max) { return default; }
+    internal static int __0;
+    internal static bool __1;
+    internal static System.SByte __2;
+  }
+  public enum ImGuiLogType
+  {
+    None = 0,
+    TTY = 1,
+    File = 2,
+    Buffer = 3,
+    Clipboard = 4,
+  }
+  public struct ImGuiMenuColumns
+  {
+    public uint TotalWidth;
+    public uint NextTotalWidth;
+    public ushort Spacing;
+    public ushort OffsetIcon;
+    public ushort OffsetLabel;
+    public ushort OffsetShortcut;
+    public ushort OffsetMark;
+    public ushort Widths_0;
+    public ushort Widths_1;
+    public ushort Widths_2;
+    public ushort Widths_3;
+  }
+  public struct ImGuiMenuColumnsPtr
+  {
+    public unsafe ImGuiMenuColumns* NativePtr { get => default; }
+    public ref uint TotalWidth { get => ref __0; }
+    public ref uint NextTotalWidth { get => ref __0; }
+    public ref ushort Spacing { get => ref __1; }
+    public ref ushort OffsetIcon { get => ref __1; }
+    public ref ushort OffsetLabel { get => ref __1; }
+    public ref ushort OffsetShortcut { get => ref __1; }
+    public ref ushort OffsetMark { get => ref __1; }
+    public RangeAccessor<ushort> Widths { get => default; }
+    public void CalcNextTotalWidth(bool update_offsets) { }
+    public float DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark) { return default; }
+    public void Update(float spacing, bool window_reappearing) { }
+    public void ImGuiMenuColumns_destroy() { }
+    internal static uint __0;
+    internal static ushort __1;
+  }
+  public struct ImGuiMetricsConfig
+  {
+    public byte ShowDebugLog;
+    public byte ShowStackTool;
+    public byte ShowWindowsRects;
+    public byte ShowWindowsBeginOrder;
+    public byte ShowTablesRects;
+    public byte ShowDrawCmdMesh;
+    public byte ShowDrawCmdBoundingBoxes;
+    public int ShowWindowsRectsType;
+    public int ShowTablesRectsType;
+  }
+  public struct ImGuiMetricsConfigPtr
+  {
+    public unsafe ImGuiMetricsConfig* NativePtr { get => default; }
+    public ref bool ShowDebugLog { get => ref __0; }
+    public ref bool ShowStackTool { get => ref __0; }
+    public ref bool ShowWindowsRects { get => ref __0; }
+    public ref bool ShowWindowsBeginOrder { get => ref __0; }
+    public ref bool ShowTablesRects { get => ref __0; }
+    public ref bool ShowDrawCmdMesh { get => ref __0; }
+    public ref bool ShowDrawCmdBoundingBoxes { get => ref __0; }
+    public ref int ShowWindowsRectsType { get => ref __1; }
+    public ref int ShowTablesRectsType { get => ref __1; }
+    public void ImGuiMetricsConfig_destroy() { }
+    internal static bool __0;
+    internal static int __1;
+  }
+  public enum ImGuiModFlags
+  {
+    None = 0,
+    Ctrl = 1,
+    Shift = 2,
+    Alt = 4,
+    Super = 8,
+  }
+  public enum ImGuiMouseButton
+  {
+    Left = 0,
+    Right = 1,
+    Middle = 2,
+    COUNT = 5,
+  }
+  public enum ImGuiMouseCursor
+  {
+    Arrow = 0,
+    TextInput = 1,
+    ResizeAll = 2,
+    ResizeNS = 3,
+    ResizeEW = 4,
+    ResizeNESW = 5,
+    ResizeNWSE = 6,
+    Hand = 7,
+    NotAllowed = 8,
+    COUNT = 9,
+    None = -1,
+  }
+  public class ImGuiNative
+  {
+    public static unsafe void ImColor_HSV(ImColor* pOut, float h, float s, float v, float a) { }
+    public static unsafe ImColor* ImColor_ImColor_Nil() { return default; }
+    public static unsafe ImColor* ImColor_ImColor_Float(float r, float g, float b, float a) { return default; }
+    public static unsafe ImColor* ImColor_ImColor_Vec4(UnityEngine.Vector4 col) { return default; }
+    public static unsafe ImColor* ImColor_ImColor_Int(int r, int g, int b, int a) { return default; }
+    public static unsafe ImColor* ImColor_ImColor_U32(uint rgba) { return default; }
+    public static unsafe void ImColor_SetHSV(ImColor* self, float h, float s, float v, float a) { }
+    public static unsafe void ImColor_destroy(ImColor* self) { }
+    public static unsafe System.IntPtr ImDrawCmd_GetTexID(ImDrawCmd* self) { return default; }
+    public static unsafe ImDrawCmd* ImDrawCmd_ImDrawCmd() { return default; }
+    public static unsafe void ImDrawCmd_destroy(ImDrawCmd* self) { }
+    public static unsafe void ImDrawData_Clear(ImDrawData* self) { }
+    public static unsafe void ImDrawData_DeIndexAllBuffers(ImDrawData* self) { }
+    public static unsafe ImDrawData* ImDrawData_ImDrawData() { return default; }
+    public static unsafe void ImDrawData_ScaleClipRects(ImDrawData* self, UnityEngine.Vector2 fb_scale) { }
+    public static unsafe void ImDrawData_destroy(ImDrawData* self) { }
+    public static unsafe void ImDrawDataBuilder_Clear(ImDrawDataBuilder* self) { }
+    public static unsafe void ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder* self) { }
+    public static unsafe void ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder* self) { }
+    public static unsafe int ImDrawDataBuilder_GetDrawListCount(ImDrawDataBuilder* self) { return default; }
+    public static unsafe void ImDrawList_AddBezierCubic(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col, float thickness, int num_segments) { }
+    public static unsafe void ImDrawList_AddBezierQuadratic(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col, float thickness, int num_segments) { }
+    public static unsafe void ImDrawList_AddCallback(ImDrawList* self, ImDrawCallback callback, System.IntPtr callback_data) { }
+    public static unsafe void ImDrawList_AddCircle(ImDrawList* self, UnityEngine.Vector2 center, float radius, uint col, int num_segments, float thickness) { }
+    public static unsafe void ImDrawList_AddCircleFilled(ImDrawList* self, UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public static unsafe void ImDrawList_AddConvexPolyFilled(ImDrawList* self, UnityEngine.Vector2* points, int num_points, uint col) { }
+    public static unsafe void ImDrawList_AddDrawCmd(ImDrawList* self) { }
+    public static unsafe void ImDrawList_AddImage(ImDrawList* self, System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max, uint col) { }
+    public static unsafe void ImDrawList_AddImageQuad(ImDrawList* self, System.IntPtr user_texture_id, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3, UnityEngine.Vector2 uv4, uint col) { }
+    public static unsafe void ImDrawList_AddImageRounded(ImDrawList* self, System.IntPtr user_texture_id, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, UnityEngine.Vector2 uv_min, UnityEngine.Vector2 uv_max, uint col, float rounding, ImDrawFlags flags) { }
+    public static unsafe void ImDrawList_AddLine(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, uint col, float thickness) { }
+    public static unsafe void ImDrawList_AddNgon(ImDrawList* self, UnityEngine.Vector2 center, float radius, uint col, int num_segments, float thickness) { }
+    public static unsafe void ImDrawList_AddNgonFilled(ImDrawList* self, UnityEngine.Vector2 center, float radius, uint col, int num_segments) { }
+    public static unsafe void ImDrawList_AddPolyline(ImDrawList* self, UnityEngine.Vector2* points, int num_points, uint col, ImDrawFlags flags, float thickness) { }
+    public static unsafe void ImDrawList_AddQuad(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col, float thickness) { }
+    public static unsafe void ImDrawList_AddQuadFilled(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, uint col) { }
+    public static unsafe void ImDrawList_AddRect(ImDrawList* self, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness) { }
+    public static unsafe void ImDrawList_AddRectFilled(ImDrawList* self, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col, float rounding, ImDrawFlags flags) { }
+    public static unsafe void ImDrawList_AddRectFilledMultiColor(ImDrawList* self, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left) { }
+    public static unsafe void ImDrawList_AddText_Vec2(ImDrawList* self, UnityEngine.Vector2 pos, uint col, byte* text_begin, byte* text_end) { }
+    public static unsafe void ImDrawList_AddText_FontPtr(ImDrawList* self, ImFont* font, float font_size, UnityEngine.Vector2 pos, uint col, byte* text_begin, byte* text_end, float wrap_width, UnityEngine.Vector4* cpu_fine_clip_rect) { }
+    public static unsafe void ImDrawList_AddTriangle(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col, float thickness) { }
+    public static unsafe void ImDrawList_AddTriangleFilled(ImDrawList* self, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, uint col) { }
+    public static unsafe void ImDrawList_ChannelsMerge(ImDrawList* self) { }
+    public static unsafe void ImDrawList_ChannelsSetCurrent(ImDrawList* self, int n) { }
+    public static unsafe void ImDrawList_ChannelsSplit(ImDrawList* self, int count) { }
+    public static unsafe ImDrawList* ImDrawList_CloneOutput(ImDrawList* self) { return default; }
+    public static unsafe void ImDrawList_GetClipRectMax(UnityEngine.Vector2* pOut, ImDrawList* self) { }
+    public static unsafe void ImDrawList_GetClipRectMin(UnityEngine.Vector2* pOut, ImDrawList* self) { }
+    public static unsafe ImDrawList* ImDrawList_ImDrawList(ImDrawListSharedData* shared_data) { return default; }
+    public static unsafe void ImDrawList_PathArcTo(ImDrawList* self, UnityEngine.Vector2 center, float radius, float a_min, float a_max, int num_segments) { }
+    public static unsafe void ImDrawList_PathArcToFast(ImDrawList* self, UnityEngine.Vector2 center, float radius, int a_min_of_12, int a_max_of_12) { }
+    public static unsafe void ImDrawList_PathBezierCubicCurveTo(ImDrawList* self, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, int num_segments) { }
+    public static unsafe void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, int num_segments) { }
+    public static unsafe void ImDrawList_PathClear(ImDrawList* self) { }
+    public static unsafe void ImDrawList_PathFillConvex(ImDrawList* self, uint col) { }
+    public static unsafe void ImDrawList_PathLineTo(ImDrawList* self, UnityEngine.Vector2 pos) { }
+    public static unsafe void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self, UnityEngine.Vector2 pos) { }
+    public static unsafe void ImDrawList_PathRect(ImDrawList* self, UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max, float rounding, ImDrawFlags flags) { }
+    public static unsafe void ImDrawList_PathStroke(ImDrawList* self, uint col, ImDrawFlags flags, float thickness) { }
+    public static unsafe void ImDrawList_PopClipRect(ImDrawList* self) { }
+    public static unsafe void ImDrawList_PopTextureID(ImDrawList* self) { }
+    public static unsafe void ImDrawList_PrimQuadUV(ImDrawList* self, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 d, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, UnityEngine.Vector2 uv_c, UnityEngine.Vector2 uv_d, uint col) { }
+    public static unsafe void ImDrawList_PrimRect(ImDrawList* self, UnityEngine.Vector2 a, UnityEngine.Vector2 b, uint col) { }
+    public static unsafe void ImDrawList_PrimRectUV(ImDrawList* self, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, uint col) { }
+    public static unsafe void ImDrawList_PrimReserve(ImDrawList* self, int idx_count, int vtx_count) { }
+    public static unsafe void ImDrawList_PrimUnreserve(ImDrawList* self, int idx_count, int vtx_count) { }
+    public static unsafe void ImDrawList_PrimVtx(ImDrawList* self, UnityEngine.Vector2 pos, UnityEngine.Vector2 uv, uint col) { }
+    public static unsafe void ImDrawList_PrimWriteIdx(ImDrawList* self, ushort idx) { }
+    public static unsafe void ImDrawList_PrimWriteVtx(ImDrawList* self, UnityEngine.Vector2 pos, UnityEngine.Vector2 uv, uint col) { }
+    public static unsafe void ImDrawList_PushClipRect(ImDrawList* self, UnityEngine.Vector2 clip_rect_min, UnityEngine.Vector2 clip_rect_max, byte intersect_with_current_clip_rect) { }
+    public static unsafe void ImDrawList_PushClipRectFullScreen(ImDrawList* self) { }
+    public static unsafe void ImDrawList_PushTextureID(ImDrawList* self, System.IntPtr texture_id) { }
+    public static unsafe int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList* self, float radius) { return default; }
+    public static unsafe void ImDrawList__ClearFreeMemory(ImDrawList* self) { }
+    public static unsafe void ImDrawList__OnChangedClipRect(ImDrawList* self) { }
+    public static unsafe void ImDrawList__OnChangedTextureID(ImDrawList* self) { }
+    public static unsafe void ImDrawList__OnChangedVtxOffset(ImDrawList* self) { }
+    public static unsafe void ImDrawList__PathArcToFastEx(ImDrawList* self, UnityEngine.Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step) { }
+    public static unsafe void ImDrawList__PathArcToN(ImDrawList* self, UnityEngine.Vector2 center, float radius, float a_min, float a_max, int num_segments) { }
+    public static unsafe void ImDrawList__PopUnusedDrawCmd(ImDrawList* self) { }
+    public static unsafe void ImDrawList__ResetForNewFrame(ImDrawList* self) { }
+    public static unsafe void ImDrawList__TryMergeDrawCmds(ImDrawList* self) { }
+    public static unsafe void ImDrawList_destroy(ImDrawList* self) { }
+    public static unsafe ImDrawListSharedData* ImDrawListSharedData_ImDrawListSharedData() { return default; }
+    public static unsafe void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData* self, float max_error) { }
+    public static unsafe void ImDrawListSharedData_destroy(ImDrawListSharedData* self) { }
+    public static unsafe void ImDrawListSplitter_Clear(ImDrawListSplitter* self) { }
+    public static unsafe void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self) { }
+    public static unsafe ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter() { return default; }
+    public static unsafe void ImDrawListSplitter_Merge(ImDrawListSplitter* self, ImDrawList* draw_list) { }
+    public static unsafe void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self, ImDrawList* draw_list, int channel_idx) { }
+    public static unsafe void ImDrawListSplitter_Split(ImDrawListSplitter* self, ImDrawList* draw_list, int count) { }
+    public static unsafe void ImDrawListSplitter_destroy(ImDrawListSplitter* self) { }
+    public static unsafe void ImFont_AddGlyph(ImFont* self, ImFontConfig* src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) { }
+    public static unsafe void ImFont_AddRemapChar(ImFont* self, ushort dst, ushort src, byte overwrite_dst) { }
+    public static unsafe void ImFont_BuildLookupTable(ImFont* self) { }
+    public static unsafe void ImFont_CalcTextSizeA(UnityEngine.Vector2* pOut, ImFont* self, float size, float max_width, float wrap_width, byte* text_begin, byte* text_end, System.Byte** remaining) { }
+    public static unsafe byte* ImFont_CalcWordWrapPositionA(ImFont* self, float scale, byte* text, byte* text_end, float wrap_width) { return default; }
+    public static unsafe void ImFont_ClearOutputData(ImFont* self) { }
+    public static unsafe ImFontGlyph* ImFont_FindGlyph(ImFont* self, ushort c) { return default; }
+    public static unsafe ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self, ushort c) { return default; }
+    public static unsafe float ImFont_GetCharAdvance(ImFont* self, ushort c) { return default; }
+    public static unsafe byte* ImFont_GetDebugName(ImFont* self) { return default; }
+    public static unsafe void ImFont_GrowIndex(ImFont* self, int new_size) { }
+    public static unsafe ImFont* ImFont_ImFont() { return default; }
+    public static unsafe byte ImFont_IsGlyphRangeUnused(ImFont* self, uint c_begin, uint c_last) { return default; }
+    public static unsafe byte ImFont_IsLoaded(ImFont* self) { return default; }
+    public static unsafe void ImFont_RenderChar(ImFont* self, ImDrawList* draw_list, float size, UnityEngine.Vector2 pos, uint col, ushort c) { }
+    public static unsafe void ImFont_RenderText(ImFont* self, ImDrawList* draw_list, float size, UnityEngine.Vector2 pos, uint col, UnityEngine.Vector4 clip_rect, byte* text_begin, byte* text_end, float wrap_width, byte cpu_fine_clip) { }
+    public static unsafe void ImFont_SetGlyphVisible(ImFont* self, ushort c, byte visible) { }
+    public static unsafe void ImFont_destroy(ImFont* self) { }
+    public static unsafe int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self, ImFont* font, ushort id, int width, int height, float advance_x, UnityEngine.Vector2 offset) { return default; }
+    public static unsafe int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self, int width, int height) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFont(ImFontAtlas* self, ImFontConfig* font_cfg) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self, ImFontConfig* font_cfg) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self, byte* filename, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self, byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self, System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges) { return default; }
+    public static unsafe ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self, System.IntPtr font_data, int font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges) { return default; }
+    public static unsafe byte ImFontAtlas_Build(ImFontAtlas* self) { return default; }
+    public static unsafe void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self, ImFontAtlasCustomRect* rect, UnityEngine.Vector2* out_uv_min, UnityEngine.Vector2* out_uv_max) { }
+    public static unsafe void ImFontAtlas_Clear(ImFontAtlas* self) { }
+    public static unsafe void ImFontAtlas_ClearFonts(ImFontAtlas* self) { }
+    public static unsafe void ImFontAtlas_ClearInputData(ImFontAtlas* self) { }
+    public static unsafe void ImFontAtlas_ClearTexData(ImFontAtlas* self) { }
+    public static unsafe ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self, int index) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self) { return default; }
+    public static unsafe ushort* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self) { return default; }
+    public static unsafe byte ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self, ImGuiMouseCursor cursor, UnityEngine.Vector2* out_offset, UnityEngine.Vector2* out_size, UnityEngine.Vector2* out_uv_border, UnityEngine.Vector2* out_uv_fill) { return default; }
+    public static unsafe void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self, System.Byte** out_pixels, System.Int32* out_width, System.Int32* out_height, System.Int32* out_bytes_per_pixel) { }
+    public static unsafe void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self, System.Byte** out_pixels, System.Int32* out_width, System.Int32* out_height, System.Int32* out_bytes_per_pixel) { }
+    public static unsafe ImFontAtlas* ImFontAtlas_ImFontAtlas() { return default; }
+    public static unsafe byte ImFontAtlas_IsBuilt(ImFontAtlas* self) { return default; }
+    public static unsafe void ImFontAtlas_SetTexID(ImFontAtlas* self, System.IntPtr id) { }
+    public static unsafe void ImFontAtlas_destroy(ImFontAtlas* self) { }
+    public static unsafe ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect() { return default; }
+    public static unsafe byte ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self) { return default; }
+    public static unsafe void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self) { }
+    public static unsafe ImFontConfig* ImFontConfig_ImFontConfig() { return default; }
+    public static unsafe void ImFontConfig_destroy(ImFontConfig* self) { }
+    public static unsafe void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self, ushort c) { }
+    public static unsafe void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self, ushort* ranges) { }
+    public static unsafe void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self, byte* text, byte* text_end) { }
+    public static unsafe void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self, ImVector out_ranges) { }
+    public static unsafe void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self) { }
+    public static unsafe byte ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self, uint n) { return default; }
+    public static unsafe ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() { return default; }
+    public static unsafe void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self, uint n) { }
+    public static unsafe void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self) { }
+    public static unsafe ImGuiComboPreviewData* ImGuiComboPreviewData_ImGuiComboPreviewData() { return default; }
+    public static unsafe void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData* self) { }
+    public static unsafe void ImGuiIO_AddFocusEvent(ImGuiIO* self, byte focused) { }
+    public static unsafe void ImGuiIO_AddInputCharacter(ImGuiIO* self, uint c) { }
+    public static unsafe void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self, ushort c) { }
+    public static unsafe void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self, byte* str) { }
+    public static unsafe void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self, ImGuiKey key, byte down, float v) { }
+    public static unsafe void ImGuiIO_AddKeyEvent(ImGuiIO* self, ImGuiKey key, byte down) { }
+    public static unsafe void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self, int button, byte down) { }
+    public static unsafe void ImGuiIO_AddMousePosEvent(ImGuiIO* self, float x, float y) { }
+    public static unsafe void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self, float wh_x, float wh_y) { }
+    public static unsafe void ImGuiIO_ClearInputCharacters(ImGuiIO* self) { }
+    public static unsafe void ImGuiIO_ClearInputKeys(ImGuiIO* self) { }
+    public static unsafe ImGuiIO* ImGuiIO_ImGuiIO() { return default; }
+    public static unsafe void ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self, byte accepting_events) { }
+    public static unsafe void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index) { }
+    public static unsafe void ImGuiIO_destroy(ImGuiIO* self) { }
+    public static unsafe void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self) { }
+    public static unsafe void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self, int pos, int bytes_count) { }
+    public static unsafe byte ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self) { return default; }
+    public static unsafe ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() { return default; }
+    public static unsafe void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self, int pos, byte* text, byte* text_end) { }
+    public static unsafe void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self) { }
+    public static unsafe void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self) { }
+    public static unsafe ImGuiLastItemData* ImGuiLastItemData_ImGuiLastItemData() { return default; }
+    public static unsafe void ImGuiLastItemData_destroy(ImGuiLastItemData* self) { }
+    public static unsafe void ImGuiListClipper_Begin(ImGuiListClipper* self, int items_count, float items_height) { }
+    public static unsafe void ImGuiListClipper_End(ImGuiListClipper* self) { }
+    public static unsafe void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self, int item_min, int item_max) { }
+    public static unsafe ImGuiListClipper* ImGuiListClipper_ImGuiListClipper() { return default; }
+    public static unsafe byte ImGuiListClipper_Step(ImGuiListClipper* self) { return default; }
+    public static unsafe void ImGuiListClipper_destroy(ImGuiListClipper* self) { }
+    public static unsafe ImGuiListClipperData* ImGuiListClipperData_ImGuiListClipperData() { return default; }
+    public static unsafe void ImGuiListClipperData_Reset(ImGuiListClipperData* self, ImGuiListClipper* clipper) { }
+    public static unsafe void ImGuiListClipperData_destroy(ImGuiListClipperData* self) { }
+    public static ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max) { return default; }
+    public static ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max) { return default; }
+    public static unsafe void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns* self, byte update_offsets) { }
+    public static unsafe float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns* self, float w_icon, float w_label, float w_shortcut, float w_mark) { return default; }
+    public static unsafe ImGuiMenuColumns* ImGuiMenuColumns_ImGuiMenuColumns() { return default; }
+    public static unsafe void ImGuiMenuColumns_Update(ImGuiMenuColumns* self, float spacing, byte window_reappearing) { }
+    public static unsafe void ImGuiMenuColumns_destroy(ImGuiMenuColumns* self) { }
+    public static unsafe ImGuiMetricsConfig* ImGuiMetricsConfig_ImGuiMetricsConfig() { return default; }
+    public static unsafe void ImGuiMetricsConfig_destroy(ImGuiMetricsConfig* self) { }
+    public static unsafe void ImGuiNextItemData_ClearFlags(ImGuiNextItemData* self) { }
+    public static unsafe ImGuiNextItemData* ImGuiNextItemData_ImGuiNextItemData() { return default; }
+    public static unsafe void ImGuiNextItemData_destroy(ImGuiNextItemData* self) { }
+    public static unsafe void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData* self) { }
+    public static unsafe ImGuiNextWindowData* ImGuiNextWindowData_ImGuiNextWindowData() { return default; }
+    public static unsafe void ImGuiNextWindowData_destroy(ImGuiNextWindowData* self) { }
+    public static unsafe ImGuiOldColumnData* ImGuiOldColumnData_ImGuiOldColumnData() { return default; }
+    public static unsafe void ImGuiOldColumnData_destroy(ImGuiOldColumnData* self) { }
+    public static unsafe ImGuiOldColumns* ImGuiOldColumns_ImGuiOldColumns() { return default; }
+    public static unsafe void ImGuiOldColumns_destroy(ImGuiOldColumns* self) { }
+    public static unsafe ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() { return default; }
+    public static unsafe void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self) { }
+    public static unsafe void ImGuiPayload_Clear(ImGuiPayload* self) { }
+    public static unsafe ImGuiPayload* ImGuiPayload_ImGuiPayload() { return default; }
+    public static unsafe byte ImGuiPayload_IsDataType(ImGuiPayload* self, byte* type) { return default; }
+    public static unsafe byte ImGuiPayload_IsDelivery(ImGuiPayload* self) { return default; }
+    public static unsafe byte ImGuiPayload_IsPreview(ImGuiPayload* self) { return default; }
+    public static unsafe void ImGuiPayload_destroy(ImGuiPayload* self) { }
+    public static unsafe ImGuiPlatformImeData* ImGuiPlatformImeData_ImGuiPlatformImeData() { return default; }
+    public static unsafe void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData* self) { }
+    public static unsafe ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(System.IntPtr ptr) { return default; }
+    public static unsafe ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index) { return default; }
+    public static unsafe void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex* self) { }
+    public static unsafe ImGuiSettingsHandler* ImGuiSettingsHandler_ImGuiSettingsHandler() { return default; }
+    public static unsafe void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler* self) { }
+    public static unsafe ImGuiStackLevelInfo* ImGuiStackLevelInfo_ImGuiStackLevelInfo() { return default; }
+    public static unsafe void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo* self) { }
+    public static unsafe void ImGuiStackSizes_CompareWithCurrentState(ImGuiStackSizes* self) { }
+    public static unsafe ImGuiStackSizes* ImGuiStackSizes_ImGuiStackSizes() { return default; }
+    public static unsafe void ImGuiStackSizes_SetToCurrentState(ImGuiStackSizes* self) { }
+    public static unsafe void ImGuiStackSizes_destroy(ImGuiStackSizes* self) { }
+    public static unsafe ImGuiStackTool* ImGuiStackTool_ImGuiStackTool() { return default; }
+    public static unsafe void ImGuiStackTool_destroy(ImGuiStackTool* self) { }
+    public static unsafe void ImGuiStorage_BuildSortByKey(ImGuiStorage* self) { }
+    public static unsafe void ImGuiStorage_Clear(ImGuiStorage* self) { }
+    public static unsafe byte ImGuiStorage_GetBool(ImGuiStorage* self, uint key, byte default_val) { return default; }
+    public static unsafe byte* ImGuiStorage_GetBoolRef(ImGuiStorage* self, uint key, byte default_val) { return default; }
+    public static unsafe float ImGuiStorage_GetFloat(ImGuiStorage* self, uint key, float default_val) { return default; }
+    public static unsafe System.Single* ImGuiStorage_GetFloatRef(ImGuiStorage* self, uint key, float default_val) { return default; }
+    public static unsafe int ImGuiStorage_GetInt(ImGuiStorage* self, uint key, int default_val) { return default; }
+    public static unsafe System.Int32* ImGuiStorage_GetIntRef(ImGuiStorage* self, uint key, int default_val) { return default; }
+    public static unsafe System.IntPtr ImGuiStorage_GetVoidPtr(ImGuiStorage* self, uint key) { return default; }
+    public static unsafe System.IntPtr ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self, uint key, System.IntPtr default_val) { return default; }
+    public static unsafe void ImGuiStorage_SetAllInt(ImGuiStorage* self, int val) { }
+    public static unsafe void ImGuiStorage_SetBool(ImGuiStorage* self, uint key, byte val) { }
+    public static unsafe void ImGuiStorage_SetFloat(ImGuiStorage* self, uint key, float val) { }
+    public static unsafe void ImGuiStorage_SetInt(ImGuiStorage* self, uint key, int val) { }
+    public static unsafe void ImGuiStorage_SetVoidPtr(ImGuiStorage* self, uint key, System.IntPtr val) { }
+    public static unsafe ImGuiStyle* ImGuiStyle_ImGuiStyle() { return default; }
+    public static unsafe void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self, float scale_factor) { }
+    public static unsafe void ImGuiStyle_destroy(ImGuiStyle* self) { }
+    public static unsafe byte* ImGuiTabBar_GetTabName(ImGuiTabBar* self, ImGuiTabItem* tab) { return default; }
+    public static unsafe int ImGuiTabBar_GetTabOrder(ImGuiTabBar* self, ImGuiTabItem* tab) { return default; }
+    public static unsafe ImGuiTabBar* ImGuiTabBar_ImGuiTabBar() { return default; }
+    public static unsafe void ImGuiTabBar_destroy(ImGuiTabBar* self) { }
+    public static unsafe ImGuiTabItem* ImGuiTabItem_ImGuiTabItem() { return default; }
+    public static unsafe void ImGuiTabItem_destroy(ImGuiTabItem* self) { }
+    public static unsafe ImGuiTable* ImGuiTable_ImGuiTable() { return default; }
+    public static unsafe void ImGuiTable_destroy(ImGuiTable* self) { }
+    public static unsafe ImGuiTableColumn* ImGuiTableColumn_ImGuiTableColumn() { return default; }
+    public static unsafe void ImGuiTableColumn_destroy(ImGuiTableColumn* self) { }
+    public static unsafe ImGuiTableColumnSettings* ImGuiTableColumnSettings_ImGuiTableColumnSettings() { return default; }
+    public static unsafe void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings* self) { }
+    public static unsafe ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() { return default; }
+    public static unsafe void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs* self) { }
+    public static unsafe ImGuiTableInstanceData* ImGuiTableInstanceData_ImGuiTableInstanceData() { return default; }
+    public static unsafe void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData* self) { }
+    public static unsafe ImGuiTableColumnSettings* ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings* self) { return default; }
+    public static unsafe ImGuiTableSettings* ImGuiTableSettings_ImGuiTableSettings() { return default; }
+    public static unsafe void ImGuiTableSettings_destroy(ImGuiTableSettings* self) { }
+    public static unsafe ImGuiTableSortSpecs* ImGuiTableSortSpecs_ImGuiTableSortSpecs() { return default; }
+    public static unsafe void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs* self) { }
+    public static unsafe ImGuiTableTempData* ImGuiTableTempData_ImGuiTableTempData() { return default; }
+    public static unsafe void ImGuiTableTempData_destroy(ImGuiTableTempData* self) { }
+    public static unsafe ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer() { return default; }
+    public static unsafe void ImGuiTextBuffer_append(ImGuiTextBuffer* self, byte* str, byte* str_end) { }
+    public static unsafe void ImGuiTextBuffer_appendf(ImGuiTextBuffer* self, byte* fmt) { }
+    public static unsafe void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self, byte* fmt) { }
+    public static unsafe byte* ImGuiTextBuffer_begin(ImGuiTextBuffer* self) { return default; }
+    public static unsafe byte* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self) { return default; }
+    public static unsafe void ImGuiTextBuffer_clear(ImGuiTextBuffer* self) { }
+    public static unsafe void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self) { }
+    public static unsafe byte ImGuiTextBuffer_empty(ImGuiTextBuffer* self) { return default; }
+    public static unsafe byte* ImGuiTextBuffer_end(ImGuiTextBuffer* self) { return default; }
+    public static unsafe void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self, int capacity) { }
+    public static unsafe int ImGuiTextBuffer_size(ImGuiTextBuffer* self) { return default; }
+    public static unsafe void ImGuiTextFilter_Build(ImGuiTextFilter* self) { }
+    public static unsafe void ImGuiTextFilter_Clear(ImGuiTextFilter* self) { }
+    public static unsafe byte ImGuiTextFilter_Draw(ImGuiTextFilter* self, byte* label, float width) { return default; }
+    public static unsafe ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(byte* default_filter) { return default; }
+    public static unsafe byte ImGuiTextFilter_IsActive(ImGuiTextFilter* self) { return default; }
+    public static unsafe byte ImGuiTextFilter_PassFilter(ImGuiTextFilter* self, byte* text, byte* text_end) { return default; }
+    public static unsafe void ImGuiTextFilter_destroy(ImGuiTextFilter* self) { }
+    public static unsafe ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Nil() { return default; }
+    public static unsafe ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Str(byte* _b, byte* _e) { return default; }
+    public static unsafe void ImGuiTextRange_destroy(ImGuiTextRange* self) { }
+    public static unsafe byte ImGuiTextRange_empty(ImGuiTextRange* self) { return default; }
+    public static unsafe void ImGuiTextRange_split(ImGuiTextRange* self, byte separator, ImVector @out) { }
+    public static unsafe void ImGuiViewport_GetCenter(UnityEngine.Vector2* pOut, ImGuiViewport* self) { }
+    public static unsafe void ImGuiViewport_GetWorkCenter(UnityEngine.Vector2* pOut, ImGuiViewport* self) { }
+    public static unsafe ImGuiViewport* ImGuiViewport_ImGuiViewport() { return default; }
+    public static unsafe void ImGuiViewport_destroy(ImGuiViewport* self) { }
+    public static unsafe void ImGuiViewportP_CalcWorkRectPos(UnityEngine.Vector2* pOut, ImGuiViewportP* self, UnityEngine.Vector2 off_min) { }
+    public static unsafe void ImGuiViewportP_CalcWorkRectSize(UnityEngine.Vector2* pOut, ImGuiViewportP* self, UnityEngine.Vector2 off_min, UnityEngine.Vector2 off_max) { }
+    public static unsafe void ImGuiViewportP_GetBuildWorkRect(UnityEngine.Rect* pOut, ImGuiViewportP* self) { }
+    public static unsafe void ImGuiViewportP_GetMainRect(UnityEngine.Rect* pOut, ImGuiViewportP* self) { }
+    public static unsafe void ImGuiViewportP_GetWorkRect(UnityEngine.Rect* pOut, ImGuiViewportP* self) { }
+    public static unsafe ImGuiViewportP* ImGuiViewportP_ImGuiViewportP() { return default; }
+    public static unsafe void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP* self) { }
+    public static unsafe void ImGuiViewportP_destroy(ImGuiViewportP* self) { }
+    public static unsafe float ImGuiWindow_CalcFontSize(ImGuiWindow* self) { return default; }
+    public static unsafe uint ImGuiWindow_GetID_Str(ImGuiWindow* self, byte* str, byte* str_end) { return default; }
+    public static unsafe uint ImGuiWindow_GetID_Ptr(ImGuiWindow* self, System.IntPtr ptr) { return default; }
+    public static unsafe uint ImGuiWindow_GetID_Int(ImGuiWindow* self, int n) { return default; }
+    public static unsafe uint ImGuiWindow_GetIDFromRectangle(ImGuiWindow* self, UnityEngine.Rect r_abs) { return default; }
+    public static unsafe ImGuiWindow* ImGuiWindow_ImGuiWindow(System.IntPtr context, byte* name) { return default; }
+    public static unsafe float ImGuiWindow_MenuBarHeight(ImGuiWindow* self) { return default; }
+    public static unsafe void ImGuiWindow_MenuBarRect(UnityEngine.Rect* pOut, ImGuiWindow* self) { }
+    public static unsafe void ImGuiWindow_Rect(UnityEngine.Rect* pOut, ImGuiWindow* self) { }
+    public static unsafe float ImGuiWindow_TitleBarHeight(ImGuiWindow* self) { return default; }
+    public static unsafe void ImGuiWindow_TitleBarRect(UnityEngine.Rect* pOut, ImGuiWindow* self) { }
+    public static unsafe void ImGuiWindow_destroy(ImGuiWindow* self) { }
+    public static unsafe ImVec1* ImVec1_ImVec1_Nil() { return default; }
+    public static unsafe ImVec1* ImVec1_ImVec1_Float(float _x) { return default; }
+    public static unsafe void ImVec1_destroy(ImVec1* self) { }
+    public static unsafe void ImBitArray_ClearAllBits(ImBitArray* self) { }
+    public static unsafe void ImBitArray_ClearBit(ImBitArray* self, int n) { }
+    public static unsafe ImBitArray* ImBitArray_ImBitArray() { return default; }
+    public static unsafe void ImBitArray_SetAllBits(ImBitArray* self) { }
+    public static unsafe void ImBitArray_SetBit(ImBitArray* self, int n) { }
+    public static unsafe void ImBitArray_SetBitRange(ImBitArray* self, int n, int n2) { }
+    public static unsafe byte ImBitArray_TestBit(ImBitArray* self, int n) { return default; }
+    public static unsafe void ImBitArray_destroy(ImBitArray* self) { }
+    public static unsafe int ImSpanAllocator_GetArenaSizeInBytes(ImSpanAllocator* self) { return default; }
+    public static unsafe System.IntPtr ImSpanAllocator_GetSpanPtrBegin(ImSpanAllocator* self, int n) { return default; }
+    public static unsafe System.IntPtr ImSpanAllocator_GetSpanPtrEnd(ImSpanAllocator* self, int n) { return default; }
+    public static unsafe ImSpanAllocator* ImSpanAllocator_ImSpanAllocator() { return default; }
+    public static unsafe void ImSpanAllocator_Reserve(ImSpanAllocator* self, int n, uint sz, int a) { }
+    public static unsafe void ImSpanAllocator_SetArenaBasePtr(ImSpanAllocator* self, System.IntPtr base_ptr) { }
+    public static unsafe void ImSpanAllocator_destroy(ImSpanAllocator* self) { }
+    public static unsafe ImGuiPayload* igAcceptDragDropPayload(byte* type, ImGuiDragDropFlags flags) { return default; }
+    public static void igActivateItem(uint id) { }
+    public static uint igAddContextHook(System.IntPtr context, System.IntPtr hook) { return default; }
+    public static unsafe void igAddSettingsHandler(ImGuiSettingsHandler* handler) { }
+    public static void igAlignTextToFramePadding() { }
+    public static unsafe byte igArrowButton(byte* str_id, ImGuiDir dir) { return default; }
+    public static unsafe byte igArrowButtonEx(byte* str_id, ImGuiDir dir, UnityEngine.Vector2 size_arg, ImGuiButtonFlags flags) { return default; }
+    public static unsafe byte igBegin(byte* name, byte* p_open, ImGuiWindowFlags flags) { return default; }
+    public static unsafe byte igBeginChild_Str(byte* str_id, UnityEngine.Vector2 size, byte border, ImGuiWindowFlags flags) { return default; }
+    public static byte igBeginChild_ID(uint id, UnityEngine.Vector2 size, byte border, ImGuiWindowFlags flags) { return default; }
+    public static unsafe byte igBeginChildEx(byte* name, uint id, UnityEngine.Vector2 size_arg, byte border, ImGuiWindowFlags flags) { return default; }
+    public static byte igBeginChildFrame(uint id, UnityEngine.Vector2 size, ImGuiWindowFlags flags) { return default; }
+    public static unsafe void igBeginColumns(byte* str_id, int count, ImGuiOldColumnFlags flags) { }
+    public static unsafe byte igBeginCombo(byte* label, byte* preview_value, ImGuiComboFlags flags) { return default; }
+    public static byte igBeginComboPopup(uint popup_id, UnityEngine.Rect bb, ImGuiComboFlags flags) { return default; }
+    public static byte igBeginComboPreview() { return default; }
+    public static void igBeginDisabled(byte disabled) { }
+    public static byte igBeginDragDropSource(ImGuiDragDropFlags flags) { return default; }
+    public static byte igBeginDragDropTarget() { return default; }
+    public static byte igBeginDragDropTargetCustom(UnityEngine.Rect bb, uint id) { return default; }
+    public static void igBeginGroup() { }
+    public static unsafe byte igBeginListBox(byte* label, UnityEngine.Vector2 size) { return default; }
+    public static byte igBeginMainMenuBar() { return default; }
+    public static unsafe byte igBeginMenu(byte* label, byte enabled) { return default; }
+    public static byte igBeginMenuBar() { return default; }
+    public static unsafe byte igBeginMenuEx(byte* label, byte* icon, byte enabled) { return default; }
+    public static unsafe byte igBeginPopup(byte* str_id, ImGuiWindowFlags flags) { return default; }
+    public static unsafe byte igBeginPopupContextItem(byte* str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static unsafe byte igBeginPopupContextVoid(byte* str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static unsafe byte igBeginPopupContextWindow(byte* str_id, ImGuiPopupFlags popup_flags) { return default; }
+    public static byte igBeginPopupEx(uint id, ImGuiWindowFlags extra_flags) { return default; }
+    public static unsafe byte igBeginPopupModal(byte* name, byte* p_open, ImGuiWindowFlags flags) { return default; }
+    public static unsafe byte igBeginTabBar(byte* str_id, ImGuiTabBarFlags flags) { return default; }
+    public static unsafe byte igBeginTabBarEx(ImGuiTabBar* tab_bar, UnityEngine.Rect bb, ImGuiTabBarFlags flags) { return default; }
+    public static unsafe byte igBeginTabItem(byte* label, byte* p_open, ImGuiTabItemFlags flags) { return default; }
+    public static unsafe byte igBeginTable(byte* str_id, int column, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static unsafe byte igBeginTableEx(byte* name, uint id, int columns_count, ImGuiTableFlags flags, UnityEngine.Vector2 outer_size, float inner_width) { return default; }
+    public static void igBeginTooltip() { }
+    public static void igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags) { }
+    public static unsafe byte igBeginViewportSideBar(byte* name, ImGuiViewport* viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags) { return default; }
+    public static unsafe void igBringWindowToDisplayBack(ImGuiWindow* window) { }
+    public static unsafe void igBringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* above_window) { }
+    public static unsafe void igBringWindowToDisplayFront(ImGuiWindow* window) { }
+    public static unsafe void igBringWindowToFocusFront(ImGuiWindow* window) { }
+    public static void igBullet() { }
+    public static unsafe void igBulletText(byte* fmt) { }
+    public static unsafe void igBulletTextV(byte* fmt) { }
+    public static unsafe byte igButton(byte* label, UnityEngine.Vector2 size) { return default; }
+    public static unsafe byte igButtonBehavior(UnityEngine.Rect bb, uint id, byte* out_hovered, byte* out_held, ImGuiButtonFlags flags) { return default; }
+    public static unsafe byte igButtonEx(byte* label, UnityEngine.Vector2 size_arg, ImGuiButtonFlags flags) { return default; }
+    public static unsafe void igCalcItemSize(UnityEngine.Vector2* pOut, UnityEngine.Vector2 size, float default_w, float default_h) { }
+    public static float igCalcItemWidth() { return default; }
+    public static unsafe void igCalcTextSize(UnityEngine.Vector2* pOut, byte* text, byte* text_end, byte hide_text_after_double_hash, float wrap_width) { }
+    public static int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate) { return default; }
+    public static unsafe void igCalcWindowNextAutoFitSize(UnityEngine.Vector2* pOut, ImGuiWindow* window) { }
+    public static float igCalcWrapWidthForPos(UnityEngine.Vector2 pos, float wrap_pos_x) { return default; }
+    public static void igCallContextHooks(System.IntPtr context, System.IntPtr type) { }
+    public static unsafe byte igCheckbox(byte* label, byte* v) { return default; }
+    public static unsafe byte igCheckboxFlags_IntPtr(byte* label, System.Int32* flags, int flags_value) { return default; }
+    public static unsafe byte igCheckboxFlags_UintPtr(byte* label, System.UInt32* flags, uint flags_value) { return default; }
+    public static unsafe byte igCheckboxFlags_S64Ptr(byte* label, System.Int64* flags, long flags_value) { return default; }
+    public static unsafe byte igCheckboxFlags_U64Ptr(byte* label, System.UInt64* flags, ulong flags_value) { return default; }
+    public static void igClearActiveID() { }
+    public static void igClearDragDrop() { }
+    public static void igClearIniSettings() { }
+    public static byte igCloseButton(uint id, UnityEngine.Vector2 pos) { return default; }
+    public static void igCloseCurrentPopup() { }
+    public static void igClosePopupToLevel(int remaining, byte restore_focus_to_window_under_popup) { }
+    public static void igClosePopupsExceptModals() { }
+    public static unsafe void igClosePopupsOverWindow(ImGuiWindow* ref_window, byte restore_focus_to_window_under_popup) { }
+    public static byte igCollapseButton(uint id, UnityEngine.Vector2 pos) { return default; }
+    public static unsafe byte igCollapsingHeader_TreeNodeFlags(byte* label, ImGuiTreeNodeFlags flags) { return default; }
+    public static unsafe byte igCollapsingHeader_BoolPtr(byte* label, byte* p_visible, ImGuiTreeNodeFlags flags) { return default; }
+    public static unsafe byte igColorButton(byte* desc_id, UnityEngine.Vector4 col, ImGuiColorEditFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static uint igColorConvertFloat4ToU32(UnityEngine.Vector4 @in) { return default; }
+    public static unsafe void igColorConvertHSVtoRGB(float h, float s, float v, System.Single* out_r, System.Single* out_g, System.Single* out_b) { }
+    public static unsafe void igColorConvertRGBtoHSV(float r, float g, float b, System.Single* out_h, System.Single* out_s, System.Single* out_v) { }
+    public static unsafe void igColorConvertU32ToFloat4(UnityEngine.Vector4* pOut, uint @in) { }
+    public static unsafe byte igColorEdit3(byte* label, UnityEngine.Vector3* col, ImGuiColorEditFlags flags) { return default; }
+    public static unsafe byte igColorEdit4(byte* label, UnityEngine.Vector4* col, ImGuiColorEditFlags flags) { return default; }
+    public static unsafe void igColorEditOptionsPopup(System.Single* col, ImGuiColorEditFlags flags) { }
+    public static unsafe byte igColorPicker3(byte* label, UnityEngine.Vector3* col, ImGuiColorEditFlags flags) { return default; }
+    public static unsafe byte igColorPicker4(byte* label, UnityEngine.Vector4* col, ImGuiColorEditFlags flags, System.Single* ref_col) { return default; }
+    public static unsafe void igColorPickerOptionsPopup(System.Single* ref_col, ImGuiColorEditFlags flags) { }
+    public static unsafe void igColorTooltip(byte* text, System.Single* col, ImGuiColorEditFlags flags) { }
+    public static unsafe void igColumns(int count, byte* id, byte border) { }
+    public static unsafe byte igCombo_Str_arr(byte* label, System.Int32* current_item, System.Byte** items, int items_count, int popup_max_height_in_items) { return default; }
+    public static unsafe byte igCombo_Str(byte* label, System.Int32* current_item, byte* items_separated_by_zeros, int popup_max_height_in_items) { return default; }
+    public static unsafe byte igCombo_FnBoolPtr(byte* label, System.Int32* current_item, System.IntPtr items_getter, System.IntPtr data, int items_count, int popup_max_height_in_items) { return default; }
+    public static unsafe System.IntPtr igCreateContext(ImFontAtlas* shared_font_atlas) { return default; }
+    public static unsafe System.IntPtr igCreateNewWindowSettings(byte* name) { return default; }
+    public static unsafe byte igDataTypeApplyFromText(byte* buf, ImGuiDataType data_type, System.IntPtr p_data, byte* format) { return default; }
+    public static void igDataTypeApplyOp(ImGuiDataType data_type, int op, System.IntPtr output, System.IntPtr arg_1, System.IntPtr arg_2) { }
+    public static byte igDataTypeClamp(ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max) { return default; }
+    public static int igDataTypeCompare(ImGuiDataType data_type, System.IntPtr arg_1, System.IntPtr arg_2) { return default; }
+    public static unsafe int igDataTypeFormatString(byte* buf, int buf_size, ImGuiDataType data_type, System.IntPtr p_data, byte* format) { return default; }
+    public static unsafe ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type) { return default; }
+    public static unsafe byte igDebugCheckVersionAndDataLayout(byte* version_str, uint sz_io, uint sz_style, uint sz_vec2, uint sz_vec4, uint sz_drawvert, uint sz_drawidx) { return default; }
+    public static void igDebugDrawItemRect(uint col) { }
+    public static void igDebugHookIdInfo(uint id, ImGuiDataType data_type, System.IntPtr data_id, System.IntPtr data_id_end) { }
+    public static unsafe void igDebugLog(byte* fmt) { }
+    public static unsafe void igDebugLogV(byte* fmt) { }
+    public static unsafe void igDebugNodeColumns(ImGuiOldColumns* columns) { }
+    public static unsafe void igDebugNodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, byte* label) { }
+    public static unsafe void igDebugNodeFont(ImFont* font) { }
+    public static unsafe void igDebugNodeFontGlyph(ImFont* font, ImFontGlyph* glyph) { }
+    public static void igDebugNodeInputTextState(System.IntPtr state) { }
+    public static unsafe void igDebugNodeStorage(ImGuiStorage* storage, byte* label) { }
+    public static unsafe void igDebugNodeTabBar(ImGuiTabBar* tab_bar, byte* label) { }
+    public static unsafe void igDebugNodeTable(ImGuiTable* table) { }
+    public static unsafe void igDebugNodeTableSettings(ImGuiTableSettings* settings) { }
+    public static unsafe void igDebugNodeViewport(ImGuiViewportP* viewport) { }
+    public static unsafe void igDebugNodeWindow(ImGuiWindow* window, byte* label) { }
+    public static void igDebugNodeWindowSettings(System.IntPtr settings) { }
+    public static unsafe void igDebugNodeWindowsList(ImVector windows, byte* label) { }
+    public static unsafe void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGuiWindow* parent_in_begin_stack) { }
+    public static unsafe void igDebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, UnityEngine.Rect bb) { }
+    public static void igDebugStartItemPicker() { }
+    public static unsafe void igDebugTextEncoding(byte* text) { }
+    public static void igDestroyContext(System.IntPtr ctx) { }
+    public static unsafe byte igDragBehavior(uint id, ImGuiDataType data_type, System.IntPtr p_v, float v_speed, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragFloat(byte* label, System.Single* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragFloat2(byte* label, UnityEngine.Vector2* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragFloat3(byte* label, UnityEngine.Vector3* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragFloat4(byte* label, UnityEngine.Vector4* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragFloatRange2(byte* label, System.Single* v_current_min, System.Single* v_current_max, float v_speed, float v_min, float v_max, byte* format, byte* format_max, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragInt(byte* label, System.Int32* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragInt2(byte* label, System.Int32* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragInt3(byte* label, System.Int32* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragInt4(byte* label, System.Int32* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragIntRange2(byte* label, System.Int32* v_current_min, System.Int32* v_current_max, float v_speed, int v_min, int v_max, byte* format, byte* format_max, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragScalar(byte* label, ImGuiDataType data_type, System.IntPtr p_data, float v_speed, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igDragScalarN(byte* label, ImGuiDataType data_type, System.IntPtr p_data, int components, float v_speed, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static void igDummy(UnityEngine.Vector2 size) { }
+    public static void igEnd() { }
+    public static void igEndChild() { }
+    public static void igEndChildFrame() { }
+    public static void igEndColumns() { }
+    public static void igEndCombo() { }
+    public static void igEndComboPreview() { }
+    public static void igEndDisabled() { }
+    public static void igEndDragDropSource() { }
+    public static void igEndDragDropTarget() { }
+    public static void igEndFrame() { }
+    public static void igEndGroup() { }
+    public static void igEndListBox() { }
+    public static void igEndMainMenuBar() { }
+    public static void igEndMenu() { }
+    public static void igEndMenuBar() { }
+    public static void igEndPopup() { }
+    public static void igEndTabBar() { }
+    public static void igEndTabItem() { }
+    public static void igEndTable() { }
+    public static void igEndTooltip() { }
+    public static unsafe void igFindBestWindowPosForPopup(UnityEngine.Vector2* pOut, ImGuiWindow* window) { }
+    public static unsafe void igFindBestWindowPosForPopupEx(UnityEngine.Vector2* pOut, UnityEngine.Vector2 ref_pos, UnityEngine.Vector2 size, ImGuiDir* last_dir, UnityEngine.Rect r_outer, UnityEngine.Rect r_avoid, ImGuiPopupPositionPolicy policy) { }
+    public static unsafe ImGuiWindow* igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* window) { return default; }
+    public static unsafe ImGuiOldColumns* igFindOrCreateColumns(ImGuiWindow* window, uint id) { return default; }
+    public static unsafe System.IntPtr igFindOrCreateWindowSettings(byte* name) { return default; }
+    public static unsafe byte* igFindRenderedTextEnd(byte* text, byte* text_end) { return default; }
+    public static unsafe ImGuiSettingsHandler* igFindSettingsHandler(byte* type_name) { return default; }
+    public static unsafe ImGuiWindow* igFindWindowByID(uint id) { return default; }
+    public static unsafe ImGuiWindow* igFindWindowByName(byte* name) { return default; }
+    public static unsafe int igFindWindowDisplayIndex(ImGuiWindow* window) { return default; }
+    public static System.IntPtr igFindWindowSettings(uint id) { return default; }
+    public static unsafe void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_window) { }
+    public static unsafe void igFocusWindow(ImGuiWindow* window) { }
+    public static unsafe void igGcAwakeTransientWindowBuffers(ImGuiWindow* window) { }
+    public static void igGcCompactTransientMiscBuffers() { }
+    public static unsafe void igGcCompactTransientWindowBuffers(ImGuiWindow* window) { }
+    public static uint igGetActiveID() { return default; }
+    public static unsafe ImDrawList* igGetBackgroundDrawList_Nil() { return default; }
+    public static unsafe ImDrawList* igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport) { return default; }
+    public static unsafe byte* igGetClipboardText() { return default; }
+    public static uint igGetColorU32_Col(ImGuiCol idx, float alpha_mul) { return default; }
+    public static uint igGetColorU32_Vec4(UnityEngine.Vector4 col) { return default; }
+    public static uint igGetColorU32_U32(uint col) { return default; }
+    public static int igGetColumnIndex() { return default; }
+    public static unsafe float igGetColumnNormFromOffset(ImGuiOldColumns* columns, float offset) { return default; }
+    public static float igGetColumnOffset(int column_index) { return default; }
+    public static unsafe float igGetColumnOffsetFromNorm(ImGuiOldColumns* columns, float offset_norm) { return default; }
+    public static float igGetColumnWidth(int column_index) { return default; }
+    public static int igGetColumnsCount() { return default; }
+    public static unsafe uint igGetColumnsID(byte* str_id, int count) { return default; }
+    public static unsafe void igGetContentRegionAvail(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetContentRegionMax(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetContentRegionMaxAbs(UnityEngine.Vector2* pOut) { }
+    public static System.IntPtr igGetCurrentContext() { return default; }
+    public static unsafe ImGuiTable* igGetCurrentTable() { return default; }
+    public static unsafe ImGuiWindow* igGetCurrentWindow() { return default; }
+    public static unsafe ImGuiWindow* igGetCurrentWindowRead() { return default; }
+    public static unsafe void igGetCursorPos(UnityEngine.Vector2* pOut) { }
+    public static float igGetCursorPosX() { return default; }
+    public static float igGetCursorPosY() { return default; }
+    public static unsafe void igGetCursorScreenPos(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetCursorStartPos(UnityEngine.Vector2* pOut) { }
+    public static unsafe ImFont* igGetDefaultFont() { return default; }
+    public static unsafe ImGuiPayload* igGetDragDropPayload() { return default; }
+    public static unsafe ImDrawData* igGetDrawData() { return default; }
+    public static unsafe ImDrawListSharedData* igGetDrawListSharedData() { return default; }
+    public static uint igGetFocusID() { return default; }
+    public static uint igGetFocusScope() { return default; }
+    public static uint igGetFocusedFocusScope() { return default; }
+    public static unsafe ImFont* igGetFont() { return default; }
+    public static float igGetFontSize() { return default; }
+    public static unsafe void igGetFontTexUvWhitePixel(UnityEngine.Vector2* pOut) { }
+    public static unsafe ImDrawList* igGetForegroundDrawList_Nil() { return default; }
+    public static unsafe ImDrawList* igGetForegroundDrawList_WindowPtr(ImGuiWindow* window) { return default; }
+    public static unsafe ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport) { return default; }
+    public static int igGetFrameCount() { return default; }
+    public static float igGetFrameHeight() { return default; }
+    public static float igGetFrameHeightWithSpacing() { return default; }
+    public static uint igGetHoveredID() { return default; }
+    public static unsafe uint igGetID_Str(byte* str_id) { return default; }
+    public static unsafe uint igGetID_StrStr(byte* str_id_begin, byte* str_id_end) { return default; }
+    public static uint igGetID_Ptr(System.IntPtr ptr_id) { return default; }
+    public static unsafe uint igGetIDWithSeed(byte* str_id_begin, byte* str_id_end, uint seed) { return default; }
+    public static unsafe ImGuiIO* igGetIO() { return default; }
+    public static System.IntPtr igGetInputTextState(uint id) { return default; }
+    public static ImGuiItemFlags igGetItemFlags() { return default; }
+    public static uint igGetItemID() { return default; }
+    public static unsafe void igGetItemRectMax(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetItemRectMin(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetItemRectSize(UnityEngine.Vector2* pOut) { }
+    public static ImGuiItemStatusFlags igGetItemStatusFlags() { return default; }
+    public static unsafe ImGuiKeyData* igGetKeyData(ImGuiKey key) { return default; }
+    public static int igGetKeyIndex(ImGuiKey key) { return default; }
+    public static unsafe byte* igGetKeyName(ImGuiKey key) { return default; }
+    public static int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate) { return default; }
+    public static unsafe ImGuiViewport* igGetMainViewport() { return default; }
+    public static ImGuiModFlags igGetMergedModFlags() { return default; }
+    public static int igGetMouseClickedCount(ImGuiMouseButton button) { return default; }
+    public static ImGuiMouseCursor igGetMouseCursor() { return default; }
+    public static unsafe void igGetMouseDragDelta(UnityEngine.Vector2* pOut, ImGuiMouseButton button, float lock_threshold) { }
+    public static unsafe void igGetMousePos(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetMousePosOnOpeningCurrentPopup(UnityEngine.Vector2* pOut) { }
+    public static float igGetNavInputAmount(ImGuiNavInput n, ImGuiNavReadMode mode) { return default; }
+    public static unsafe void igGetNavInputAmount2d(UnityEngine.Vector2* pOut, ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor, float fast_factor) { }
+    public static unsafe byte* igGetNavInputName(ImGuiNavInput n) { return default; }
+    public static unsafe void igGetPopupAllowedExtentRect(UnityEngine.Rect* pOut, ImGuiWindow* window) { }
+    public static float igGetScrollMaxX() { return default; }
+    public static float igGetScrollMaxY() { return default; }
+    public static float igGetScrollX() { return default; }
+    public static float igGetScrollY() { return default; }
+    public static unsafe ImGuiStorage* igGetStateStorage() { return default; }
+    public static unsafe ImGuiStyle* igGetStyle() { return default; }
+    public static unsafe byte* igGetStyleColorName(ImGuiCol idx) { return default; }
+    public static unsafe UnityEngine.Vector4* igGetStyleColorVec4(ImGuiCol idx) { return default; }
+    public static float igGetTextLineHeight() { return default; }
+    public static float igGetTextLineHeightWithSpacing() { return default; }
+    public static double igGetTime() { return default; }
+    public static unsafe ImGuiWindow* igGetTopMostAndVisiblePopupModal() { return default; }
+    public static unsafe ImGuiWindow* igGetTopMostPopupModal() { return default; }
+    public static float igGetTreeNodeToLabelSpacing() { return default; }
+    public static unsafe byte* igGetVersion() { return default; }
+    public static unsafe void igGetWindowContentRegionMax(UnityEngine.Vector2* pOut) { }
+    public static unsafe void igGetWindowContentRegionMin(UnityEngine.Vector2* pOut) { }
+    public static unsafe ImDrawList* igGetWindowDrawList() { return default; }
+    public static float igGetWindowHeight() { return default; }
+    public static unsafe void igGetWindowPos(UnityEngine.Vector2* pOut) { }
+    public static unsafe uint igGetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir) { return default; }
+    public static unsafe uint igGetWindowResizeCornerID(ImGuiWindow* window, int n) { return default; }
+    public static unsafe uint igGetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis) { return default; }
+    public static unsafe void igGetWindowScrollbarRect(UnityEngine.Rect* pOut, ImGuiWindow* window, ImGuiAxis axis) { }
+    public static unsafe void igGetWindowSize(UnityEngine.Vector2* pOut) { }
+    public static float igGetWindowWidth() { return default; }
+    public static int igImAbs_Int(int x) { return default; }
+    public static float igImAbs_Float(float x) { return default; }
+    public static double igImAbs_double(double x) { return default; }
+    public static uint igImAlphaBlendColors(uint col_a, uint col_b) { return default; }
+    public static unsafe void igImBezierCubicCalc(UnityEngine.Vector2* pOut, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, float t) { }
+    public static unsafe void igImBezierCubicClosestPoint(UnityEngine.Vector2* pOut, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 p, int num_segments) { }
+    public static unsafe void igImBezierCubicClosestPointCasteljau(UnityEngine.Vector2* pOut, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, UnityEngine.Vector2 p4, UnityEngine.Vector2 p, float tess_tol) { }
+    public static unsafe void igImBezierQuadraticCalc(UnityEngine.Vector2* pOut, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3, float t) { }
+    public static unsafe void igImBitArrayClearBit(System.UInt32* arr, int n) { }
+    public static unsafe void igImBitArraySetBit(System.UInt32* arr, int n) { }
+    public static unsafe void igImBitArraySetBitRange(System.UInt32* arr, int n, int n2) { }
+    public static unsafe byte igImBitArrayTestBit(System.UInt32* arr, int n) { return default; }
+    public static byte igImCharIsBlankA(byte c) { return default; }
+    public static byte igImCharIsBlankW(uint c) { return default; }
+    public static unsafe void igImClamp(UnityEngine.Vector2* pOut, UnityEngine.Vector2 v, UnityEngine.Vector2 mn, UnityEngine.Vector2 mx) { }
+    public static float igImDot(UnityEngine.Vector2 a, UnityEngine.Vector2 b) { return default; }
+    public static unsafe System.IntPtr igImFileLoadToMemory(byte* filename, byte* mode, System.UInt32* out_file_size, int padding_bytes) { return default; }
+    public static float igImFloor_Float(float f) { return default; }
+    public static unsafe void igImFloor_Vec2(UnityEngine.Vector2* pOut, UnityEngine.Vector2 v) { }
+    public static float igImFloorSigned_Float(float f) { return default; }
+    public static unsafe void igImFloorSigned_Vec2(UnityEngine.Vector2* pOut, UnityEngine.Vector2 v) { }
+    public static unsafe void igImFontAtlasBuildFinish(ImFontAtlas* atlas) { }
+    public static unsafe void igImFontAtlasBuildInit(ImFontAtlas* atlas) { }
+    public static unsafe void igImFontAtlasBuildMultiplyCalcLookupTable(byte* out_table, float in_multiply_factor) { }
+    public static unsafe void igImFontAtlasBuildMultiplyRectAlpha8(byte* table, byte* pixels, int x, int y, int w, int h, int stride) { }
+    public static unsafe void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, System.IntPtr stbrp_context_opaque) { }
+    public static unsafe void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, byte* in_str, byte in_marker_char, uint in_marker_pixel_value) { }
+    public static unsafe void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, byte* in_str, byte in_marker_char, byte in_marker_pixel_value) { }
+    public static unsafe void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent) { }
+    public static unsafe ImFontBuilderIO* igImFontAtlasGetBuilderForStbTruetype() { return default; }
+    public static unsafe int igImFormatString(byte* buf, uint buf_size, byte* fmt) { return default; }
+    public static unsafe void igImFormatStringToTempBuffer(System.Byte** out_buf, System.Byte** out_buf_end, byte* fmt) { }
+    public static unsafe void igImFormatStringToTempBufferV(System.Byte** out_buf, System.Byte** out_buf_end, byte* fmt) { }
+    public static unsafe int igImFormatStringV(byte* buf, uint buf_size, byte* fmt) { return default; }
+    public static ImGuiDir igImGetDirQuadrantFromDelta(float dx, float dy) { return default; }
+    public static uint igImHashData(System.IntPtr data, uint data_size, uint seed) { return default; }
+    public static unsafe uint igImHashStr(byte* data, uint data_size, uint seed) { return default; }
+    public static float igImInvLength(UnityEngine.Vector2 lhs, float fail_value) { return default; }
+    public static byte igImIsFloatAboveGuaranteedIntegerPrecision(float f) { return default; }
+    public static byte igImIsPowerOfTwo_Int(int v) { return default; }
+    public static byte igImIsPowerOfTwo_U64(ulong v) { return default; }
+    public static float igImLengthSqr_Vec2(UnityEngine.Vector2 lhs) { return default; }
+    public static float igImLengthSqr_Vec4(UnityEngine.Vector4 lhs) { return default; }
+    public static unsafe void igImLerp_Vec2Float(UnityEngine.Vector2* pOut, UnityEngine.Vector2 a, UnityEngine.Vector2 b, float t) { }
+    public static unsafe void igImLerp_Vec2Vec2(UnityEngine.Vector2* pOut, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 t) { }
+    public static unsafe void igImLerp_Vec4(UnityEngine.Vector4* pOut, UnityEngine.Vector4 a, UnityEngine.Vector4 b, float t) { }
+    public static unsafe void igImLineClosestPoint(UnityEngine.Vector2* pOut, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 p) { }
+    public static float igImLinearSweep(float current, float target, float speed) { return default; }
+    public static float igImLog_Float(float x) { return default; }
+    public static double igImLog_double(double x) { return default; }
+    public static unsafe void igImMax(UnityEngine.Vector2* pOut, UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { }
+    public static unsafe void igImMin(UnityEngine.Vector2* pOut, UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { }
+    public static int igImModPositive(int a, int b) { return default; }
+    public static unsafe void igImMul(UnityEngine.Vector2* pOut, UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs) { }
+    public static unsafe byte* igImParseFormatFindEnd(byte* format) { return default; }
+    public static unsafe byte* igImParseFormatFindStart(byte* format) { return default; }
+    public static unsafe int igImParseFormatPrecision(byte* format, int default_value) { return default; }
+    public static unsafe void igImParseFormatSanitizeForPrinting(byte* fmt_in, byte* fmt_out, uint fmt_out_size) { }
+    public static unsafe byte* igImParseFormatSanitizeForScanning(byte* fmt_in, byte* fmt_out, uint fmt_out_size) { return default; }
+    public static unsafe byte* igImParseFormatTrimDecorations(byte* format, byte* buf, uint buf_size) { return default; }
+    public static float igImPow_Float(float x, float y) { return default; }
+    public static double igImPow_double(double x, double y) { return default; }
+    public static void igImQsort(System.IntPtr @base, uint count, uint size_of_element, System.IntPtr compare_func) { }
+    public static unsafe void igImRotate(UnityEngine.Vector2* pOut, UnityEngine.Vector2 v, float cos_a, float sin_a) { }
+    public static float igImRsqrt_Float(float x) { return default; }
+    public static double igImRsqrt_double(double x) { return default; }
+    public static float igImSaturate(float f) { return default; }
+    public static float igImSign_Float(float x) { return default; }
+    public static double igImSign_double(double x) { return default; }
+    public static unsafe byte* igImStrSkipBlank(byte* str) { return default; }
+    public static unsafe void igImStrTrimBlanks(byte* str) { }
+    public static unsafe ushort* igImStrbolW(ushort* buf_mid_line, ushort* buf_begin) { return default; }
+    public static unsafe byte* igImStrchrRange(byte* str_begin, byte* str_end, byte c) { return default; }
+    public static unsafe byte* igImStrdup(byte* str) { return default; }
+    public static unsafe byte* igImStrdupcpy(byte* dst, System.UInt32* p_dst_size, byte* str) { return default; }
+    public static unsafe byte* igImStreolRange(byte* str, byte* str_end) { return default; }
+    public static unsafe int igImStricmp(byte* str1, byte* str2) { return default; }
+    public static unsafe byte* igImStristr(byte* haystack, byte* haystack_end, byte* needle, byte* needle_end) { return default; }
+    public static unsafe int igImStrlenW(ushort* str) { return default; }
+    public static unsafe void igImStrncpy(byte* dst, byte* src, uint count) { }
+    public static unsafe int igImStrnicmp(byte* str1, byte* str2, uint count) { return default; }
+    public static unsafe int igImTextCharFromUtf8(System.UInt32* out_char, byte* in_text, byte* in_text_end) { return default; }
+    public static unsafe byte* igImTextCharToUtf8(byte* out_buf, uint c) { return default; }
+    public static unsafe int igImTextCountCharsFromUtf8(byte* in_text, byte* in_text_end) { return default; }
+    public static unsafe int igImTextCountUtf8BytesFromChar(byte* in_text, byte* in_text_end) { return default; }
+    public static unsafe int igImTextCountUtf8BytesFromStr(ushort* in_text, ushort* in_text_end) { return default; }
+    public static unsafe int igImTextStrFromUtf8(ushort* out_buf, int out_buf_size, byte* in_text, byte* in_text_end, System.Byte** in_remaining) { return default; }
+    public static unsafe int igImTextStrToUtf8(byte* out_buf, int out_buf_size, ushort* in_text, ushort* in_text_end) { return default; }
+    public static float igImTriangleArea(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c) { return default; }
+    public static unsafe void igImTriangleBarycentricCoords(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p, System.Single* out_u, System.Single* out_v, System.Single* out_w) { }
+    public static unsafe void igImTriangleClosestPoint(UnityEngine.Vector2* pOut, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p) { }
+    public static byte igImTriangleContainsPoint(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p) { return default; }
+    public static int igImUpperPowerOfTwo(int v) { return default; }
+    public static void igImage(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector4 tint_col, UnityEngine.Vector4 border_col) { }
+    public static byte igImageButton(System.IntPtr user_texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, int frame_padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static byte igImageButtonEx(uint id, System.IntPtr texture_id, UnityEngine.Vector2 size, UnityEngine.Vector2 uv0, UnityEngine.Vector2 uv1, UnityEngine.Vector2 padding, UnityEngine.Vector4 bg_col, UnityEngine.Vector4 tint_col) { return default; }
+    public static void igIndent(float indent_w) { }
+    public static void igInitialize() { }
+    public static unsafe byte igInputDouble(byte* label, System.Double* v, double step, double step_fast, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputFloat(byte* label, System.Single* v, float step, float step_fast, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputFloat2(byte* label, UnityEngine.Vector2* v, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputFloat3(byte* label, UnityEngine.Vector3* v, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputFloat4(byte* label, UnityEngine.Vector4* v, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputInt(byte* label, System.Int32* v, int step, int step_fast, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputInt2(byte* label, System.Int32* v, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputInt3(byte* label, System.Int32* v, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputInt4(byte* label, System.Int32* v, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputScalar(byte* label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_step, System.IntPtr p_step_fast, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputScalarN(byte* label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_step, System.IntPtr p_step_fast, byte* format, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe byte igInputText(byte* label, byte* buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static unsafe byte igInputTextEx(byte* label, byte* hint, byte* buf, int buf_size, UnityEngine.Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static unsafe byte igInputTextMultiline(byte* label, byte* buf, uint buf_size, UnityEngine.Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static unsafe byte igInputTextWithHint(byte* label, byte* hint, byte* buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, System.IntPtr user_data) { return default; }
+    public static unsafe byte igInvisibleButton(byte* str_id, UnityEngine.Vector2 size, ImGuiButtonFlags flags) { return default; }
+    public static byte igIsActiveIdUsingKey(ImGuiKey key) { return default; }
+    public static byte igIsActiveIdUsingNavDir(ImGuiDir dir) { return default; }
+    public static byte igIsActiveIdUsingNavInput(ImGuiNavInput input) { return default; }
+    public static byte igIsAnyItemActive() { return default; }
+    public static byte igIsAnyItemFocused() { return default; }
+    public static byte igIsAnyItemHovered() { return default; }
+    public static byte igIsAnyMouseDown() { return default; }
+    public static byte igIsClippedEx(UnityEngine.Rect bb, uint id) { return default; }
+    public static byte igIsDragDropActive() { return default; }
+    public static byte igIsDragDropPayloadBeingAccepted() { return default; }
+    public static byte igIsGamepadKey(ImGuiKey key) { return default; }
+    public static byte igIsItemActivated() { return default; }
+    public static byte igIsItemActive() { return default; }
+    public static byte igIsItemClicked(ImGuiMouseButton mouse_button) { return default; }
+    public static byte igIsItemDeactivated() { return default; }
+    public static byte igIsItemDeactivatedAfterEdit() { return default; }
+    public static byte igIsItemEdited() { return default; }
+    public static byte igIsItemFocused() { return default; }
+    public static byte igIsItemHovered(ImGuiHoveredFlags flags) { return default; }
+    public static byte igIsItemToggledOpen() { return default; }
+    public static byte igIsItemToggledSelection() { return default; }
+    public static byte igIsItemVisible() { return default; }
+    public static byte igIsKeyDown(ImGuiKey key) { return default; }
+    public static byte igIsKeyPressed(ImGuiKey key, byte repeat) { return default; }
+    public static byte igIsKeyPressedMap(ImGuiKey key, byte repeat) { return default; }
+    public static byte igIsKeyReleased(ImGuiKey key) { return default; }
+    public static byte igIsLegacyKey(ImGuiKey key) { return default; }
+    public static byte igIsMouseClicked(ImGuiMouseButton button, byte repeat) { return default; }
+    public static byte igIsMouseDoubleClicked(ImGuiMouseButton button) { return default; }
+    public static byte igIsMouseDown(ImGuiMouseButton button) { return default; }
+    public static byte igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold) { return default; }
+    public static byte igIsMouseDragging(ImGuiMouseButton button, float lock_threshold) { return default; }
+    public static byte igIsMouseHoveringRect(UnityEngine.Vector2 r_min, UnityEngine.Vector2 r_max, byte clip) { return default; }
+    public static unsafe byte igIsMousePosValid(UnityEngine.Vector2* mouse_pos) { return default; }
+    public static byte igIsMouseReleased(ImGuiMouseButton button) { return default; }
+    public static byte igIsNamedKey(ImGuiKey key) { return default; }
+    public static byte igIsNavInputDown(ImGuiNavInput n) { return default; }
+    public static byte igIsNavInputTest(ImGuiNavInput n, ImGuiNavReadMode rm) { return default; }
+    public static unsafe byte igIsPopupOpen_Str(byte* str_id, ImGuiPopupFlags flags) { return default; }
+    public static byte igIsPopupOpen_ID(uint id, ImGuiPopupFlags popup_flags) { return default; }
+    public static byte igIsRectVisible_Nil(UnityEngine.Vector2 size) { return default; }
+    public static byte igIsRectVisible_Vec2(UnityEngine.Vector2 rect_min, UnityEngine.Vector2 rect_max) { return default; }
+    public static unsafe byte igIsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below) { return default; }
+    public static byte igIsWindowAppearing() { return default; }
+    public static unsafe byte igIsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, byte popup_hierarchy) { return default; }
+    public static byte igIsWindowCollapsed() { return default; }
+    public static byte igIsWindowFocused(ImGuiFocusedFlags flags) { return default; }
+    public static byte igIsWindowHovered(ImGuiHoveredFlags flags) { return default; }
+    public static unsafe byte igIsWindowNavFocusable(ImGuiWindow* window) { return default; }
+    public static unsafe byte igIsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent) { return default; }
+    public static unsafe byte igItemAdd(UnityEngine.Rect bb, uint id, UnityEngine.Rect* nav_bb, ImGuiItemFlags extra_flags) { return default; }
+    public static byte igItemHoverable(UnityEngine.Rect bb, uint id) { return default; }
+    public static void igItemSize_Vec2(UnityEngine.Vector2 size, float text_baseline_y) { }
+    public static void igItemSize_Rect(UnityEngine.Rect bb, float text_baseline_y) { }
+    public static void igKeepAliveID(uint id) { }
+    public static unsafe void igLabelText(byte* label, byte* fmt) { }
+    public static unsafe void igLabelTextV(byte* label, byte* fmt) { }
+    public static unsafe byte igListBox_Str_arr(byte* label, System.Int32* current_item, System.Byte** items, int items_count, int height_in_items) { return default; }
+    public static unsafe byte igListBox_FnBoolPtr(byte* label, System.Int32* current_item, System.IntPtr items_getter, System.IntPtr data, int items_count, int height_in_items) { return default; }
+    public static unsafe void igLoadIniSettingsFromDisk(byte* ini_filename) { }
+    public static unsafe void igLoadIniSettingsFromMemory(byte* ini_data, uint ini_size) { }
+    public static void igLogBegin(ImGuiLogType type, int auto_open_depth) { }
+    public static void igLogButtons() { }
+    public static void igLogFinish() { }
+    public static unsafe void igLogRenderedText(UnityEngine.Vector2* ref_pos, byte* text, byte* text_end) { }
+    public static unsafe void igLogSetNextTextDecoration(byte* prefix, byte* suffix) { }
+    public static unsafe void igLogText(byte* fmt) { }
+    public static unsafe void igLogTextV(byte* fmt) { }
+    public static void igLogToBuffer(int auto_open_depth) { }
+    public static void igLogToClipboard(int auto_open_depth) { }
+    public static unsafe void igLogToFile(int auto_open_depth, byte* filename) { }
+    public static void igLogToTTY(int auto_open_depth) { }
+    public static void igMarkIniSettingsDirty_Nil() { }
+    public static unsafe void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow* window) { }
+    public static void igMarkItemEdited(uint id) { }
+    public static System.IntPtr igMemAlloc(uint size) { return default; }
+    public static void igMemFree(System.IntPtr ptr) { }
+    public static unsafe byte igMenuItem_Bool(byte* label, byte* shortcut, byte selected, byte enabled) { return default; }
+    public static unsafe byte igMenuItem_BoolPtr(byte* label, byte* shortcut, byte* p_selected, byte enabled) { return default; }
+    public static unsafe byte igMenuItemEx(byte* label, byte* icon, byte* shortcut, byte selected, byte enabled) { return default; }
+    public static void igNavInitRequestApplyResult() { }
+    public static unsafe void igNavInitWindow(ImGuiWindow* window, byte force_reinit) { }
+    public static void igNavMoveRequestApplyResult() { }
+    public static byte igNavMoveRequestButNoResultYet() { return default; }
+    public static void igNavMoveRequestCancel() { }
+    public static void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags) { }
+    public static void igNavMoveRequestResolveWithLastItem(System.IntPtr result) { }
+    public static void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags) { }
+    public static unsafe void igNavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags) { }
+    public static void igNewFrame() { }
+    public static void igNewLine() { }
+    public static void igNextColumn() { }
+    public static unsafe void igOpenPopup_Str(byte* str_id, ImGuiPopupFlags popup_flags) { }
+    public static void igOpenPopup_ID(uint id, ImGuiPopupFlags popup_flags) { }
+    public static void igOpenPopupEx(uint id, ImGuiPopupFlags popup_flags) { }
+    public static unsafe void igOpenPopupOnItemClick(byte* str_id, ImGuiPopupFlags popup_flags) { }
+    public static unsafe int igPlotEx(ImGuiPlotType plot_type, byte* label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 frame_size) { return default; }
+    public static unsafe void igPlotHistogram_FloatPtr(byte* label, System.Single* values, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static unsafe void igPlotHistogram_FnFloatPtr(byte* label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static unsafe void igPlotLines_FloatPtr(byte* label, System.Single* values, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size, int stride) { }
+    public static unsafe void igPlotLines_FnFloatPtr(byte* label, System.IntPtr values_getter, System.IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, UnityEngine.Vector2 graph_size) { }
+    public static void igPopAllowKeyboardFocus() { }
+    public static void igPopButtonRepeat() { }
+    public static void igPopClipRect() { }
+    public static void igPopColumnsBackground() { }
+    public static void igPopFocusScope() { }
+    public static void igPopFont() { }
+    public static void igPopID() { }
+    public static void igPopItemFlag() { }
+    public static void igPopItemWidth() { }
+    public static void igPopStyleColor(int count) { }
+    public static void igPopStyleVar(int count) { }
+    public static void igPopTextWrapPos() { }
+    public static unsafe void igProgressBar(float fraction, UnityEngine.Vector2 size_arg, byte* overlay) { }
+    public static void igPushAllowKeyboardFocus(byte allow_keyboard_focus) { }
+    public static void igPushButtonRepeat(byte repeat) { }
+    public static void igPushClipRect(UnityEngine.Vector2 clip_rect_min, UnityEngine.Vector2 clip_rect_max, byte intersect_with_current_clip_rect) { }
+    public static void igPushColumnClipRect(int column_index) { }
+    public static void igPushColumnsBackground() { }
+    public static void igPushFocusScope(uint id) { }
+    public static unsafe void igPushFont(ImFont* font) { }
+    public static unsafe void igPushID_Str(byte* str_id) { }
+    public static unsafe void igPushID_StrStr(byte* str_id_begin, byte* str_id_end) { }
+    public static void igPushID_Ptr(System.IntPtr ptr_id) { }
+    public static void igPushID_Int(int int_id) { }
+    public static void igPushItemFlag(ImGuiItemFlags option, byte enabled) { }
+    public static void igPushItemWidth(float item_width) { }
+    public static void igPushMultiItemsWidths(int components, float width_full) { }
+    public static void igPushOverrideID(uint id) { }
+    public static void igPushStyleColor_U32(ImGuiCol idx, uint col) { }
+    public static void igPushStyleColor_Vec4(ImGuiCol idx, UnityEngine.Vector4 col) { }
+    public static void igPushStyleVar_Float(ImGuiStyleVar idx, float val) { }
+    public static void igPushStyleVar_Vec2(ImGuiStyleVar idx, UnityEngine.Vector2 val) { }
+    public static void igPushTextWrapPos(float wrap_local_pos_x) { }
+    public static unsafe byte igRadioButton_Bool(byte* label, byte active) { return default; }
+    public static unsafe byte igRadioButton_IntPtr(byte* label, System.Int32* v, int v_button) { return default; }
+    public static void igRemoveContextHook(System.IntPtr context, uint hook_to_remove) { }
+    public static unsafe void igRemoveSettingsHandler(byte* type_name) { }
+    public static void igRender() { }
+    public static unsafe void igRenderArrow(ImDrawList* draw_list, UnityEngine.Vector2 pos, uint col, ImGuiDir dir, float scale) { }
+    public static unsafe void igRenderArrowPointingAt(ImDrawList* draw_list, UnityEngine.Vector2 pos, UnityEngine.Vector2 half_sz, ImGuiDir direction, uint col) { }
+    public static unsafe void igRenderBullet(ImDrawList* draw_list, UnityEngine.Vector2 pos, uint col) { }
+    public static unsafe void igRenderCheckMark(ImDrawList* draw_list, UnityEngine.Vector2 pos, uint col, float sz) { }
+    public static unsafe void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, float grid_step, UnityEngine.Vector2 grid_off, float rounding, ImDrawFlags flags) { }
+    public static void igRenderFrame(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, uint fill_col, byte border, float rounding) { }
+    public static void igRenderFrameBorder(UnityEngine.Vector2 p_min, UnityEngine.Vector2 p_max, float rounding) { }
+    public static void igRenderMouseCursor(UnityEngine.Vector2 pos, float scale, ImGuiMouseCursor mouse_cursor, uint col_fill, uint col_border, uint col_shadow) { }
+    public static void igRenderNavHighlight(UnityEngine.Rect bb, uint id, ImGuiNavHighlightFlags flags) { }
+    public static unsafe void igRenderRectFilledRangeH(ImDrawList* draw_list, UnityEngine.Rect rect, uint col, float x_start_norm, float x_end_norm, float rounding) { }
+    public static unsafe void igRenderRectFilledWithHole(ImDrawList* draw_list, UnityEngine.Rect outer, UnityEngine.Rect inner, uint col, float rounding) { }
+    public static unsafe void igRenderText(UnityEngine.Vector2 pos, byte* text, byte* text_end, byte hide_text_after_hash) { }
+    public static unsafe void igRenderTextClipped(UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, byte* text, byte* text_end, UnityEngine.Vector2* text_size_if_known, UnityEngine.Vector2 align, UnityEngine.Rect* clip_rect) { }
+    public static unsafe void igRenderTextClippedEx(ImDrawList* draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, byte* text, byte* text_end, UnityEngine.Vector2* text_size_if_known, UnityEngine.Vector2 align, UnityEngine.Rect* clip_rect) { }
+    public static unsafe void igRenderTextEllipsis(ImDrawList* draw_list, UnityEngine.Vector2 pos_min, UnityEngine.Vector2 pos_max, float clip_max_x, float ellipsis_max_x, byte* text, byte* text_end, UnityEngine.Vector2* text_size_if_known) { }
+    public static unsafe void igRenderTextWrapped(UnityEngine.Vector2 pos, byte* text, byte* text_end, float wrap_width) { }
+    public static void igResetMouseDragDelta(ImGuiMouseButton button) { }
+    public static void igSameLine(float offset_from_start_x, float spacing) { }
+    public static unsafe void igSaveIniSettingsToDisk(byte* ini_filename) { }
+    public static unsafe byte* igSaveIniSettingsToMemory(System.UInt32* out_ini_size) { return default; }
+    public static unsafe void igScrollToBringRectIntoView(ImGuiWindow* window, UnityEngine.Rect rect) { }
+    public static void igScrollToItem(ImGuiScrollFlags flags) { }
+    public static unsafe void igScrollToRect(ImGuiWindow* window, UnityEngine.Rect rect, ImGuiScrollFlags flags) { }
+    public static unsafe void igScrollToRectEx(UnityEngine.Vector2* pOut, ImGuiWindow* window, UnityEngine.Rect rect, ImGuiScrollFlags flags) { }
+    public static void igScrollbar(ImGuiAxis axis) { }
+    public static unsafe byte igScrollbarEx(UnityEngine.Rect bb, uint id, ImGuiAxis axis, System.Int64* p_scroll_v, long avail_v, long contents_v, ImDrawFlags flags) { return default; }
+    public static unsafe byte igSelectable_Bool(byte* label, byte selected, ImGuiSelectableFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static unsafe byte igSelectable_BoolPtr(byte* label, byte* p_selected, ImGuiSelectableFlags flags, UnityEngine.Vector2 size) { return default; }
+    public static void igSeparator() { }
+    public static void igSeparatorEx(ImGuiSeparatorFlags flags) { }
+    public static unsafe void igSetActiveID(uint id, ImGuiWindow* window) { }
+    public static void igSetActiveIdUsingKey(ImGuiKey key) { }
+    public static void igSetActiveIdUsingNavAndKeys() { }
+    public static unsafe void igSetClipboardText(byte* text) { }
+    public static void igSetColorEditOptions(ImGuiColorEditFlags flags) { }
+    public static void igSetColumnOffset(int column_index, float offset_x) { }
+    public static void igSetColumnWidth(int column_index, float width) { }
+    public static void igSetCurrentContext(System.IntPtr ctx) { }
+    public static unsafe void igSetCurrentFont(ImFont* font) { }
+    public static void igSetCursorPos(UnityEngine.Vector2 local_pos) { }
+    public static void igSetCursorPosX(float local_x) { }
+    public static void igSetCursorPosY(float local_y) { }
+    public static void igSetCursorScreenPos(UnityEngine.Vector2 pos) { }
+    public static unsafe byte igSetDragDropPayload(byte* type, System.IntPtr data, uint sz, ImGuiCond cond) { return default; }
+    public static unsafe void igSetFocusID(uint id, ImGuiWindow* window) { }
+    public static void igSetHoveredID(uint id) { }
+    public static void igSetItemAllowOverlap() { }
+    public static void igSetItemDefaultFocus() { }
+    public static void igSetItemUsingMouseWheel() { }
+    public static void igSetKeyboardFocusHere(int offset) { }
+    public static void igSetLastItemData(uint item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, UnityEngine.Rect item_rect) { }
+    public static void igSetMouseCursor(ImGuiMouseCursor cursor_type) { }
+    public static void igSetNavID(uint id, ImGuiNavLayer nav_layer, uint focus_scope_id, UnityEngine.Rect rect_rel) { }
+    public static unsafe void igSetNavWindow(ImGuiWindow* window) { }
+    public static void igSetNextFrameWantCaptureKeyboard(byte want_capture_keyboard) { }
+    public static void igSetNextFrameWantCaptureMouse(byte want_capture_mouse) { }
+    public static void igSetNextItemOpen(byte is_open, ImGuiCond cond) { }
+    public static void igSetNextItemWidth(float item_width) { }
+    public static void igSetNextWindowBgAlpha(float alpha) { }
+    public static void igSetNextWindowCollapsed(byte collapsed, ImGuiCond cond) { }
+    public static void igSetNextWindowContentSize(UnityEngine.Vector2 size) { }
+    public static void igSetNextWindowFocus() { }
+    public static void igSetNextWindowPos(UnityEngine.Vector2 pos, ImGuiCond cond, UnityEngine.Vector2 pivot) { }
+    public static void igSetNextWindowScroll(UnityEngine.Vector2 scroll) { }
+    public static void igSetNextWindowSize(UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static void igSetNextWindowSizeConstraints(UnityEngine.Vector2 size_min, UnityEngine.Vector2 size_max, ImGuiSizeCallback custom_callback, System.IntPtr custom_callback_data) { }
+    public static void igSetScrollFromPosX_Float(float local_x, float center_x_ratio) { }
+    public static unsafe void igSetScrollFromPosX_WindowPtr(ImGuiWindow* window, float local_x, float center_x_ratio) { }
+    public static void igSetScrollFromPosY_Float(float local_y, float center_y_ratio) { }
+    public static unsafe void igSetScrollFromPosY_WindowPtr(ImGuiWindow* window, float local_y, float center_y_ratio) { }
+    public static void igSetScrollHereX(float center_x_ratio) { }
+    public static void igSetScrollHereY(float center_y_ratio) { }
+    public static void igSetScrollX_Float(float scroll_x) { }
+    public static unsafe void igSetScrollX_WindowPtr(ImGuiWindow* window, float scroll_x) { }
+    public static void igSetScrollY_Float(float scroll_y) { }
+    public static unsafe void igSetScrollY_WindowPtr(ImGuiWindow* window, float scroll_y) { }
+    public static unsafe void igSetStateStorage(ImGuiStorage* storage) { }
+    public static unsafe void igSetTabItemClosed(byte* tab_or_docked_window_label) { }
+    public static unsafe void igSetTooltip(byte* fmt) { }
+    public static unsafe void igSetTooltipV(byte* fmt) { }
+    public static unsafe void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window, UnityEngine.Rect clip_rect) { }
+    public static void igSetWindowCollapsed_Bool(byte collapsed, ImGuiCond cond) { }
+    public static unsafe void igSetWindowCollapsed_Str(byte* name, byte collapsed, ImGuiCond cond) { }
+    public static unsafe void igSetWindowCollapsed_WindowPtr(ImGuiWindow* window, byte collapsed, ImGuiCond cond) { }
+    public static void igSetWindowFocus_Nil() { }
+    public static unsafe void igSetWindowFocus_Str(byte* name) { }
+    public static void igSetWindowFontScale(float scale) { }
+    public static unsafe void igSetWindowHitTestHole(ImGuiWindow* window, UnityEngine.Vector2 pos, UnityEngine.Vector2 size) { }
+    public static void igSetWindowPos_Vec2(UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static unsafe void igSetWindowPos_Str(byte* name, UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static unsafe void igSetWindowPos_WindowPtr(ImGuiWindow* window, UnityEngine.Vector2 pos, ImGuiCond cond) { }
+    public static void igSetWindowSize_Vec2(UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static unsafe void igSetWindowSize_Str(byte* name, UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static unsafe void igSetWindowSize_WindowPtr(ImGuiWindow* window, UnityEngine.Vector2 size, ImGuiCond cond) { }
+    public static unsafe void igSetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport) { }
+    public static unsafe void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, UnityEngine.Vector2 gradient_p0, UnityEngine.Vector2 gradient_p1, uint col0, uint col1) { }
+    public static unsafe void igShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 uv_a, UnityEngine.Vector2 uv_b, byte clamp) { }
+    public static unsafe void igShowAboutWindow(byte* p_open) { }
+    public static unsafe void igShowDebugLogWindow(byte* p_open) { }
+    public static unsafe void igShowDemoWindow(byte* p_open) { }
+    public static unsafe void igShowFontAtlas(ImFontAtlas* atlas) { }
+    public static unsafe void igShowFontSelector(byte* label) { }
+    public static unsafe void igShowMetricsWindow(byte* p_open) { }
+    public static unsafe void igShowStackToolWindow(byte* p_open) { }
+    public static unsafe void igShowStyleEditor(ImGuiStyle* @ref) { }
+    public static unsafe byte igShowStyleSelector(byte* label) { return default; }
+    public static void igShowUserGuide() { }
+    public static unsafe void igShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess) { }
+    public static void igShutdown() { }
+    public static unsafe byte igSliderAngle(byte* label, System.Single* v_rad, float v_degrees_min, float v_degrees_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderBehavior(UnityEngine.Rect bb, uint id, ImGuiDataType data_type, System.IntPtr p_v, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags, UnityEngine.Rect* out_grab_bb) { return default; }
+    public static unsafe byte igSliderFloat(byte* label, System.Single* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderFloat2(byte* label, UnityEngine.Vector2* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderFloat3(byte* label, UnityEngine.Vector3* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderFloat4(byte* label, UnityEngine.Vector4* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderInt(byte* label, System.Int32* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderInt2(byte* label, System.Int32* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderInt3(byte* label, System.Int32* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderInt4(byte* label, System.Int32* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderScalar(byte* label, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSliderScalarN(byte* label, ImGuiDataType data_type, System.IntPtr p_data, int components, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igSmallButton(byte* label) { return default; }
+    public static void igSpacing() { }
+    public static unsafe byte igSplitterBehavior(UnityEngine.Rect bb, uint id, ImGuiAxis axis, System.Single* size1, System.Single* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay) { return default; }
+    public static unsafe void igStartMouseMovingWindow(ImGuiWindow* window) { }
+    public static unsafe void igStyleColorsClassic(ImGuiStyle* dst) { }
+    public static unsafe void igStyleColorsDark(ImGuiStyle* dst) { }
+    public static unsafe void igStyleColorsLight(ImGuiStyle* dst) { }
+    public static unsafe void igTabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { }
+    public static unsafe ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar, uint tab_id) { return default; }
+    public static unsafe byte igTabBarProcessReorder(ImGuiTabBar* tab_bar) { return default; }
+    public static unsafe void igTabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset) { }
+    public static unsafe void igTabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, UnityEngine.Vector2 mouse_pos) { }
+    public static unsafe void igTabBarRemoveTab(ImGuiTabBar* tab_bar, uint tab_id) { }
+    public static unsafe void igTabItemBackground(ImDrawList* draw_list, UnityEngine.Rect bb, ImGuiTabItemFlags flags, uint col) { }
+    public static unsafe byte igTabItemButton(byte* label, ImGuiTabItemFlags flags) { return default; }
+    public static unsafe void igTabItemCalcSize(UnityEngine.Vector2* pOut, byte* label, byte has_close_button) { }
+    public static unsafe byte igTabItemEx(ImGuiTabBar* tab_bar, byte* label, byte* p_open, ImGuiTabItemFlags flags) { return default; }
+    public static unsafe void igTabItemLabelAndCloseButton(ImDrawList* draw_list, UnityEngine.Rect bb, ImGuiTabItemFlags flags, UnityEngine.Vector2 frame_padding, byte* label, uint tab_id, uint close_button_id, byte is_contents_visible, byte* out_just_closed, byte* out_text_clipped) { }
+    public static unsafe void igTableBeginApplyRequests(ImGuiTable* table) { }
+    public static unsafe void igTableBeginCell(ImGuiTable* table, int column_n) { }
+    public static unsafe void igTableBeginInitMemory(ImGuiTable* table, int columns_count) { }
+    public static unsafe void igTableBeginRow(ImGuiTable* table) { }
+    public static unsafe void igTableDrawBorders(ImGuiTable* table) { }
+    public static unsafe void igTableDrawContextMenu(ImGuiTable* table) { }
+    public static unsafe void igTableEndCell(ImGuiTable* table) { }
+    public static unsafe void igTableEndRow(ImGuiTable* table) { }
+    public static unsafe ImGuiTable* igTableFindByID(uint id) { return default; }
+    public static unsafe void igTableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column) { }
+    public static void igTableGcCompactSettings() { }
+    public static unsafe void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable* table) { }
+    public static unsafe void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData* table) { }
+    public static unsafe ImGuiTableSettings* igTableGetBoundSettings(ImGuiTable* table) { return default; }
+    public static unsafe void igTableGetCellBgRect(UnityEngine.Rect* pOut, ImGuiTable* table, int column_n) { }
+    public static int igTableGetColumnCount() { return default; }
+    public static ImGuiTableColumnFlags igTableGetColumnFlags(int column_n) { return default; }
+    public static int igTableGetColumnIndex() { return default; }
+    public static unsafe byte* igTableGetColumnName_Int(int column_n) { return default; }
+    public static unsafe byte* igTableGetColumnName_TablePtr(ImGuiTable* table, int column_n) { return default; }
+    public static unsafe ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn* column) { return default; }
+    public static unsafe uint igTableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no) { return default; }
+    public static unsafe float igTableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column) { return default; }
+    public static float igTableGetHeaderRowHeight() { return default; }
+    public static int igTableGetHoveredColumn() { return default; }
+    public static unsafe ImGuiTableInstanceData* igTableGetInstanceData(ImGuiTable* table, int instance_no) { return default; }
+    public static unsafe float igTableGetMaxColumnWidth(ImGuiTable* table, int column_n) { return default; }
+    public static int igTableGetRowIndex() { return default; }
+    public static unsafe ImGuiTableSortSpecs* igTableGetSortSpecs() { return default; }
+    public static unsafe void igTableHeader(byte* label) { }
+    public static void igTableHeadersRow() { }
+    public static unsafe void igTableLoadSettings(ImGuiTable* table) { }
+    public static unsafe void igTableMergeDrawChannels(ImGuiTable* table) { }
+    public static byte igTableNextColumn() { return default; }
+    public static void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height) { }
+    public static void igTableOpenContextMenu(int column_n) { }
+    public static void igTablePopBackgroundChannel() { }
+    public static void igTablePushBackgroundChannel() { }
+    public static unsafe void igTableRemove(ImGuiTable* table) { }
+    public static unsafe void igTableResetSettings(ImGuiTable* table) { }
+    public static unsafe void igTableSaveSettings(ImGuiTable* table) { }
+    public static void igTableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n) { }
+    public static void igTableSetColumnEnabled(int column_n, byte v) { }
+    public static byte igTableSetColumnIndex(int column_n) { return default; }
+    public static void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, byte append_to_sort_specs) { }
+    public static void igTableSetColumnWidth(int column_n, float width) { }
+    public static unsafe void igTableSetColumnWidthAutoAll(ImGuiTable* table) { }
+    public static unsafe void igTableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n) { }
+    public static void igTableSettingsAddSettingsHandler() { }
+    public static unsafe ImGuiTableSettings* igTableSettingsCreate(uint id, int columns_count) { return default; }
+    public static unsafe ImGuiTableSettings* igTableSettingsFindByID(uint id) { return default; }
+    public static unsafe void igTableSetupColumn(byte* label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id) { }
+    public static unsafe void igTableSetupDrawChannels(ImGuiTable* table) { }
+    public static void igTableSetupScrollFreeze(int cols, int rows) { }
+    public static unsafe void igTableSortSpecsBuild(ImGuiTable* table) { }
+    public static unsafe void igTableSortSpecsSanitize(ImGuiTable* table) { }
+    public static unsafe void igTableUpdateBorders(ImGuiTable* table) { }
+    public static unsafe void igTableUpdateColumnsWeightFromWidth(ImGuiTable* table) { }
+    public static unsafe void igTableUpdateLayout(ImGuiTable* table) { }
+    public static byte igTempInputIsActive(uint id) { return default; }
+    public static unsafe byte igTempInputScalar(UnityEngine.Rect bb, uint id, byte* label, ImGuiDataType data_type, System.IntPtr p_data, byte* format, System.IntPtr p_clamp_min, System.IntPtr p_clamp_max) { return default; }
+    public static unsafe byte igTempInputText(UnityEngine.Rect bb, uint id, byte* label, byte* buf, int buf_size, ImGuiInputTextFlags flags) { return default; }
+    public static unsafe void igText(byte* fmt) { }
+    public static unsafe void igTextColored(UnityEngine.Vector4 col, byte* fmt) { }
+    public static unsafe void igTextColoredV(UnityEngine.Vector4 col, byte* fmt) { }
+    public static unsafe void igTextDisabled(byte* fmt) { }
+    public static unsafe void igTextDisabledV(byte* fmt) { }
+    public static unsafe void igTextEx(byte* text, byte* text_end, ImGuiTextFlags flags) { }
+    public static unsafe void igTextUnformatted(byte* text, byte* text_end) { }
+    public static unsafe void igTextV(byte* fmt) { }
+    public static unsafe void igTextWrapped(byte* fmt) { }
+    public static unsafe void igTextWrappedV(byte* fmt) { }
+    public static unsafe byte igTreeNode_Str(byte* label) { return default; }
+    public static unsafe byte igTreeNode_StrStr(byte* str_id, byte* fmt) { return default; }
+    public static unsafe byte igTreeNode_Ptr(System.IntPtr ptr_id, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, byte* label, byte* label_end) { return default; }
+    public static byte igTreeNodeBehaviorIsOpen(uint id, ImGuiTreeNodeFlags flags) { return default; }
+    public static unsafe byte igTreeNodeEx_Str(byte* label, ImGuiTreeNodeFlags flags) { return default; }
+    public static unsafe byte igTreeNodeEx_StrStr(byte* str_id, ImGuiTreeNodeFlags flags, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeEx_Ptr(System.IntPtr ptr_id, ImGuiTreeNodeFlags flags, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeExV_Str(byte* str_id, ImGuiTreeNodeFlags flags, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeExV_Ptr(System.IntPtr ptr_id, ImGuiTreeNodeFlags flags, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeV_Str(byte* str_id, byte* fmt) { return default; }
+    public static unsafe byte igTreeNodeV_Ptr(System.IntPtr ptr_id, byte* fmt) { return default; }
+    public static void igTreePop() { }
+    public static unsafe void igTreePush_Str(byte* str_id) { }
+    public static void igTreePush_Ptr(System.IntPtr ptr_id) { }
+    public static void igTreePushOverrideID(uint id) { }
+    public static void igUnindent(float indent_w) { }
+    public static void igUpdateHoveredWindowAndCaptureFlags() { }
+    public static void igUpdateInputEvents(byte trickle_fast_inputs) { }
+    public static void igUpdateMouseMovingWindowEndFrame() { }
+    public static void igUpdateMouseMovingWindowNewFrame() { }
+    public static unsafe void igUpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window) { }
+    public static unsafe byte igVSliderFloat(byte* label, UnityEngine.Vector2 size, System.Single* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igVSliderInt(byte* label, UnityEngine.Vector2 size, System.Int32* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe byte igVSliderScalar(byte* label, UnityEngine.Vector2 size, ImGuiDataType data_type, System.IntPtr p_data, System.IntPtr p_min, System.IntPtr p_max, byte* format, ImGuiSliderFlags flags) { return default; }
+    public static unsafe void igValue_Bool(byte* prefix, byte b) { }
+    public static unsafe void igValue_Int(byte* prefix, int v) { }
+    public static unsafe void igValue_Uint(byte* prefix, uint v) { }
+    public static unsafe void igValue_Float(byte* prefix, float v, byte* float_format) { }
+    public static unsafe void igWindowRectAbsToRel(UnityEngine.Rect* pOut, ImGuiWindow* window, UnityEngine.Rect r) { }
+    public static unsafe void igWindowRectRelToAbs(UnityEngine.Rect* pOut, ImGuiWindow* window, UnityEngine.Rect r) { }
+  }
+  public enum ImGuiNavDirSourceFlags
+  {
+    None = 0,
+    RawKeyboard = 1,
+    Keyboard = 2,
+    PadDPad = 4,
+    PadLStick = 8,
+  }
+  public enum ImGuiNavHighlightFlags
+  {
+    None = 0,
+    TypeDefault = 1,
+    TypeThin = 2,
+    AlwaysDraw = 4,
+    NoRounding = 8,
+  }
+  public enum ImGuiNavInput
+  {
+    Activate = 0,
+    Cancel = 1,
+    Input = 2,
+    Menu = 3,
+    DpadLeft = 4,
+    DpadRight = 5,
+    DpadUp = 6,
+    DpadDown = 7,
+    LStickLeft = 8,
+    LStickRight = 9,
+    LStickUp = 10,
+    LStickDown = 11,
+    FocusPrev = 12,
+    FocusNext = 13,
+    TweakSlow = 14,
+    TweakFast = 15,
+    KeyLeft_ = 16,
+    KeyRight_ = 17,
+    KeyUp_ = 18,
+    KeyDown_ = 19,
+    COUNT = 20,
+  }
+  public enum ImGuiNavLayer
+  {
+    Main = 0,
+    Menu = 1,
+    COUNT = 2,
+  }
+  public enum ImGuiNavMoveFlags
+  {
+    None = 0,
+    LoopX = 1,
+    LoopY = 2,
+    WrapX = 4,
+    WrapY = 8,
+    AllowCurrentNavId = 16,
+    AlsoScoreVisibleSet = 32,
+    ScrollToEdgeY = 64,
+    Forwarded = 128,
+    DebugNoResult = 256,
+    FocusApi = 512,
+    Tabbing = 1024,
+    Activate = 2048,
+    DontSetNavHighlight = 4096,
+  }
+  public enum ImGuiNavReadMode
+  {
+    Down = 0,
+    Pressed = 1,
+    Released = 2,
+    Repeat = 3,
+    RepeatSlow = 4,
+    RepeatFast = 5,
+  }
+  public struct ImGuiNextItemData
+  {
+    public ImGuiNextItemDataFlags Flags;
+    public float Width;
+    public uint FocusScopeId;
+    public ImGuiCond OpenCond;
+    public byte OpenVal;
+  }
+  public struct ImGuiNextItemDataPtr
+  {
+    public unsafe ImGuiNextItemData* NativePtr { get => default; }
+    public ref ImGuiNextItemDataFlags Flags { get => ref __0; }
+    public ref float Width { get => ref __1; }
+    public ref uint FocusScopeId { get => ref __2; }
+    public ref ImGuiCond OpenCond { get => ref __3; }
+    public ref bool OpenVal { get => ref __4; }
+    public void ClearFlags() { }
+    public void ImGuiNextItemData_destroy() { }
+    internal static ImGuiNextItemDataFlags __0;
+    internal static float __1;
+    internal static uint __2;
+    internal static ImGuiCond __3;
+    internal static bool __4;
+  }
+  public enum ImGuiNextItemDataFlags
+  {
+    None = 0,
+    HasWidth = 1,
+    HasOpen = 2,
+  }
+  public struct ImGuiNextWindowData
+  {
+    public ImGuiNextWindowDataFlags Flags;
+    public ImGuiCond PosCond;
+    public ImGuiCond SizeCond;
+    public ImGuiCond CollapsedCond;
+    public UnityEngine.Vector2 PosVal;
+    public UnityEngine.Vector2 PosPivotVal;
+    public UnityEngine.Vector2 SizeVal;
+    public UnityEngine.Vector2 ContentSizeVal;
+    public UnityEngine.Vector2 ScrollVal;
+    public byte CollapsedVal;
+    public UnityEngine.Rect SizeConstraintRect;
+    public System.IntPtr SizeCallback;
+    public unsafe void* SizeCallbackUserData;
+    public float BgAlphaVal;
+    public UnityEngine.Vector2 MenuBarOffsetMinVal;
+  }
+  public struct ImGuiNextWindowDataPtr
+  {
+    public unsafe ImGuiNextWindowData* NativePtr { get => default; }
+    public ref ImGuiNextWindowDataFlags Flags { get => ref __0; }
+    public ref ImGuiCond PosCond { get => ref __1; }
+    public ref ImGuiCond SizeCond { get => ref __1; }
+    public ref ImGuiCond CollapsedCond { get => ref __1; }
+    public ref UnityEngine.Vector2 PosVal { get => ref __2; }
+    public ref UnityEngine.Vector2 PosPivotVal { get => ref __2; }
+    public ref UnityEngine.Vector2 SizeVal { get => ref __2; }
+    public ref UnityEngine.Vector2 ContentSizeVal { get => ref __2; }
+    public ref UnityEngine.Vector2 ScrollVal { get => ref __2; }
+    public ref bool CollapsedVal { get => ref __3; }
+    public ref UnityEngine.Rect SizeConstraintRect { get => ref __4; }
+    public ref ImGuiSizeCallback SizeCallback { get => ref __5; }
+    public System.IntPtr SizeCallbackUserData { get => default; set { } }
+    public ref float BgAlphaVal { get => ref __6; }
+    public ref UnityEngine.Vector2 MenuBarOffsetMinVal { get => ref __2; }
+    public void ClearFlags() { }
+    public void ImGuiNextWindowData_destroy() { }
+    internal static ImGuiNextWindowDataFlags __0;
+    internal static ImGuiCond __1;
+    internal static UnityEngine.Vector2 __2;
+    internal static bool __3;
+    internal static UnityEngine.Rect __4;
+    internal static ImGuiSizeCallback __5;
+    internal static float __6;
+  }
+  public enum ImGuiNextWindowDataFlags
+  {
+    None = 0,
+    HasPos = 1,
+    HasSize = 2,
+    HasContentSize = 4,
+    HasCollapsed = 8,
+    HasSizeConstraint = 16,
+    HasFocus = 32,
+    HasBgAlpha = 64,
+    HasScroll = 128,
+  }
+  public struct ImGuiOldColumnData
+  {
+    public float OffsetNorm;
+    public float OffsetNormBeforeResize;
+    public ImGuiOldColumnFlags Flags;
+    public UnityEngine.Rect ClipRect;
+  }
+  public struct ImGuiOldColumnDataPtr
+  {
+    public unsafe ImGuiOldColumnData* NativePtr { get => default; }
+    public ref float OffsetNorm { get => ref __0; }
+    public ref float OffsetNormBeforeResize { get => ref __0; }
+    public ref ImGuiOldColumnFlags Flags { get => ref __1; }
+    public ref UnityEngine.Rect ClipRect { get => ref __2; }
+    public void ImGuiOldColumnData_destroy() { }
+    internal static float __0;
+    internal static ImGuiOldColumnFlags __1;
+    internal static UnityEngine.Rect __2;
+  }
+  public enum ImGuiOldColumnFlags
+  {
+    None = 0,
+    NoBorder = 1,
+    NoResize = 2,
+    NoPreserveWidths = 4,
+    NoForceWithinWindow = 8,
+    GrowParentContentsSize = 16,
+  }
+  public struct ImGuiOldColumns
+  {
+    public uint ID;
+    public ImGuiOldColumnFlags Flags;
+    public byte IsFirstFrame;
+    public byte IsBeingResized;
+    public int Current;
+    public int Count;
+    public float OffMinX;
+    public float OffMaxX;
+    public float LineMinY;
+    public float LineMaxY;
+    public float HostCursorPosY;
+    public float HostCursorMaxPosX;
+    public UnityEngine.Rect HostInitialClipRect;
+    public UnityEngine.Rect HostBackupClipRect;
+    public UnityEngine.Rect HostBackupParentWorkRect;
+    public ImVector Columns;
+    public ImDrawListSplitter Splitter;
+  }
+  public struct ImGuiOldColumnsPtr
+  {
+    public unsafe ImGuiOldColumns* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiOldColumnFlags Flags { get => ref __1; }
+    public ref bool IsFirstFrame { get => ref __2; }
+    public ref bool IsBeingResized { get => ref __2; }
+    public ref int Current { get => ref __3; }
+    public ref int Count { get => ref __3; }
+    public ref float OffMinX { get => ref __4; }
+    public ref float OffMaxX { get => ref __4; }
+    public ref float LineMinY { get => ref __4; }
+    public ref float LineMaxY { get => ref __4; }
+    public ref float HostCursorPosY { get => ref __4; }
+    public ref float HostCursorMaxPosX { get => ref __4; }
+    public ref UnityEngine.Rect HostInitialClipRect { get => ref __5; }
+    public ref UnityEngine.Rect HostBackupClipRect { get => ref __5; }
+    public ref UnityEngine.Rect HostBackupParentWorkRect { get => ref __5; }
+    public ImPtrVector<ImGuiOldColumnDataPtr> Columns { get => default; }
+    public ref ImDrawListSplitter Splitter { get => ref __6; }
+    public void ImGuiOldColumns_destroy() { }
+    internal static uint __0;
+    internal static ImGuiOldColumnFlags __1;
+    internal static bool __2;
+    internal static int __3;
+    internal static float __4;
+    internal static UnityEngine.Rect __5;
+    internal static ImDrawListSplitter __6;
+  }
+  public struct ImGuiOnceUponAFrame
+  {
+    public int RefFrame;
+  }
+  public struct ImGuiOnceUponAFramePtr
+  {
+    public unsafe ImGuiOnceUponAFrame* NativePtr { get => default; }
+    public ref int RefFrame { get => ref __0; }
+    public void ImGuiOnceUponAFrame_destroy() { }
+    internal static int __0;
+  }
+  public struct ImGuiPayload
+  {
+    public unsafe void* Data;
+    public int DataSize;
+    public uint SourceId;
+    public uint SourceParentId;
+    public int DataFrameCount;
+    public byte DataType_0;
+    public byte DataType_1;
+    public byte DataType_2;
+    public byte DataType_3;
+    public byte DataType_4;
+    public byte DataType_5;
+    public byte DataType_6;
+    public byte DataType_7;
+    public byte DataType_8;
+    public byte DataType_9;
+    public byte DataType_10;
+    public byte DataType_11;
+    public byte DataType_12;
+    public byte DataType_13;
+    public byte DataType_14;
+    public byte DataType_15;
+    public byte DataType_16;
+    public byte DataType_17;
+    public byte DataType_18;
+    public byte DataType_19;
+    public byte DataType_20;
+    public byte DataType_21;
+    public byte DataType_22;
+    public byte DataType_23;
+    public byte DataType_24;
+    public byte DataType_25;
+    public byte DataType_26;
+    public byte DataType_27;
+    public byte DataType_28;
+    public byte DataType_29;
+    public byte DataType_30;
+    public byte DataType_31;
+    public byte DataType_32;
+    public byte Preview;
+    public byte Delivery;
+  }
+  public struct ImGuiPayloadPtr
+  {
+    public unsafe ImGuiPayload* NativePtr { get => default; }
+    public System.IntPtr Data { get => default; set { } }
+    public ref int DataSize { get => ref __0; }
+    public ref uint SourceId { get => ref __1; }
+    public ref uint SourceParentId { get => ref __1; }
+    public ref int DataFrameCount { get => ref __0; }
+    public RangeAccessor<byte> DataType { get => default; }
+    public ref bool Preview { get => ref __2; }
+    public ref bool Delivery { get => ref __2; }
+    public void Clear() { }
+    public bool IsDataType(string type) { return default; }
+    public bool IsDelivery() { return default; }
+    public bool IsPreview() { return default; }
+    public void ImGuiPayload_destroy() { }
+    internal static int __0;
+    internal static uint __1;
+    internal static bool __2;
+  }
+  public struct ImGuiPlatformImeData
+  {
+    public byte WantVisible;
+    public UnityEngine.Vector2 InputPos;
+    public float InputLineHeight;
+  }
+  public struct ImGuiPlatformImeDataPtr
+  {
+    public unsafe ImGuiPlatformImeData* NativePtr { get => default; }
+    public ref bool WantVisible { get => ref __0; }
+    public ref UnityEngine.Vector2 InputPos { get => ref __1; }
+    public ref float InputLineHeight { get => ref __2; }
+    public void ImGuiPlatformImeData_destroy() { }
+    internal static bool __0;
+    internal static UnityEngine.Vector2 __1;
+    internal static float __2;
+  }
+  public enum ImGuiPlotType
+  {
+    Lines = 0,
+    Histogram = 1,
+  }
+  public enum ImGuiPopupFlags
+  {
+    None = 0,
+    MouseButtonLeft = 0,
+    MouseButtonRight = 1,
+    MouseButtonDefault_ = 1,
+    MouseButtonMiddle = 2,
+    MouseButtonMask_ = 31,
+    NoOpenOverExistingPopup = 32,
+    NoOpenOverItems = 64,
+    AnyPopupId = 128,
+    AnyPopupLevel = 256,
+    AnyPopup = 384,
+  }
+  public enum ImGuiPopupPositionPolicy
+  {
+    Default = 0,
+    ComboBox = 1,
+    Tooltip = 2,
+  }
+  public struct ImGuiPtrOrIndex
+  {
+    public System.IntPtr Ptr;
+    public int Index;
+  }
+  public struct ImGuiPtrOrIndexPtr
+  {
+    public unsafe ImGuiPtrOrIndex* NativePtr { get => default; }
+    public System.IntPtr Ptr { get => default; set { } }
+    public ref int Index { get => ref __0; }
+    public void ImGuiPtrOrIndex_destroy() { }
+    internal static int __0;
+  }
+  public enum ImGuiScrollFlags
+  {
+    None = 0,
+    KeepVisibleEdgeX = 1,
+    KeepVisibleEdgeY = 2,
+    KeepVisibleCenterX = 4,
+    KeepVisibleCenterY = 8,
+    AlwaysCenterX = 16,
+    MaskX_ = 21,
+    AlwaysCenterY = 32,
+    MaskY_ = 42,
+    NoScrollParent = 64,
+  }
+  public enum ImGuiSelectableFlags
+  {
+    None = 0,
+    DontClosePopups = 1,
+    SpanAllColumns = 2,
+    AllowDoubleClick = 4,
+    Disabled = 8,
+    AllowItemOverlap = 16,
+  }
+  public enum ImGuiSelectableFlagsPrivate
+  {
+    NoHoldingActiveID = 1048576,
+    SelectOnNav = 2097152,
+    SelectOnClick = 4194304,
+    SelectOnRelease = 8388608,
+    SpanAvailWidth = 16777216,
+    DrawHoveredWhenHeld = 33554432,
+    SetNavIdOnHover = 67108864,
+    NoPadWithHalfSpacing = 134217728,
+  }
+  public enum ImGuiSeparatorFlags
+  {
+    None = 0,
+    Horizontal = 1,
+    Vertical = 2,
+    SpanAllColumns = 4,
+  }
+  public struct ImGuiSettingsHandler
+  {
+    public unsafe byte* TypeName;
+    public uint TypeHash;
+    public System.IntPtr ClearAllFn;
+    public System.IntPtr ReadInitFn;
+    public System.IntPtr ReadOpenFn;
+    public System.IntPtr ReadLineFn;
+    public System.IntPtr ApplyAllFn;
+    public System.IntPtr WriteAllFn;
+    public unsafe void* UserData;
+  }
+  public struct ImGuiSettingsHandlerPtr
+  {
+    public unsafe ImGuiSettingsHandler* NativePtr { get => default; }
+    public ref string TypeName { get => ref __0; }
+    public ref uint TypeHash { get => ref __1; }
+    public System.IntPtr ClearAllFn { get => default; set { } }
+    public System.IntPtr ReadInitFn { get => default; set { } }
+    public System.IntPtr ReadOpenFn { get => default; set { } }
+    public System.IntPtr ReadLineFn { get => default; set { } }
+    public System.IntPtr ApplyAllFn { get => default; set { } }
+    public System.IntPtr WriteAllFn { get => default; set { } }
+    public System.IntPtr UserData { get => default; set { } }
+    public void ImGuiSettingsHandler_destroy() { }
+    internal static string __0;
+    internal static uint __1;
+  }
+  public struct ImGuiShrinkWidthItem
+  {
+    public int Index;
+    public float Width;
+    public float InitialWidth;
+  }
+  public struct ImGuiShrinkWidthItemPtr
+  {
+    public unsafe ImGuiShrinkWidthItem* NativePtr { get => default; }
+    public ref int Index { get => ref __0; }
+    public ref float Width { get => ref __1; }
+    public ref float InitialWidth { get => ref __1; }
+    internal static int __0;
+    internal static float __1;
+  }
+  public struct ImGuiSizeCallbackData
+  {
+    public unsafe void* UserData;
+    public UnityEngine.Vector2 Pos;
+    public UnityEngine.Vector2 CurrentSize;
+    public UnityEngine.Vector2 DesiredSize;
+  }
+  public struct ImGuiSizeCallbackDataPtr
+  {
+    public unsafe ImGuiSizeCallbackData* NativePtr { get => default; }
+    public System.IntPtr UserData { get => default; set { } }
+    public ref UnityEngine.Vector2 Pos { get => ref __0; }
+    public ref UnityEngine.Vector2 CurrentSize { get => ref __0; }
+    public ref UnityEngine.Vector2 DesiredSize { get => ref __0; }
+    internal static UnityEngine.Vector2 __0;
+  }
+  public enum ImGuiSliderFlags
+  {
+    None = 0,
+    AlwaysClamp = 16,
+    Logarithmic = 32,
+    NoRoundToFormat = 64,
+    NoInput = 128,
+    InvalidMask_ = 1879048207,
+  }
+  public enum ImGuiSliderFlagsPrivate
+  {
+    Vertical = 1048576,
+    ReadOnly = 2097152,
+  }
+  public enum ImGuiSortDirection
+  {
+    None = 0,
+    Ascending = 1,
+    Descending = 2,
+  }
+  public struct ImGuiStackLevelInfo
+  {
+    public uint ID;
+    public System.SByte QueryFrameCount;
+    public byte QuerySuccess;
+    public ImGuiDataType DataType;
+    public byte Desc_0;
+    public byte Desc_1;
+    public byte Desc_2;
+    public byte Desc_3;
+    public byte Desc_4;
+    public byte Desc_5;
+    public byte Desc_6;
+    public byte Desc_7;
+    public byte Desc_8;
+    public byte Desc_9;
+    public byte Desc_10;
+    public byte Desc_11;
+    public byte Desc_12;
+    public byte Desc_13;
+    public byte Desc_14;
+    public byte Desc_15;
+    public byte Desc_16;
+    public byte Desc_17;
+    public byte Desc_18;
+    public byte Desc_19;
+    public byte Desc_20;
+    public byte Desc_21;
+    public byte Desc_22;
+    public byte Desc_23;
+    public byte Desc_24;
+    public byte Desc_25;
+    public byte Desc_26;
+    public byte Desc_27;
+    public byte Desc_28;
+    public byte Desc_29;
+    public byte Desc_30;
+    public byte Desc_31;
+    public byte Desc_32;
+    public byte Desc_33;
+    public byte Desc_34;
+    public byte Desc_35;
+    public byte Desc_36;
+    public byte Desc_37;
+    public byte Desc_38;
+    public byte Desc_39;
+    public byte Desc_40;
+    public byte Desc_41;
+    public byte Desc_42;
+    public byte Desc_43;
+    public byte Desc_44;
+    public byte Desc_45;
+    public byte Desc_46;
+    public byte Desc_47;
+    public byte Desc_48;
+    public byte Desc_49;
+    public byte Desc_50;
+    public byte Desc_51;
+    public byte Desc_52;
+    public byte Desc_53;
+    public byte Desc_54;
+    public byte Desc_55;
+    public byte Desc_56;
+  }
+  public struct ImGuiStackLevelInfoPtr
+  {
+    public unsafe ImGuiStackLevelInfo* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref System.SByte QueryFrameCount { get => ref __1; }
+    public ref bool QuerySuccess { get => ref __2; }
+    public ref ImGuiDataType DataType { get => ref __3; }
+    public RangeAccessor<byte> Desc { get => default; }
+    public void ImGuiStackLevelInfo_destroy() { }
+    internal static uint __0;
+    internal static System.SByte __1;
+    internal static bool __2;
+    internal static ImGuiDataType __3;
+  }
+  public struct ImGuiStackSizes
+  {
+    public short SizeOfIDStack;
+    public short SizeOfColorStack;
+    public short SizeOfStyleVarStack;
+    public short SizeOfFontStack;
+    public short SizeOfFocusScopeStack;
+    public short SizeOfGroupStack;
+    public short SizeOfItemFlagsStack;
+    public short SizeOfBeginPopupStack;
+    public short SizeOfDisabledStack;
+  }
+  public struct ImGuiStackSizesPtr
+  {
+    public unsafe ImGuiStackSizes* NativePtr { get => default; }
+    public ref short SizeOfIDStack { get => ref __0; }
+    public ref short SizeOfColorStack { get => ref __0; }
+    public ref short SizeOfStyleVarStack { get => ref __0; }
+    public ref short SizeOfFontStack { get => ref __0; }
+    public ref short SizeOfFocusScopeStack { get => ref __0; }
+    public ref short SizeOfGroupStack { get => ref __0; }
+    public ref short SizeOfItemFlagsStack { get => ref __0; }
+    public ref short SizeOfBeginPopupStack { get => ref __0; }
+    public ref short SizeOfDisabledStack { get => ref __0; }
+    public void CompareWithCurrentState() { }
+    public void SetToCurrentState() { }
+    public void ImGuiStackSizes_destroy() { }
+    internal static short __0;
+  }
+  public struct ImGuiStackTool
+  {
+    public int LastActiveFrame;
+    public int StackLevel;
+    public uint QueryId;
+    public ImVector Results;
+    public byte CopyToClipboardOnCtrlC;
+    public float CopyToClipboardLastTime;
+  }
+  public struct ImGuiStackToolPtr
+  {
+    public unsafe ImGuiStackTool* NativePtr { get => default; }
+    public ref int LastActiveFrame { get => ref __0; }
+    public ref int StackLevel { get => ref __0; }
+    public ref uint QueryId { get => ref __1; }
+    public ImPtrVector<ImGuiStackLevelInfoPtr> Results { get => default; }
+    public ref bool CopyToClipboardOnCtrlC { get => ref __2; }
+    public ref float CopyToClipboardLastTime { get => ref __3; }
+    public void ImGuiStackTool_destroy() { }
+    internal static int __0;
+    internal static uint __1;
+    internal static bool __2;
+    internal static float __3;
+  }
+  public struct ImGuiStorage
+  {
+    public ImVector Data;
+  }
+  public struct ImGuiStoragePtr
+  {
+    public unsafe ImGuiStorage* NativePtr { get => default; }
+    public ImVector<System.IntPtr> Data { get => default; }
+    public void BuildSortByKey() { }
+    public void Clear() { }
+    public bool GetBool(uint key) { return default; }
+    public bool GetBool(uint key, bool default_val) { return default; }
+    public unsafe byte* GetBoolRef(uint key) { return default; }
+    public unsafe byte* GetBoolRef(uint key, bool default_val) { return default; }
+    public float GetFloat(uint key) { return default; }
+    public float GetFloat(uint key, float default_val) { return default; }
+    public unsafe System.Single* GetFloatRef(uint key) { return default; }
+    public unsafe System.Single* GetFloatRef(uint key, float default_val) { return default; }
+    public int GetInt(uint key) { return default; }
+    public int GetInt(uint key, int default_val) { return default; }
+    public unsafe System.Int32* GetIntRef(uint key) { return default; }
+    public unsafe System.Int32* GetIntRef(uint key, int default_val) { return default; }
+    public unsafe void* GetVoidPtr(uint key) { return default; }
+    public unsafe void** GetVoidPtrRef(uint key) { return default; }
+    public unsafe void** GetVoidPtrRef(uint key, System.IntPtr default_val) { return default; }
+    public void SetAllInt(int val) { }
+    public void SetBool(uint key, bool val) { }
+    public void SetFloat(uint key, float val) { }
+    public void SetInt(uint key, int val) { }
+    public void SetVoidPtr(uint key, System.IntPtr val) { }
+  }
+  public struct ImGuiStyle
+  {
+    public float Alpha;
+    public float DisabledAlpha;
+    public UnityEngine.Vector2 WindowPadding;
+    public float WindowRounding;
+    public float WindowBorderSize;
+    public UnityEngine.Vector2 WindowMinSize;
+    public UnityEngine.Vector2 WindowTitleAlign;
+    public ImGuiDir WindowMenuButtonPosition;
+    public float ChildRounding;
+    public float ChildBorderSize;
+    public float PopupRounding;
+    public float PopupBorderSize;
+    public UnityEngine.Vector2 FramePadding;
+    public float FrameRounding;
+    public float FrameBorderSize;
+    public UnityEngine.Vector2 ItemSpacing;
+    public UnityEngine.Vector2 ItemInnerSpacing;
+    public UnityEngine.Vector2 CellPadding;
+    public UnityEngine.Vector2 TouchExtraPadding;
+    public float IndentSpacing;
+    public float ColumnsMinSpacing;
+    public float ScrollbarSize;
+    public float ScrollbarRounding;
+    public float GrabMinSize;
+    public float GrabRounding;
+    public float LogSliderDeadzone;
+    public float TabRounding;
+    public float TabBorderSize;
+    public float TabMinWidthForCloseButton;
+    public ImGuiDir ColorButtonPosition;
+    public UnityEngine.Vector2 ButtonTextAlign;
+    public UnityEngine.Vector2 SelectableTextAlign;
+    public UnityEngine.Vector2 DisplayWindowPadding;
+    public UnityEngine.Vector2 DisplaySafeAreaPadding;
+    public float MouseCursorScale;
+    public byte AntiAliasedLines;
+    public byte AntiAliasedLinesUseTex;
+    public byte AntiAliasedFill;
+    public float CurveTessellationTol;
+    public float CircleTessellationMaxError;
+    public UnityEngine.Vector4 Colors_0;
+    public UnityEngine.Vector4 Colors_1;
+    public UnityEngine.Vector4 Colors_2;
+    public UnityEngine.Vector4 Colors_3;
+    public UnityEngine.Vector4 Colors_4;
+    public UnityEngine.Vector4 Colors_5;
+    public UnityEngine.Vector4 Colors_6;
+    public UnityEngine.Vector4 Colors_7;
+    public UnityEngine.Vector4 Colors_8;
+    public UnityEngine.Vector4 Colors_9;
+    public UnityEngine.Vector4 Colors_10;
+    public UnityEngine.Vector4 Colors_11;
+    public UnityEngine.Vector4 Colors_12;
+    public UnityEngine.Vector4 Colors_13;
+    public UnityEngine.Vector4 Colors_14;
+    public UnityEngine.Vector4 Colors_15;
+    public UnityEngine.Vector4 Colors_16;
+    public UnityEngine.Vector4 Colors_17;
+    public UnityEngine.Vector4 Colors_18;
+    public UnityEngine.Vector4 Colors_19;
+    public UnityEngine.Vector4 Colors_20;
+    public UnityEngine.Vector4 Colors_21;
+    public UnityEngine.Vector4 Colors_22;
+    public UnityEngine.Vector4 Colors_23;
+    public UnityEngine.Vector4 Colors_24;
+    public UnityEngine.Vector4 Colors_25;
+    public UnityEngine.Vector4 Colors_26;
+    public UnityEngine.Vector4 Colors_27;
+    public UnityEngine.Vector4 Colors_28;
+    public UnityEngine.Vector4 Colors_29;
+    public UnityEngine.Vector4 Colors_30;
+    public UnityEngine.Vector4 Colors_31;
+    public UnityEngine.Vector4 Colors_32;
+    public UnityEngine.Vector4 Colors_33;
+    public UnityEngine.Vector4 Colors_34;
+    public UnityEngine.Vector4 Colors_35;
+    public UnityEngine.Vector4 Colors_36;
+    public UnityEngine.Vector4 Colors_37;
+    public UnityEngine.Vector4 Colors_38;
+    public UnityEngine.Vector4 Colors_39;
+    public UnityEngine.Vector4 Colors_40;
+    public UnityEngine.Vector4 Colors_41;
+    public UnityEngine.Vector4 Colors_42;
+    public UnityEngine.Vector4 Colors_43;
+    public UnityEngine.Vector4 Colors_44;
+    public UnityEngine.Vector4 Colors_45;
+    public UnityEngine.Vector4 Colors_46;
+    public UnityEngine.Vector4 Colors_47;
+    public UnityEngine.Vector4 Colors_48;
+    public UnityEngine.Vector4 Colors_49;
+    public UnityEngine.Vector4 Colors_50;
+    public UnityEngine.Vector4 Colors_51;
+    public UnityEngine.Vector4 Colors_52;
+  }
+  public struct ImGuiStylePtr
+  {
+    public unsafe ImGuiStyle* NativePtr { get => default; }
+    public ref float Alpha { get => ref __0; }
+    public ref float DisabledAlpha { get => ref __0; }
+    public ref UnityEngine.Vector2 WindowPadding { get => ref __1; }
+    public ref float WindowRounding { get => ref __0; }
+    public ref float WindowBorderSize { get => ref __0; }
+    public ref UnityEngine.Vector2 WindowMinSize { get => ref __1; }
+    public ref UnityEngine.Vector2 WindowTitleAlign { get => ref __1; }
+    public ref ImGuiDir WindowMenuButtonPosition { get => ref __2; }
+    public ref float ChildRounding { get => ref __0; }
+    public ref float ChildBorderSize { get => ref __0; }
+    public ref float PopupRounding { get => ref __0; }
+    public ref float PopupBorderSize { get => ref __0; }
+    public ref UnityEngine.Vector2 FramePadding { get => ref __1; }
+    public ref float FrameRounding { get => ref __0; }
+    public ref float FrameBorderSize { get => ref __0; }
+    public ref UnityEngine.Vector2 ItemSpacing { get => ref __1; }
+    public ref UnityEngine.Vector2 ItemInnerSpacing { get => ref __1; }
+    public ref UnityEngine.Vector2 CellPadding { get => ref __1; }
+    public ref UnityEngine.Vector2 TouchExtraPadding { get => ref __1; }
+    public ref float IndentSpacing { get => ref __0; }
+    public ref float ColumnsMinSpacing { get => ref __0; }
+    public ref float ScrollbarSize { get => ref __0; }
+    public ref float ScrollbarRounding { get => ref __0; }
+    public ref float GrabMinSize { get => ref __0; }
+    public ref float GrabRounding { get => ref __0; }
+    public ref float LogSliderDeadzone { get => ref __0; }
+    public ref float TabRounding { get => ref __0; }
+    public ref float TabBorderSize { get => ref __0; }
+    public ref float TabMinWidthForCloseButton { get => ref __0; }
+    public ref ImGuiDir ColorButtonPosition { get => ref __2; }
+    public ref UnityEngine.Vector2 ButtonTextAlign { get => ref __1; }
+    public ref UnityEngine.Vector2 SelectableTextAlign { get => ref __1; }
+    public ref UnityEngine.Vector2 DisplayWindowPadding { get => ref __1; }
+    public ref UnityEngine.Vector2 DisplaySafeAreaPadding { get => ref __1; }
+    public ref float MouseCursorScale { get => ref __0; }
+    public ref bool AntiAliasedLines { get => ref __3; }
+    public ref bool AntiAliasedLinesUseTex { get => ref __3; }
+    public ref bool AntiAliasedFill { get => ref __3; }
+    public ref float CurveTessellationTol { get => ref __0; }
+    public ref float CircleTessellationMaxError { get => ref __0; }
+    public RangeAccessor<UnityEngine.Vector4> Colors { get => default; }
+    public void ScaleAllSizes(float scale_factor) { }
+    public void ImGuiStyle_destroy() { }
+    internal static float __0;
+    internal static UnityEngine.Vector2 __1;
+    internal static ImGuiDir __2;
+    internal static bool __3;
+  }
+  public enum ImGuiStyleVar
+  {
+    Alpha = 0,
+    DisabledAlpha = 1,
+    WindowPadding = 2,
+    WindowRounding = 3,
+    WindowBorderSize = 4,
+    WindowMinSize = 5,
+    WindowTitleAlign = 6,
+    ChildRounding = 7,
+    ChildBorderSize = 8,
+    PopupRounding = 9,
+    PopupBorderSize = 10,
+    FramePadding = 11,
+    FrameRounding = 12,
+    FrameBorderSize = 13,
+    ItemSpacing = 14,
+    ItemInnerSpacing = 15,
+    IndentSpacing = 16,
+    CellPadding = 17,
+    ScrollbarSize = 18,
+    ScrollbarRounding = 19,
+    GrabMinSize = 20,
+    GrabRounding = 21,
+    TabRounding = 22,
+    ButtonTextAlign = 23,
+    SelectableTextAlign = 24,
+    COUNT = 25,
+  }
+  public struct ImGuiTabBar
+  {
+    public ImVector Tabs;
+    public ImGuiTabBarFlags Flags;
+    public uint ID;
+    public uint SelectedTabId;
+    public uint NextSelectedTabId;
+    public uint VisibleTabId;
+    public int CurrFrameVisible;
+    public int PrevFrameVisible;
+    public UnityEngine.Rect BarRect;
+    public float CurrTabsContentsHeight;
+    public float PrevTabsContentsHeight;
+    public float WidthAllTabs;
+    public float WidthAllTabsIdeal;
+    public float ScrollingAnim;
+    public float ScrollingTarget;
+    public float ScrollingTargetDistToVisibility;
+    public float ScrollingSpeed;
+    public float ScrollingRectMinX;
+    public float ScrollingRectMaxX;
+    public uint ReorderRequestTabId;
+    public short ReorderRequestOffset;
+    public System.SByte BeginCount;
+    public byte WantLayout;
+    public byte VisibleTabWasSubmitted;
+    public byte TabsAddedNew;
+    public short TabsActiveCount;
+    public short LastTabItemIdx;
+    public float ItemSpacingY;
+    public UnityEngine.Vector2 FramePadding;
+    public UnityEngine.Vector2 BackupCursorPos;
+    public ImGuiTextBuffer TabsNames;
+  }
+  public struct ImGuiTabBarPtr
+  {
+    public unsafe ImGuiTabBar* NativePtr { get => default; }
+    public ImPtrVector<ImGuiTabItemPtr> Tabs { get => default; }
+    public ref ImGuiTabBarFlags Flags { get => ref __0; }
+    public ref uint ID { get => ref __1; }
+    public ref uint SelectedTabId { get => ref __1; }
+    public ref uint NextSelectedTabId { get => ref __1; }
+    public ref uint VisibleTabId { get => ref __1; }
+    public ref int CurrFrameVisible { get => ref __2; }
+    public ref int PrevFrameVisible { get => ref __2; }
+    public ref UnityEngine.Rect BarRect { get => ref __3; }
+    public ref float CurrTabsContentsHeight { get => ref __4; }
+    public ref float PrevTabsContentsHeight { get => ref __4; }
+    public ref float WidthAllTabs { get => ref __4; }
+    public ref float WidthAllTabsIdeal { get => ref __4; }
+    public ref float ScrollingAnim { get => ref __4; }
+    public ref float ScrollingTarget { get => ref __4; }
+    public ref float ScrollingTargetDistToVisibility { get => ref __4; }
+    public ref float ScrollingSpeed { get => ref __4; }
+    public ref float ScrollingRectMinX { get => ref __4; }
+    public ref float ScrollingRectMaxX { get => ref __4; }
+    public ref uint ReorderRequestTabId { get => ref __1; }
+    public ref short ReorderRequestOffset { get => ref __5; }
+    public ref System.SByte BeginCount { get => ref __6; }
+    public ref bool WantLayout { get => ref __7; }
+    public ref bool VisibleTabWasSubmitted { get => ref __7; }
+    public ref bool TabsAddedNew { get => ref __7; }
+    public ref short TabsActiveCount { get => ref __5; }
+    public ref short LastTabItemIdx { get => ref __5; }
+    public ref float ItemSpacingY { get => ref __4; }
+    public ref UnityEngine.Vector2 FramePadding { get => ref __8; }
+    public ref UnityEngine.Vector2 BackupCursorPos { get => ref __8; }
+    public ref ImGuiTextBuffer TabsNames { get => ref __9; }
+    public string GetTabName(ImGuiTabItemPtr tab) { return default; }
+    public int GetTabOrder(ImGuiTabItemPtr tab) { return default; }
+    public void ImGuiTabBar_destroy() { }
+    internal static ImGuiTabBarFlags __0;
+    internal static uint __1;
+    internal static int __2;
+    internal static UnityEngine.Rect __3;
+    internal static float __4;
+    internal static short __5;
+    internal static System.SByte __6;
+    internal static bool __7;
+    internal static UnityEngine.Vector2 __8;
+    internal static ImGuiTextBuffer __9;
+  }
+  public enum ImGuiTabBarFlags
+  {
+    None = 0,
+    Reorderable = 1,
+    AutoSelectNewTabs = 2,
+    TabListPopupButton = 4,
+    NoCloseWithMiddleMouseButton = 8,
+    NoTabListScrollingButtons = 16,
+    NoTooltip = 32,
+    FittingPolicyResizeDown = 64,
+    FittingPolicyDefault_ = 64,
+    FittingPolicyScroll = 128,
+    FittingPolicyMask_ = 192,
+  }
+  public enum ImGuiTabBarFlagsPrivate
+  {
+    DockNode = 1048576,
+    IsFocused = 2097152,
+    SaveSettings = 4194304,
+  }
+  public struct ImGuiTabItem
+  {
+    public uint ID;
+    public ImGuiTabItemFlags Flags;
+    public int LastFrameVisible;
+    public int LastFrameSelected;
+    public float Offset;
+    public float Width;
+    public float ContentWidth;
+    public float RequestedWidth;
+    public int NameOffset;
+    public short BeginOrder;
+    public short IndexDuringLayout;
+    public byte WantClose;
+  }
+  public struct ImGuiTabItemPtr
+  {
+    public unsafe ImGuiTabItem* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiTabItemFlags Flags { get => ref __1; }
+    public ref int LastFrameVisible { get => ref __2; }
+    public ref int LastFrameSelected { get => ref __2; }
+    public ref float Offset { get => ref __3; }
+    public ref float Width { get => ref __3; }
+    public ref float ContentWidth { get => ref __3; }
+    public ref float RequestedWidth { get => ref __3; }
+    public ref int NameOffset { get => ref __2; }
+    public ref short BeginOrder { get => ref __4; }
+    public ref short IndexDuringLayout { get => ref __4; }
+    public ref bool WantClose { get => ref __5; }
+    public void ImGuiTabItem_destroy() { }
+    internal static uint __0;
+    internal static ImGuiTabItemFlags __1;
+    internal static int __2;
+    internal static float __3;
+    internal static short __4;
+    internal static bool __5;
+  }
+  public enum ImGuiTabItemFlags
+  {
+    None = 0,
+    UnsavedDocument = 1,
+    SetSelected = 2,
+    NoCloseWithMiddleMouseButton = 4,
+    NoPushId = 8,
+    NoTooltip = 16,
+    NoReorder = 32,
+    Leading = 64,
+    Trailing = 128,
+  }
+  public enum ImGuiTabItemFlagsPrivate
+  {
+    SectionMask_ = 192,
+    NoCloseButton = 1048576,
+    Button = 2097152,
+  }
+  public struct ImGuiTable
+  {
+    public uint ID;
+    public ImGuiTableFlags Flags;
+    public unsafe void* RawData;
+    public unsafe ImGuiTableTempData* TempData;
+    public ImSpan Columns;
+    public ImSpan DisplayOrderToIndex;
+    public ImSpan RowCellData;
+    public ulong EnabledMaskByDisplayOrder;
+    public ulong EnabledMaskByIndex;
+    public ulong VisibleMaskByIndex;
+    public ulong RequestOutputMaskByIndex;
+    public ImGuiTableFlags SettingsLoadedFlags;
+    public int SettingsOffset;
+    public int LastFrameActive;
+    public int ColumnsCount;
+    public int CurrentRow;
+    public int CurrentColumn;
+    public short InstanceCurrent;
+    public short InstanceInteracted;
+    public float RowPosY1;
+    public float RowPosY2;
+    public float RowMinHeight;
+    public float RowTextBaseline;
+    public float RowIndentOffsetX;
+    public ImGuiTableRowFlags RowFlags;
+    public ImGuiTableRowFlags LastRowFlags;
+    public int RowBgColorCounter;
+    public unsafe fixed uint RowBgColor[2];
+    public uint BorderColorStrong;
+    public uint BorderColorLight;
+    public float BorderX1;
+    public float BorderX2;
+    public float HostIndentX;
+    public float MinColumnWidth;
+    public float OuterPaddingX;
+    public float CellPaddingX;
+    public float CellPaddingY;
+    public float CellSpacingX1;
+    public float CellSpacingX2;
+    public float InnerWidth;
+    public float ColumnsGivenWidth;
+    public float ColumnsAutoFitWidth;
+    public float ColumnsStretchSumWeights;
+    public float ResizedColumnNextWidth;
+    public float ResizeLockMinContentsX2;
+    public float RefScale;
+    public UnityEngine.Rect OuterRect;
+    public UnityEngine.Rect InnerRect;
+    public UnityEngine.Rect WorkRect;
+    public UnityEngine.Rect InnerClipRect;
+    public UnityEngine.Rect BgClipRect;
+    public UnityEngine.Rect Bg0ClipRectForDrawCmd;
+    public UnityEngine.Rect Bg2ClipRectForDrawCmd;
+    public UnityEngine.Rect HostClipRect;
+    public UnityEngine.Rect HostBackupInnerClipRect;
+    public unsafe ImGuiWindow* OuterWindow;
+    public unsafe ImGuiWindow* InnerWindow;
+    public ImGuiTextBuffer ColumnsNames;
+    public unsafe ImDrawListSplitter* DrawSplitter;
+    public ImGuiTableInstanceData InstanceDataFirst;
+    public ImVector InstanceDataExtra;
+    public ImGuiTableColumnSortSpecs SortSpecsSingle;
+    public ImVector SortSpecsMulti;
+    public ImGuiTableSortSpecs SortSpecs;
+    public System.SByte SortSpecsCount;
+    public System.SByte ColumnsEnabledCount;
+    public System.SByte ColumnsEnabledFixedCount;
+    public System.SByte DeclColumnsCount;
+    public System.SByte HoveredColumnBody;
+    public System.SByte HoveredColumnBorder;
+    public System.SByte AutoFitSingleColumn;
+    public System.SByte ResizedColumn;
+    public System.SByte LastResizedColumn;
+    public System.SByte HeldHeaderColumn;
+    public System.SByte ReorderColumn;
+    public System.SByte ReorderColumnDir;
+    public System.SByte LeftMostEnabledColumn;
+    public System.SByte RightMostEnabledColumn;
+    public System.SByte LeftMostStretchedColumn;
+    public System.SByte RightMostStretchedColumn;
+    public System.SByte ContextPopupColumn;
+    public System.SByte FreezeRowsRequest;
+    public System.SByte FreezeRowsCount;
+    public System.SByte FreezeColumnsRequest;
+    public System.SByte FreezeColumnsCount;
+    public System.SByte RowCellDataCurrent;
+    public byte DummyDrawChannel;
+    public byte Bg2DrawChannelCurrent;
+    public byte Bg2DrawChannelUnfrozen;
+    public byte IsLayoutLocked;
+    public byte IsInsideRow;
+    public byte IsInitializing;
+    public byte IsSortSpecsDirty;
+    public byte IsUsingHeaders;
+    public byte IsContextPopupOpen;
+    public byte IsSettingsRequestLoad;
+    public byte IsSettingsDirty;
+    public byte IsDefaultDisplayOrder;
+    public byte IsResetAllRequest;
+    public byte IsResetDisplayOrderRequest;
+    public byte IsUnfrozenRows;
+    public byte IsDefaultSizingPolicy;
+    public byte MemoryCompacted;
+    public byte HostSkipItems;
+  }
+  public struct ImGuiTablePtr
+  {
+    public unsafe ImGuiTable* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiTableFlags Flags { get => ref __1; }
+    public System.IntPtr RawData { get => default; set { } }
+    public ref ImGuiTableTempDataPtr TempData { get => ref __2; }
+    public ref ImSpan Columns { get => ref __3; }
+    public ref ImSpan DisplayOrderToIndex { get => ref __3; }
+    public ref ImSpan RowCellData { get => ref __3; }
+    public ref ulong EnabledMaskByDisplayOrder { get => ref __4; }
+    public ref ulong EnabledMaskByIndex { get => ref __4; }
+    public ref ulong VisibleMaskByIndex { get => ref __4; }
+    public ref ulong RequestOutputMaskByIndex { get => ref __4; }
+    public ref ImGuiTableFlags SettingsLoadedFlags { get => ref __1; }
+    public ref int SettingsOffset { get => ref __5; }
+    public ref int LastFrameActive { get => ref __5; }
+    public ref int ColumnsCount { get => ref __5; }
+    public ref int CurrentRow { get => ref __5; }
+    public ref int CurrentColumn { get => ref __5; }
+    public ref short InstanceCurrent { get => ref __6; }
+    public ref short InstanceInteracted { get => ref __6; }
+    public ref float RowPosY1 { get => ref __7; }
+    public ref float RowPosY2 { get => ref __7; }
+    public ref float RowMinHeight { get => ref __7; }
+    public ref float RowTextBaseline { get => ref __7; }
+    public ref float RowIndentOffsetX { get => ref __7; }
+    public ref ImGuiTableRowFlags RowFlags { get => ref __8; }
+    public ref ImGuiTableRowFlags LastRowFlags { get => ref __8; }
+    public ref int RowBgColorCounter { get => ref __5; }
+    public RangeAccessor<uint> RowBgColor { get => default; }
+    public ref uint BorderColorStrong { get => ref __0; }
+    public ref uint BorderColorLight { get => ref __0; }
+    public ref float BorderX1 { get => ref __7; }
+    public ref float BorderX2 { get => ref __7; }
+    public ref float HostIndentX { get => ref __7; }
+    public ref float MinColumnWidth { get => ref __7; }
+    public ref float OuterPaddingX { get => ref __7; }
+    public ref float CellPaddingX { get => ref __7; }
+    public ref float CellPaddingY { get => ref __7; }
+    public ref float CellSpacingX1 { get => ref __7; }
+    public ref float CellSpacingX2 { get => ref __7; }
+    public ref float InnerWidth { get => ref __7; }
+    public ref float ColumnsGivenWidth { get => ref __7; }
+    public ref float ColumnsAutoFitWidth { get => ref __7; }
+    public ref float ColumnsStretchSumWeights { get => ref __7; }
+    public ref float ResizedColumnNextWidth { get => ref __7; }
+    public ref float ResizeLockMinContentsX2 { get => ref __7; }
+    public ref float RefScale { get => ref __7; }
+    public ref UnityEngine.Rect OuterRect { get => ref __9; }
+    public ref UnityEngine.Rect InnerRect { get => ref __9; }
+    public ref UnityEngine.Rect WorkRect { get => ref __9; }
+    public ref UnityEngine.Rect InnerClipRect { get => ref __9; }
+    public ref UnityEngine.Rect BgClipRect { get => ref __9; }
+    public ref UnityEngine.Rect Bg0ClipRectForDrawCmd { get => ref __9; }
+    public ref UnityEngine.Rect Bg2ClipRectForDrawCmd { get => ref __9; }
+    public ref UnityEngine.Rect HostClipRect { get => ref __9; }
+    public ref UnityEngine.Rect HostBackupInnerClipRect { get => ref __9; }
+    public ref ImGuiWindowPtr OuterWindow { get => ref __10; }
+    public ref ImGuiWindowPtr InnerWindow { get => ref __10; }
+    public ref ImGuiTextBuffer ColumnsNames { get => ref __11; }
+    public ref ImDrawListSplitterPtr DrawSplitter { get => ref __12; }
+    public ref ImGuiTableInstanceData InstanceDataFirst { get => ref __13; }
+    public ImPtrVector<ImGuiTableInstanceDataPtr> InstanceDataExtra { get => default; }
+    public ref ImGuiTableColumnSortSpecs SortSpecsSingle { get => ref __14; }
+    public ImPtrVector<ImGuiTableColumnSortSpecsPtr> SortSpecsMulti { get => default; }
+    public ref ImGuiTableSortSpecs SortSpecs { get => ref __15; }
+    public ref System.SByte SortSpecsCount { get => ref __16; }
+    public ref System.SByte ColumnsEnabledCount { get => ref __16; }
+    public ref System.SByte ColumnsEnabledFixedCount { get => ref __16; }
+    public ref System.SByte DeclColumnsCount { get => ref __16; }
+    public ref System.SByte HoveredColumnBody { get => ref __16; }
+    public ref System.SByte HoveredColumnBorder { get => ref __16; }
+    public ref System.SByte AutoFitSingleColumn { get => ref __16; }
+    public ref System.SByte ResizedColumn { get => ref __16; }
+    public ref System.SByte LastResizedColumn { get => ref __16; }
+    public ref System.SByte HeldHeaderColumn { get => ref __16; }
+    public ref System.SByte ReorderColumn { get => ref __16; }
+    public ref System.SByte ReorderColumnDir { get => ref __16; }
+    public ref System.SByte LeftMostEnabledColumn { get => ref __16; }
+    public ref System.SByte RightMostEnabledColumn { get => ref __16; }
+    public ref System.SByte LeftMostStretchedColumn { get => ref __16; }
+    public ref System.SByte RightMostStretchedColumn { get => ref __16; }
+    public ref System.SByte ContextPopupColumn { get => ref __16; }
+    public ref System.SByte FreezeRowsRequest { get => ref __16; }
+    public ref System.SByte FreezeRowsCount { get => ref __16; }
+    public ref System.SByte FreezeColumnsRequest { get => ref __16; }
+    public ref System.SByte FreezeColumnsCount { get => ref __16; }
+    public ref System.SByte RowCellDataCurrent { get => ref __16; }
+    public ref byte DummyDrawChannel { get => ref __17; }
+    public ref byte Bg2DrawChannelCurrent { get => ref __17; }
+    public ref byte Bg2DrawChannelUnfrozen { get => ref __17; }
+    public ref bool IsLayoutLocked { get => ref __18; }
+    public ref bool IsInsideRow { get => ref __18; }
+    public ref bool IsInitializing { get => ref __18; }
+    public ref bool IsSortSpecsDirty { get => ref __18; }
+    public ref bool IsUsingHeaders { get => ref __18; }
+    public ref bool IsContextPopupOpen { get => ref __18; }
+    public ref bool IsSettingsRequestLoad { get => ref __18; }
+    public ref bool IsSettingsDirty { get => ref __18; }
+    public ref bool IsDefaultDisplayOrder { get => ref __18; }
+    public ref bool IsResetAllRequest { get => ref __18; }
+    public ref bool IsResetDisplayOrderRequest { get => ref __18; }
+    public ref bool IsUnfrozenRows { get => ref __18; }
+    public ref bool IsDefaultSizingPolicy { get => ref __18; }
+    public ref bool MemoryCompacted { get => ref __18; }
+    public ref bool HostSkipItems { get => ref __18; }
+    public void ImGuiTable_destroy() { }
+    internal static uint __0;
+    internal static ImGuiTableFlags __1;
+    internal static ImGuiTableTempDataPtr __2;
+    internal static ImSpan __3;
+    internal static ulong __4;
+    internal static int __5;
+    internal static short __6;
+    internal static float __7;
+    internal static ImGuiTableRowFlags __8;
+    internal static UnityEngine.Rect __9;
+    internal static ImGuiWindowPtr __10;
+    internal static ImGuiTextBuffer __11;
+    internal static ImDrawListSplitterPtr __12;
+    internal static ImGuiTableInstanceData __13;
+    internal static ImGuiTableColumnSortSpecs __14;
+    internal static ImGuiTableSortSpecs __15;
+    internal static System.SByte __16;
+    internal static byte __17;
+    internal static bool __18;
+  }
+  public enum ImGuiTableBgTarget
+  {
+    None = 0,
+    RowBg0 = 1,
+    RowBg1 = 2,
+    CellBg = 3,
+  }
+  public struct ImGuiTableCellData
+  {
+    public uint BgColor;
+    public System.SByte Column;
+  }
+  public struct ImGuiTableCellDataPtr
+  {
+    public unsafe ImGuiTableCellData* NativePtr { get => default; }
+    public ref uint BgColor { get => ref __0; }
+    public ref System.SByte Column { get => ref __1; }
+    internal static uint __0;
+    internal static System.SByte __1;
+  }
+  public struct ImGuiTableColumn
+  {
+    public ImGuiTableColumnFlags Flags;
+    public float WidthGiven;
+    public float MinX;
+    public float MaxX;
+    public float WidthRequest;
+    public float WidthAuto;
+    public float StretchWeight;
+    public float InitStretchWeightOrWidth;
+    public UnityEngine.Rect ClipRect;
+    public uint UserID;
+    public float WorkMinX;
+    public float WorkMaxX;
+    public float ItemWidth;
+    public float ContentMaxXFrozen;
+    public float ContentMaxXUnfrozen;
+    public float ContentMaxXHeadersUsed;
+    public float ContentMaxXHeadersIdeal;
+    public short NameOffset;
+    public System.SByte DisplayOrder;
+    public System.SByte IndexWithinEnabledSet;
+    public System.SByte PrevEnabledColumn;
+    public System.SByte NextEnabledColumn;
+    public System.SByte SortOrder;
+    public byte DrawChannelCurrent;
+    public byte DrawChannelFrozen;
+    public byte DrawChannelUnfrozen;
+    public byte IsEnabled;
+    public byte IsUserEnabled;
+    public byte IsUserEnabledNextFrame;
+    public byte IsVisibleX;
+    public byte IsVisibleY;
+    public byte IsRequestOutput;
+    public byte IsSkipItems;
+    public byte IsPreserveWidthAuto;
+    public System.SByte NavLayerCurrent;
+    public byte AutoFitQueue;
+    public byte CannotSkipItemsQueue;
+    public byte SortDirection;
+    public byte SortDirectionsAvailCount;
+    public byte SortDirectionsAvailMask;
+    public byte SortDirectionsAvailList;
+  }
+  public struct ImGuiTableColumnPtr
+  {
+    public unsafe ImGuiTableColumn* NativePtr { get => default; }
+    public ref ImGuiTableColumnFlags Flags { get => ref __0; }
+    public ref float WidthGiven { get => ref __1; }
+    public ref float MinX { get => ref __1; }
+    public ref float MaxX { get => ref __1; }
+    public ref float WidthRequest { get => ref __1; }
+    public ref float WidthAuto { get => ref __1; }
+    public ref float StretchWeight { get => ref __1; }
+    public ref float InitStretchWeightOrWidth { get => ref __1; }
+    public ref UnityEngine.Rect ClipRect { get => ref __2; }
+    public ref uint UserID { get => ref __3; }
+    public ref float WorkMinX { get => ref __1; }
+    public ref float WorkMaxX { get => ref __1; }
+    public ref float ItemWidth { get => ref __1; }
+    public ref float ContentMaxXFrozen { get => ref __1; }
+    public ref float ContentMaxXUnfrozen { get => ref __1; }
+    public ref float ContentMaxXHeadersUsed { get => ref __1; }
+    public ref float ContentMaxXHeadersIdeal { get => ref __1; }
+    public ref short NameOffset { get => ref __4; }
+    public ref System.SByte DisplayOrder { get => ref __5; }
+    public ref System.SByte IndexWithinEnabledSet { get => ref __5; }
+    public ref System.SByte PrevEnabledColumn { get => ref __5; }
+    public ref System.SByte NextEnabledColumn { get => ref __5; }
+    public ref System.SByte SortOrder { get => ref __5; }
+    public ref byte DrawChannelCurrent { get => ref __6; }
+    public ref byte DrawChannelFrozen { get => ref __6; }
+    public ref byte DrawChannelUnfrozen { get => ref __6; }
+    public ref bool IsEnabled { get => ref __7; }
+    public ref bool IsUserEnabled { get => ref __7; }
+    public ref bool IsUserEnabledNextFrame { get => ref __7; }
+    public ref bool IsVisibleX { get => ref __7; }
+    public ref bool IsVisibleY { get => ref __7; }
+    public ref bool IsRequestOutput { get => ref __7; }
+    public ref bool IsSkipItems { get => ref __7; }
+    public ref bool IsPreserveWidthAuto { get => ref __7; }
+    public ref System.SByte NavLayerCurrent { get => ref __5; }
+    public ref byte AutoFitQueue { get => ref __6; }
+    public ref byte CannotSkipItemsQueue { get => ref __6; }
+    public ref byte SortDirection { get => ref __6; }
+    public ref byte SortDirectionsAvailCount { get => ref __6; }
+    public ref byte SortDirectionsAvailMask { get => ref __6; }
+    public ref byte SortDirectionsAvailList { get => ref __6; }
+    public void ImGuiTableColumn_destroy() { }
+    internal static ImGuiTableColumnFlags __0;
+    internal static float __1;
+    internal static UnityEngine.Rect __2;
+    internal static uint __3;
+    internal static short __4;
+    internal static System.SByte __5;
+    internal static byte __6;
+    internal static bool __7;
+  }
+  public enum ImGuiTableColumnFlags
+  {
+    None = 0,
+    Disabled = 1,
+    DefaultHide = 2,
+    DefaultSort = 4,
+    WidthStretch = 8,
+    WidthFixed = 16,
+    WidthMask_ = 24,
+    NoResize = 32,
+    NoReorder = 64,
+    NoHide = 128,
+    NoClip = 256,
+    NoSort = 512,
+    NoSortAscending = 1024,
+    NoSortDescending = 2048,
+    NoHeaderLabel = 4096,
+    NoHeaderWidth = 8192,
+    PreferSortAscending = 16384,
+    PreferSortDescending = 32768,
+    IndentEnable = 65536,
+    IndentDisable = 131072,
+    IndentMask_ = 196608,
+    IsEnabled = 16777216,
+    IsVisible = 33554432,
+    IsSorted = 67108864,
+    IsHovered = 134217728,
+    StatusMask_ = 251658240,
+    NoDirectResize_ = 1073741824,
+  }
+  public struct ImGuiTableColumnSettings
+  {
+    public float WidthOrWeight;
+    public uint UserID;
+    public System.SByte Index;
+    public System.SByte DisplayOrder;
+    public System.SByte SortOrder;
+    public byte SortDirection;
+    public byte IsEnabled;
+    public byte IsStretch;
+  }
+  public struct ImGuiTableColumnSettingsPtr
+  {
+    public unsafe ImGuiTableColumnSettings* NativePtr { get => default; }
+    public ref float WidthOrWeight { get => ref __0; }
+    public ref uint UserID { get => ref __1; }
+    public ref System.SByte Index { get => ref __2; }
+    public ref System.SByte DisplayOrder { get => ref __2; }
+    public ref System.SByte SortOrder { get => ref __2; }
+    public ref byte SortDirection { get => ref __3; }
+    public ref byte IsEnabled { get => ref __3; }
+    public ref byte IsStretch { get => ref __3; }
+    public void ImGuiTableColumnSettings_destroy() { }
+    internal static float __0;
+    internal static uint __1;
+    internal static System.SByte __2;
+    internal static byte __3;
+  }
+  public struct ImGuiTableColumnSortSpecs
+  {
+    public uint ColumnUserID;
+    public short ColumnIndex;
+    public short SortOrder;
+    public ImGuiSortDirection SortDirection;
+  }
+  public struct ImGuiTableColumnSortSpecsPtr
+  {
+    public unsafe ImGuiTableColumnSortSpecs* NativePtr { get => default; }
+    public ref uint ColumnUserID { get => ref __0; }
+    public ref short ColumnIndex { get => ref __1; }
+    public ref short SortOrder { get => ref __1; }
+    public ref ImGuiSortDirection SortDirection { get => ref __2; }
+    public void ImGuiTableColumnSortSpecs_destroy() { }
+    internal static uint __0;
+    internal static short __1;
+    internal static ImGuiSortDirection __2;
+  }
+  public enum ImGuiTableFlags
+  {
+    None = 0,
+    Resizable = 1,
+    Reorderable = 2,
+    Hideable = 4,
+    Sortable = 8,
+    NoSavedSettings = 16,
+    ContextMenuInBody = 32,
+    RowBg = 64,
+    BordersInnerH = 128,
+    BordersOuterH = 256,
+    BordersH = 384,
+    BordersInnerV = 512,
+    BordersInner = 640,
+    BordersOuterV = 1024,
+    BordersOuter = 1280,
+    BordersV = 1536,
+    Borders = 1920,
+    NoBordersInBody = 2048,
+    NoBordersInBodyUntilResize = 4096,
+    SizingFixedFit = 8192,
+    SizingFixedSame = 16384,
+    SizingStretchProp = 24576,
+    SizingStretchSame = 32768,
+    SizingMask_ = 57344,
+    NoHostExtendX = 65536,
+    NoHostExtendY = 131072,
+    NoKeepColumnsVisible = 262144,
+    PreciseWidths = 524288,
+    NoClip = 1048576,
+    PadOuterX = 2097152,
+    NoPadOuterX = 4194304,
+    NoPadInnerX = 8388608,
+    ScrollX = 16777216,
+    ScrollY = 33554432,
+    SortMulti = 67108864,
+    SortTristate = 134217728,
+  }
+  public struct ImGuiTableInstanceData
+  {
+    public float LastOuterHeight;
+    public float LastFirstRowHeight;
+  }
+  public struct ImGuiTableInstanceDataPtr
+  {
+    public unsafe ImGuiTableInstanceData* NativePtr { get => default; }
+    public ref float LastOuterHeight { get => ref __0; }
+    public ref float LastFirstRowHeight { get => ref __0; }
+    public void ImGuiTableInstanceData_destroy() { }
+    internal static float __0;
+  }
+  public enum ImGuiTableRowFlags
+  {
+    None = 0,
+    Headers = 1,
+  }
+  public struct ImGuiTableSettings
+  {
+    public uint ID;
+    public ImGuiTableFlags SaveFlags;
+    public float RefScale;
+    public System.SByte ColumnsCount;
+    public System.SByte ColumnsCountMax;
+    public byte WantApply;
+  }
+  public struct ImGuiTableSettingsPtr
+  {
+    public unsafe ImGuiTableSettings* NativePtr { get => default; }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiTableFlags SaveFlags { get => ref __1; }
+    public ref float RefScale { get => ref __2; }
+    public ref System.SByte ColumnsCount { get => ref __3; }
+    public ref System.SByte ColumnsCountMax { get => ref __3; }
+    public ref bool WantApply { get => ref __4; }
+    public ImGuiTableColumnSettingsPtr GetColumnSettings() { return default; }
+    public void ImGuiTableSettings_destroy() { }
+    internal static uint __0;
+    internal static ImGuiTableFlags __1;
+    internal static float __2;
+    internal static System.SByte __3;
+    internal static bool __4;
+  }
+  public struct ImGuiTableSortSpecs
+  {
+    public unsafe ImGuiTableColumnSortSpecs* Specs;
+    public int SpecsCount;
+    public byte SpecsDirty;
+  }
+  public struct ImGuiTableSortSpecsPtr
+  {
+    public unsafe ImGuiTableSortSpecs* NativePtr { get => default; }
+    public ref ImGuiTableColumnSortSpecsPtr Specs { get => ref __0; }
+    public ref int SpecsCount { get => ref __1; }
+    public ref bool SpecsDirty { get => ref __2; }
+    public void ImGuiTableSortSpecs_destroy() { }
+    internal static ImGuiTableColumnSortSpecsPtr __0;
+    internal static int __1;
+    internal static bool __2;
+  }
+  public struct ImGuiTableTempData
+  {
+    public int TableIndex;
+    public float LastTimeActive;
+    public UnityEngine.Vector2 UserOuterSize;
+    public ImDrawListSplitter DrawSplitter;
+    public UnityEngine.Rect HostBackupWorkRect;
+    public UnityEngine.Rect HostBackupParentWorkRect;
+    public UnityEngine.Vector2 HostBackupPrevLineSize;
+    public UnityEngine.Vector2 HostBackupCurrLineSize;
+    public UnityEngine.Vector2 HostBackupCursorMaxPos;
+    public ImVec1 HostBackupColumnsOffset;
+    public float HostBackupItemWidth;
+    public int HostBackupItemWidthStackSize;
+  }
+  public struct ImGuiTableTempDataPtr
+  {
+    public unsafe ImGuiTableTempData* NativePtr { get => default; }
+    public ref int TableIndex { get => ref __0; }
+    public ref float LastTimeActive { get => ref __1; }
+    public ref UnityEngine.Vector2 UserOuterSize { get => ref __2; }
+    public ref ImDrawListSplitter DrawSplitter { get => ref __3; }
+    public ref UnityEngine.Rect HostBackupWorkRect { get => ref __4; }
+    public ref UnityEngine.Rect HostBackupParentWorkRect { get => ref __4; }
+    public ref UnityEngine.Vector2 HostBackupPrevLineSize { get => ref __2; }
+    public ref UnityEngine.Vector2 HostBackupCurrLineSize { get => ref __2; }
+    public ref UnityEngine.Vector2 HostBackupCursorMaxPos { get => ref __2; }
+    public ref ImVec1 HostBackupColumnsOffset { get => ref __5; }
+    public ref float HostBackupItemWidth { get => ref __1; }
+    public ref int HostBackupItemWidthStackSize { get => ref __0; }
+    public void ImGuiTableTempData_destroy() { }
+    internal static int __0;
+    internal static float __1;
+    internal static UnityEngine.Vector2 __2;
+    internal static ImDrawListSplitter __3;
+    internal static UnityEngine.Rect __4;
+    internal static ImVec1 __5;
+  }
+  public struct ImGuiTextBuffer
+  {
+    public ImVector Buf;
+  }
+  public struct ImGuiTextBufferPtr
+  {
+    public unsafe ImGuiTextBuffer* NativePtr { get => default; }
+    public ImVector<byte> Buf { get => default; }
+    public void append(string str) { }
+    public void append(string str, string str_end) { }
+    public void appendf(string fmt) { }
+    public void appendfv(string fmt) { }
+    public string begin() { return default; }
+    public string c_str() { return default; }
+    public void clear() { }
+    public void ImGuiTextBuffer_destroy() { }
+    public bool empty() { return default; }
+    public string end() { return default; }
+    public void reserve(int capacity) { }
+    public int size() { return default; }
+  }
+  public struct ImGuiTextFilter
+  {
+    public byte InputBuf_0;
+    public byte InputBuf_1;
+    public byte InputBuf_2;
+    public byte InputBuf_3;
+    public byte InputBuf_4;
+    public byte InputBuf_5;
+    public byte InputBuf_6;
+    public byte InputBuf_7;
+    public byte InputBuf_8;
+    public byte InputBuf_9;
+    public byte InputBuf_10;
+    public byte InputBuf_11;
+    public byte InputBuf_12;
+    public byte InputBuf_13;
+    public byte InputBuf_14;
+    public byte InputBuf_15;
+    public byte InputBuf_16;
+    public byte InputBuf_17;
+    public byte InputBuf_18;
+    public byte InputBuf_19;
+    public byte InputBuf_20;
+    public byte InputBuf_21;
+    public byte InputBuf_22;
+    public byte InputBuf_23;
+    public byte InputBuf_24;
+    public byte InputBuf_25;
+    public byte InputBuf_26;
+    public byte InputBuf_27;
+    public byte InputBuf_28;
+    public byte InputBuf_29;
+    public byte InputBuf_30;
+    public byte InputBuf_31;
+    public byte InputBuf_32;
+    public byte InputBuf_33;
+    public byte InputBuf_34;
+    public byte InputBuf_35;
+    public byte InputBuf_36;
+    public byte InputBuf_37;
+    public byte InputBuf_38;
+    public byte InputBuf_39;
+    public byte InputBuf_40;
+    public byte InputBuf_41;
+    public byte InputBuf_42;
+    public byte InputBuf_43;
+    public byte InputBuf_44;
+    public byte InputBuf_45;
+    public byte InputBuf_46;
+    public byte InputBuf_47;
+    public byte InputBuf_48;
+    public byte InputBuf_49;
+    public byte InputBuf_50;
+    public byte InputBuf_51;
+    public byte InputBuf_52;
+    public byte InputBuf_53;
+    public byte InputBuf_54;
+    public byte InputBuf_55;
+    public byte InputBuf_56;
+    public byte InputBuf_57;
+    public byte InputBuf_58;
+    public byte InputBuf_59;
+    public byte InputBuf_60;
+    public byte InputBuf_61;
+    public byte InputBuf_62;
+    public byte InputBuf_63;
+    public byte InputBuf_64;
+    public byte InputBuf_65;
+    public byte InputBuf_66;
+    public byte InputBuf_67;
+    public byte InputBuf_68;
+    public byte InputBuf_69;
+    public byte InputBuf_70;
+    public byte InputBuf_71;
+    public byte InputBuf_72;
+    public byte InputBuf_73;
+    public byte InputBuf_74;
+    public byte InputBuf_75;
+    public byte InputBuf_76;
+    public byte InputBuf_77;
+    public byte InputBuf_78;
+    public byte InputBuf_79;
+    public byte InputBuf_80;
+    public byte InputBuf_81;
+    public byte InputBuf_82;
+    public byte InputBuf_83;
+    public byte InputBuf_84;
+    public byte InputBuf_85;
+    public byte InputBuf_86;
+    public byte InputBuf_87;
+    public byte InputBuf_88;
+    public byte InputBuf_89;
+    public byte InputBuf_90;
+    public byte InputBuf_91;
+    public byte InputBuf_92;
+    public byte InputBuf_93;
+    public byte InputBuf_94;
+    public byte InputBuf_95;
+    public byte InputBuf_96;
+    public byte InputBuf_97;
+    public byte InputBuf_98;
+    public byte InputBuf_99;
+    public byte InputBuf_100;
+    public byte InputBuf_101;
+    public byte InputBuf_102;
+    public byte InputBuf_103;
+    public byte InputBuf_104;
+    public byte InputBuf_105;
+    public byte InputBuf_106;
+    public byte InputBuf_107;
+    public byte InputBuf_108;
+    public byte InputBuf_109;
+    public byte InputBuf_110;
+    public byte InputBuf_111;
+    public byte InputBuf_112;
+    public byte InputBuf_113;
+    public byte InputBuf_114;
+    public byte InputBuf_115;
+    public byte InputBuf_116;
+    public byte InputBuf_117;
+    public byte InputBuf_118;
+    public byte InputBuf_119;
+    public byte InputBuf_120;
+    public byte InputBuf_121;
+    public byte InputBuf_122;
+    public byte InputBuf_123;
+    public byte InputBuf_124;
+    public byte InputBuf_125;
+    public byte InputBuf_126;
+    public byte InputBuf_127;
+    public byte InputBuf_128;
+    public byte InputBuf_129;
+    public byte InputBuf_130;
+    public byte InputBuf_131;
+    public byte InputBuf_132;
+    public byte InputBuf_133;
+    public byte InputBuf_134;
+    public byte InputBuf_135;
+    public byte InputBuf_136;
+    public byte InputBuf_137;
+    public byte InputBuf_138;
+    public byte InputBuf_139;
+    public byte InputBuf_140;
+    public byte InputBuf_141;
+    public byte InputBuf_142;
+    public byte InputBuf_143;
+    public byte InputBuf_144;
+    public byte InputBuf_145;
+    public byte InputBuf_146;
+    public byte InputBuf_147;
+    public byte InputBuf_148;
+    public byte InputBuf_149;
+    public byte InputBuf_150;
+    public byte InputBuf_151;
+    public byte InputBuf_152;
+    public byte InputBuf_153;
+    public byte InputBuf_154;
+    public byte InputBuf_155;
+    public byte InputBuf_156;
+    public byte InputBuf_157;
+    public byte InputBuf_158;
+    public byte InputBuf_159;
+    public byte InputBuf_160;
+    public byte InputBuf_161;
+    public byte InputBuf_162;
+    public byte InputBuf_163;
+    public byte InputBuf_164;
+    public byte InputBuf_165;
+    public byte InputBuf_166;
+    public byte InputBuf_167;
+    public byte InputBuf_168;
+    public byte InputBuf_169;
+    public byte InputBuf_170;
+    public byte InputBuf_171;
+    public byte InputBuf_172;
+    public byte InputBuf_173;
+    public byte InputBuf_174;
+    public byte InputBuf_175;
+    public byte InputBuf_176;
+    public byte InputBuf_177;
+    public byte InputBuf_178;
+    public byte InputBuf_179;
+    public byte InputBuf_180;
+    public byte InputBuf_181;
+    public byte InputBuf_182;
+    public byte InputBuf_183;
+    public byte InputBuf_184;
+    public byte InputBuf_185;
+    public byte InputBuf_186;
+    public byte InputBuf_187;
+    public byte InputBuf_188;
+    public byte InputBuf_189;
+    public byte InputBuf_190;
+    public byte InputBuf_191;
+    public byte InputBuf_192;
+    public byte InputBuf_193;
+    public byte InputBuf_194;
+    public byte InputBuf_195;
+    public byte InputBuf_196;
+    public byte InputBuf_197;
+    public byte InputBuf_198;
+    public byte InputBuf_199;
+    public byte InputBuf_200;
+    public byte InputBuf_201;
+    public byte InputBuf_202;
+    public byte InputBuf_203;
+    public byte InputBuf_204;
+    public byte InputBuf_205;
+    public byte InputBuf_206;
+    public byte InputBuf_207;
+    public byte InputBuf_208;
+    public byte InputBuf_209;
+    public byte InputBuf_210;
+    public byte InputBuf_211;
+    public byte InputBuf_212;
+    public byte InputBuf_213;
+    public byte InputBuf_214;
+    public byte InputBuf_215;
+    public byte InputBuf_216;
+    public byte InputBuf_217;
+    public byte InputBuf_218;
+    public byte InputBuf_219;
+    public byte InputBuf_220;
+    public byte InputBuf_221;
+    public byte InputBuf_222;
+    public byte InputBuf_223;
+    public byte InputBuf_224;
+    public byte InputBuf_225;
+    public byte InputBuf_226;
+    public byte InputBuf_227;
+    public byte InputBuf_228;
+    public byte InputBuf_229;
+    public byte InputBuf_230;
+    public byte InputBuf_231;
+    public byte InputBuf_232;
+    public byte InputBuf_233;
+    public byte InputBuf_234;
+    public byte InputBuf_235;
+    public byte InputBuf_236;
+    public byte InputBuf_237;
+    public byte InputBuf_238;
+    public byte InputBuf_239;
+    public byte InputBuf_240;
+    public byte InputBuf_241;
+    public byte InputBuf_242;
+    public byte InputBuf_243;
+    public byte InputBuf_244;
+    public byte InputBuf_245;
+    public byte InputBuf_246;
+    public byte InputBuf_247;
+    public byte InputBuf_248;
+    public byte InputBuf_249;
+    public byte InputBuf_250;
+    public byte InputBuf_251;
+    public byte InputBuf_252;
+    public byte InputBuf_253;
+    public byte InputBuf_254;
+    public byte InputBuf_255;
+    public ImVector Filters;
+    public int CountGrep;
+  }
+  public struct ImGuiTextFilterPtr
+  {
+    public unsafe ImGuiTextFilter* NativePtr { get => default; }
+    public RangeAccessor<byte> InputBuf { get => default; }
+    public ImPtrVector<ImGuiTextRangePtr> Filters { get => default; }
+    public ref int CountGrep { get => ref __0; }
+    public void Build() { }
+    public void Clear() { }
+    public bool Draw() { return default; }
+    public bool Draw(string label) { return default; }
+    public bool Draw(float width) { return default; }
+    public bool Draw(string label, float width) { return default; }
+    public bool IsActive() { return default; }
+    public bool PassFilter(string text) { return default; }
+    public bool PassFilter(string text, string text_end) { return default; }
+    public void ImGuiTextFilter_destroy() { }
+    internal static int __0;
+  }
+  public enum ImGuiTextFlags
+  {
+    None = 0,
+    NoWidthForLargeClippedText = 1,
+  }
+  public struct ImGuiTextRange
+  {
+    public unsafe byte* b;
+    public unsafe byte* e;
+  }
+  public struct ImGuiTextRangePtr
+  {
+    public unsafe ImGuiTextRange* NativePtr { get => default; }
+    public ref string b { get => ref __0; }
+    public ref string e { get => ref __0; }
+    public void ImGuiTextRange_destroy() { }
+    public bool empty() { return default; }
+    public void split(byte separator, ImVector @out) { }
+    internal static string __0;
+  }
+  public enum ImGuiTooltipFlags
+  {
+    None = 0,
+    OverridePreviousTooltip = 1,
+  }
+  public enum ImGuiTreeNodeFlags
+  {
+    None = 0,
+    Selected = 1,
+    Framed = 2,
+    AllowItemOverlap = 4,
+    NoTreePushOnOpen = 8,
+    NoAutoOpenOnLog = 16,
+    CollapsingHeader = 26,
+    DefaultOpen = 32,
+    OpenOnDoubleClick = 64,
+    OpenOnArrow = 128,
+    Leaf = 256,
+    Bullet = 512,
+    FramePadding = 1024,
+    SpanAvailWidth = 2048,
+    SpanFullWidth = 4096,
+    NavLeftJumpsBackHere = 8192,
+  }
+  public enum ImGuiTreeNodeFlagsPrivate
+  {
+    ClipLabelForTrailingButton = 1048576,
+  }
+  public struct ImGuiViewport
+  {
+    public ImGuiViewportFlags Flags;
+    public UnityEngine.Vector2 Pos;
+    public UnityEngine.Vector2 Size;
+    public UnityEngine.Vector2 WorkPos;
+    public UnityEngine.Vector2 WorkSize;
+    public System.IntPtr PlatformHandleRaw;
+  }
+  public struct ImGuiViewportPtr
+  {
+    public unsafe ImGuiViewport* NativePtr { get => default; }
+    public ref ImGuiViewportFlags Flags { get => ref __0; }
+    public ref UnityEngine.Vector2 Pos { get => ref __1; }
+    public ref UnityEngine.Vector2 Size { get => ref __1; }
+    public ref UnityEngine.Vector2 WorkPos { get => ref __1; }
+    public ref UnityEngine.Vector2 WorkSize { get => ref __1; }
+    public System.IntPtr PlatformHandleRaw { get => default; set { } }
+    public UnityEngine.Vector2 GetCenter() { return default; }
+    public UnityEngine.Vector2 GetWorkCenter() { return default; }
+    public void ImGuiViewport_destroy() { }
+    internal static ImGuiViewportFlags __0;
+    internal static UnityEngine.Vector2 __1;
+  }
+  public enum ImGuiViewportFlags
+  {
+    None = 0,
+    IsPlatformWindow = 1,
+    IsPlatformMonitor = 2,
+    OwnedByApp = 4,
+  }
+  public struct ImGuiViewportP
+  {
+    public ImGuiViewport _ImGuiViewport;
+    public unsafe fixed int DrawListsLastFrame[2];
+    public unsafe ImDrawList* DrawLists_0;
+    public unsafe ImDrawList* DrawLists_1;
+    public ImDrawData DrawDataP;
+    public ImDrawDataBuilder DrawDataBuilder;
+    public UnityEngine.Vector2 WorkOffsetMin;
+    public UnityEngine.Vector2 WorkOffsetMax;
+    public UnityEngine.Vector2 BuildWorkOffsetMin;
+    public UnityEngine.Vector2 BuildWorkOffsetMax;
+  }
+  public struct ImGuiViewportPPtr
+  {
+    public unsafe ImGuiViewportP* NativePtr { get => default; }
+    public ref ImGuiViewport _ImGuiViewport { get => ref __0; }
+    public RangeAccessor<int> DrawListsLastFrame { get => default; }
+    public RangeAccessor<ImDrawListPtr> DrawLists { get => default; }
+    public ref ImDrawData DrawDataP { get => ref __1; }
+    public ref ImDrawDataBuilder DrawDataBuilder { get => ref __2; }
+    public ref UnityEngine.Vector2 WorkOffsetMin { get => ref __3; }
+    public ref UnityEngine.Vector2 WorkOffsetMax { get => ref __3; }
+    public ref UnityEngine.Vector2 BuildWorkOffsetMin { get => ref __3; }
+    public ref UnityEngine.Vector2 BuildWorkOffsetMax { get => ref __3; }
+    public UnityEngine.Vector2 CalcWorkRectPos(UnityEngine.Vector2 off_min) { return default; }
+    public UnityEngine.Vector2 CalcWorkRectSize(UnityEngine.Vector2 off_min, UnityEngine.Vector2 off_max) { return default; }
+    public UnityEngine.Rect GetBuildWorkRect() { return default; }
+    public UnityEngine.Rect GetMainRect() { return default; }
+    public UnityEngine.Rect GetWorkRect() { return default; }
+    public void UpdateWorkRect() { }
+    public void ImGuiViewportP_destroy() { }
+    internal static ImGuiViewport __0;
+    internal static ImDrawData __1;
+    internal static ImDrawDataBuilder __2;
+    internal static UnityEngine.Vector2 __3;
+  }
+  public struct ImGuiWindow
+  {
+    public unsafe byte* Name;
+    public uint ID;
+    public ImGuiWindowFlags Flags;
+    public unsafe ImGuiViewportP* Viewport;
+    public UnityEngine.Vector2 Pos;
+    public UnityEngine.Vector2 Size;
+    public UnityEngine.Vector2 SizeFull;
+    public UnityEngine.Vector2 ContentSize;
+    public UnityEngine.Vector2 ContentSizeIdeal;
+    public UnityEngine.Vector2 ContentSizeExplicit;
+    public UnityEngine.Vector2 WindowPadding;
+    public float WindowRounding;
+    public float WindowBorderSize;
+    public int NameBufLen;
+    public uint MoveId;
+    public uint ChildId;
+    public UnityEngine.Vector2 Scroll;
+    public UnityEngine.Vector2 ScrollMax;
+    public UnityEngine.Vector2 ScrollTarget;
+    public UnityEngine.Vector2 ScrollTargetCenterRatio;
+    public UnityEngine.Vector2 ScrollTargetEdgeSnapDist;
+    public UnityEngine.Vector2 ScrollbarSizes;
+    public byte ScrollbarX;
+    public byte ScrollbarY;
+    public byte Active;
+    public byte WasActive;
+    public byte WriteAccessed;
+    public byte Collapsed;
+    public byte WantCollapseToggle;
+    public byte SkipItems;
+    public byte Appearing;
+    public byte Hidden;
+    public byte IsFallbackWindow;
+    public byte IsExplicitChild;
+    public byte HasCloseButton;
+    public System.SByte ResizeBorderHeld;
+    public short BeginCount;
+    public short BeginOrderWithinParent;
+    public short BeginOrderWithinContext;
+    public short FocusOrder;
+    public uint PopupId;
+    public System.SByte AutoFitFramesX;
+    public System.SByte AutoFitFramesY;
+    public System.SByte AutoFitChildAxises;
+    public byte AutoFitOnlyGrows;
+    public ImGuiDir AutoPosLastDirection;
+    public System.SByte HiddenFramesCanSkipItems;
+    public System.SByte HiddenFramesCannotSkipItems;
+    public System.SByte HiddenFramesForRenderOnly;
+    public System.SByte DisableInputsFrames;
+    public ImGuiCond SetWindowPosAllowFlags;
+    public ImGuiCond SetWindowSizeAllowFlags;
+    public ImGuiCond SetWindowCollapsedAllowFlags;
+    public UnityEngine.Vector2 SetWindowPosVal;
+    public UnityEngine.Vector2 SetWindowPosPivot;
+    public ImVector IDStack;
+    public ImGuiWindowTempData DC;
+    public UnityEngine.Rect OuterRectClipped;
+    public UnityEngine.Rect InnerRect;
+    public UnityEngine.Rect InnerClipRect;
+    public UnityEngine.Rect WorkRect;
+    public UnityEngine.Rect ParentWorkRect;
+    public UnityEngine.Rect ClipRect;
+    public UnityEngine.Rect ContentRegionRect;
+    public Vector2ih HitTestHoleSize;
+    public Vector2ih HitTestHoleOffset;
+    public int LastFrameActive;
+    public float LastTimeActive;
+    public float ItemWidthDefault;
+    public ImGuiStorage StateStorage;
+    public ImVector ColumnsStorage;
+    public float FontWindowScale;
+    public int SettingsOffset;
+    public unsafe ImDrawList* DrawList;
+    public ImDrawList DrawListInst;
+    public unsafe ImGuiWindow* ParentWindow;
+    public unsafe ImGuiWindow* ParentWindowInBeginStack;
+    public unsafe ImGuiWindow* RootWindow;
+    public unsafe ImGuiWindow* RootWindowPopupTree;
+    public unsafe ImGuiWindow* RootWindowForTitleBarHighlight;
+    public unsafe ImGuiWindow* RootWindowForNav;
+    public unsafe ImGuiWindow* NavLastChildNavWindow;
+    public unsafe fixed uint NavLastIds[2];
+    public UnityEngine.Rect NavRectRel_0;
+    public UnityEngine.Rect NavRectRel_1;
+    public int MemoryDrawListIdxCapacity;
+    public int MemoryDrawListVtxCapacity;
+    public byte MemoryCompacted;
+  }
+  public struct ImGuiWindowPtr
+  {
+    public unsafe ImGuiWindow* NativePtr { get => default; }
+    public System.IntPtr Name { get => default; set { } }
+    public ref uint ID { get => ref __0; }
+    public ref ImGuiWindowFlags Flags { get => ref __1; }
+    public ref ImGuiViewportPPtr Viewport { get => ref __2; }
+    public ref UnityEngine.Vector2 Pos { get => ref __3; }
+    public ref UnityEngine.Vector2 Size { get => ref __3; }
+    public ref UnityEngine.Vector2 SizeFull { get => ref __3; }
+    public ref UnityEngine.Vector2 ContentSize { get => ref __3; }
+    public ref UnityEngine.Vector2 ContentSizeIdeal { get => ref __3; }
+    public ref UnityEngine.Vector2 ContentSizeExplicit { get => ref __3; }
+    public ref UnityEngine.Vector2 WindowPadding { get => ref __3; }
+    public ref float WindowRounding { get => ref __4; }
+    public ref float WindowBorderSize { get => ref __4; }
+    public ref int NameBufLen { get => ref __5; }
+    public ref uint MoveId { get => ref __0; }
+    public ref uint ChildId { get => ref __0; }
+    public ref UnityEngine.Vector2 Scroll { get => ref __3; }
+    public ref UnityEngine.Vector2 ScrollMax { get => ref __3; }
+    public ref UnityEngine.Vector2 ScrollTarget { get => ref __3; }
+    public ref UnityEngine.Vector2 ScrollTargetCenterRatio { get => ref __3; }
+    public ref UnityEngine.Vector2 ScrollTargetEdgeSnapDist { get => ref __3; }
+    public ref UnityEngine.Vector2 ScrollbarSizes { get => ref __3; }
+    public ref bool ScrollbarX { get => ref __6; }
+    public ref bool ScrollbarY { get => ref __6; }
+    public ref bool Active { get => ref __6; }
+    public ref bool WasActive { get => ref __6; }
+    public ref bool WriteAccessed { get => ref __6; }
+    public ref bool Collapsed { get => ref __6; }
+    public ref bool WantCollapseToggle { get => ref __6; }
+    public ref bool SkipItems { get => ref __6; }
+    public ref bool Appearing { get => ref __6; }
+    public ref bool Hidden { get => ref __6; }
+    public ref bool IsFallbackWindow { get => ref __6; }
+    public ref bool IsExplicitChild { get => ref __6; }
+    public ref bool HasCloseButton { get => ref __6; }
+    public ref System.SByte ResizeBorderHeld { get => ref __7; }
+    public ref short BeginCount { get => ref __8; }
+    public ref short BeginOrderWithinParent { get => ref __8; }
+    public ref short BeginOrderWithinContext { get => ref __8; }
+    public ref short FocusOrder { get => ref __8; }
+    public ref uint PopupId { get => ref __0; }
+    public ref System.SByte AutoFitFramesX { get => ref __7; }
+    public ref System.SByte AutoFitFramesY { get => ref __7; }
+    public ref System.SByte AutoFitChildAxises { get => ref __7; }
+    public ref bool AutoFitOnlyGrows { get => ref __6; }
+    public ref ImGuiDir AutoPosLastDirection { get => ref __9; }
+    public ref System.SByte HiddenFramesCanSkipItems { get => ref __7; }
+    public ref System.SByte HiddenFramesCannotSkipItems { get => ref __7; }
+    public ref System.SByte HiddenFramesForRenderOnly { get => ref __7; }
+    public ref System.SByte DisableInputsFrames { get => ref __7; }
+    public ref ImGuiCond SetWindowPosAllowFlags { get => ref __10; }
+    public ref ImGuiCond SetWindowSizeAllowFlags { get => ref __10; }
+    public ref ImGuiCond SetWindowCollapsedAllowFlags { get => ref __10; }
+    public ref UnityEngine.Vector2 SetWindowPosVal { get => ref __3; }
+    public ref UnityEngine.Vector2 SetWindowPosPivot { get => ref __3; }
+    public ImVector<uint> IDStack { get => default; }
+    public ref ImGuiWindowTempData DC { get => ref __11; }
+    public ref UnityEngine.Rect OuterRectClipped { get => ref __12; }
+    public ref UnityEngine.Rect InnerRect { get => ref __12; }
+    public ref UnityEngine.Rect InnerClipRect { get => ref __12; }
+    public ref UnityEngine.Rect WorkRect { get => ref __12; }
+    public ref UnityEngine.Rect ParentWorkRect { get => ref __12; }
+    public ref UnityEngine.Rect ClipRect { get => ref __12; }
+    public ref UnityEngine.Rect ContentRegionRect { get => ref __12; }
+    public ref Vector2ih HitTestHoleSize { get => ref __13; }
+    public ref Vector2ih HitTestHoleOffset { get => ref __13; }
+    public ref int LastFrameActive { get => ref __5; }
+    public ref float LastTimeActive { get => ref __4; }
+    public ref float ItemWidthDefault { get => ref __4; }
+    public ref ImGuiStorage StateStorage { get => ref __14; }
+    public ImPtrVector<ImGuiOldColumnsPtr> ColumnsStorage { get => default; }
+    public ref float FontWindowScale { get => ref __4; }
+    public ref int SettingsOffset { get => ref __5; }
+    public ref ImDrawListPtr DrawList { get => ref __15; }
+    public ref ImDrawList DrawListInst { get => ref __16; }
+    public ref ImGuiWindowPtr ParentWindow { get => ref __17; }
+    public ref ImGuiWindowPtr ParentWindowInBeginStack { get => ref __17; }
+    public ref ImGuiWindowPtr RootWindow { get => ref __17; }
+    public ref ImGuiWindowPtr RootWindowPopupTree { get => ref __17; }
+    public ref ImGuiWindowPtr RootWindowForTitleBarHighlight { get => ref __17; }
+    public ref ImGuiWindowPtr RootWindowForNav { get => ref __17; }
+    public ref ImGuiWindowPtr NavLastChildNavWindow { get => ref __17; }
+    public RangeAccessor<uint> NavLastIds { get => default; }
+    public RangeAccessor<UnityEngine.Rect> NavRectRel { get => default; }
+    public ref int MemoryDrawListIdxCapacity { get => ref __5; }
+    public ref int MemoryDrawListVtxCapacity { get => ref __5; }
+    public ref bool MemoryCompacted { get => ref __6; }
+    public float CalcFontSize() { return default; }
+    public uint GetID(string str) { return default; }
+    public uint GetID(string str, string str_end) { return default; }
+    public uint GetID(System.IntPtr ptr) { return default; }
+    public uint GetID(int n) { return default; }
+    public uint GetIDFromRectangle(UnityEngine.Rect r_abs) { return default; }
+    public float MenuBarHeight() { return default; }
+    public UnityEngine.Rect MenuBarRect() { return default; }
+    public UnityEngine.Rect Rect() { return default; }
+    public float TitleBarHeight() { return default; }
+    public UnityEngine.Rect TitleBarRect() { return default; }
+    public void ImGuiWindow_destroy() { }
+    internal static uint __0;
+    internal static ImGuiWindowFlags __1;
+    internal static ImGuiViewportPPtr __2;
+    internal static UnityEngine.Vector2 __3;
+    internal static float __4;
+    internal static int __5;
+    internal static bool __6;
+    internal static System.SByte __7;
+    internal static short __8;
+    internal static ImGuiDir __9;
+    internal static ImGuiCond __10;
+    internal static ImGuiWindowTempData __11;
+    internal static UnityEngine.Rect __12;
+    internal static Vector2ih __13;
+    internal static ImGuiStorage __14;
+    internal static ImDrawListPtr __15;
+    internal static ImDrawList __16;
+    internal static ImGuiWindowPtr __17;
+  }
+  public enum ImGuiWindowFlags
+  {
+    None = 0,
+    NoTitleBar = 1,
+    NoResize = 2,
+    NoMove = 4,
+    NoScrollbar = 8,
+    NoScrollWithMouse = 16,
+    NoCollapse = 32,
+    NoDecoration = 43,
+    AlwaysAutoResize = 64,
+    NoBackground = 128,
+    NoSavedSettings = 256,
+    NoMouseInputs = 512,
+    MenuBar = 1024,
+    HorizontalScrollbar = 2048,
+    NoFocusOnAppearing = 4096,
+    NoBringToFrontOnFocus = 8192,
+    AlwaysVerticalScrollbar = 16384,
+    AlwaysHorizontalScrollbar = 32768,
+    AlwaysUseWindowPadding = 65536,
+    NoNavInputs = 262144,
+    NoNavFocus = 524288,
+    NoNav = 786432,
+    NoInputs = 786944,
+    UnsavedDocument = 1048576,
+    NavFlattened = 8388608,
+    ChildWindow = 16777216,
+    Tooltip = 33554432,
+    Popup = 67108864,
+    Modal = 134217728,
+    ChildMenu = 268435456,
+  }
+  public struct ImGuiWindowTempData
+  {
+    public UnityEngine.Vector2 CursorPos;
+    public UnityEngine.Vector2 CursorPosPrevLine;
+    public UnityEngine.Vector2 CursorStartPos;
+    public UnityEngine.Vector2 CursorMaxPos;
+    public UnityEngine.Vector2 IdealMaxPos;
+    public UnityEngine.Vector2 CurrLineSize;
+    public UnityEngine.Vector2 PrevLineSize;
+    public float CurrLineTextBaseOffset;
+    public float PrevLineTextBaseOffset;
+    public byte IsSameLine;
+    public ImVec1 Indent;
+    public ImVec1 ColumnsOffset;
+    public ImVec1 GroupOffset;
+    public UnityEngine.Vector2 CursorStartPosLossyness;
+    public ImGuiNavLayer NavLayerCurrent;
+    public short NavLayersActiveMask;
+    public short NavLayersActiveMaskNext;
+    public uint NavFocusScopeIdCurrent;
+    public byte NavHideHighlightOneFrame;
+    public byte NavHasScroll;
+    public byte MenuBarAppending;
+    public UnityEngine.Vector2 MenuBarOffset;
+    public ImGuiMenuColumns MenuColumns;
+    public int TreeDepth;
+    public uint TreeJumpToParentOnPopMask;
+    public ImVector ChildWindows;
+    public unsafe ImGuiStorage* StateStorage;
+    public unsafe ImGuiOldColumns* CurrentColumns;
+    public int CurrentTableIdx;
+    public ImGuiLayoutType LayoutType;
+    public ImGuiLayoutType ParentLayoutType;
+    public float ItemWidth;
+    public float TextWrapPos;
+    public ImVector ItemWidthStack;
+    public ImVector TextWrapPosStack;
+  }
+  public struct ImGuiWindowTempDataPtr
+  {
+    public unsafe ImGuiWindowTempData* NativePtr { get => default; }
+    public ref UnityEngine.Vector2 CursorPos { get => ref __0; }
+    public ref UnityEngine.Vector2 CursorPosPrevLine { get => ref __0; }
+    public ref UnityEngine.Vector2 CursorStartPos { get => ref __0; }
+    public ref UnityEngine.Vector2 CursorMaxPos { get => ref __0; }
+    public ref UnityEngine.Vector2 IdealMaxPos { get => ref __0; }
+    public ref UnityEngine.Vector2 CurrLineSize { get => ref __0; }
+    public ref UnityEngine.Vector2 PrevLineSize { get => ref __0; }
+    public ref float CurrLineTextBaseOffset { get => ref __1; }
+    public ref float PrevLineTextBaseOffset { get => ref __1; }
+    public ref bool IsSameLine { get => ref __2; }
+    public ref ImVec1 Indent { get => ref __3; }
+    public ref ImVec1 ColumnsOffset { get => ref __3; }
+    public ref ImVec1 GroupOffset { get => ref __3; }
+    public ref UnityEngine.Vector2 CursorStartPosLossyness { get => ref __0; }
+    public ref ImGuiNavLayer NavLayerCurrent { get => ref __4; }
+    public ref short NavLayersActiveMask { get => ref __5; }
+    public ref short NavLayersActiveMaskNext { get => ref __5; }
+    public ref uint NavFocusScopeIdCurrent { get => ref __6; }
+    public ref bool NavHideHighlightOneFrame { get => ref __2; }
+    public ref bool NavHasScroll { get => ref __2; }
+    public ref bool MenuBarAppending { get => ref __2; }
+    public ref UnityEngine.Vector2 MenuBarOffset { get => ref __0; }
+    public ref ImGuiMenuColumns MenuColumns { get => ref __7; }
+    public ref int TreeDepth { get => ref __8; }
+    public ref uint TreeJumpToParentOnPopMask { get => ref __6; }
+    public ImVector<ImGuiWindowPtr> ChildWindows { get => default; }
+    public ref ImGuiStoragePtr StateStorage { get => ref __9; }
+    public ref ImGuiOldColumnsPtr CurrentColumns { get => ref __10; }
+    public ref int CurrentTableIdx { get => ref __8; }
+    public ref ImGuiLayoutType LayoutType { get => ref __11; }
+    public ref ImGuiLayoutType ParentLayoutType { get => ref __11; }
+    public ref float ItemWidth { get => ref __1; }
+    public ref float TextWrapPos { get => ref __1; }
+    public ImVector<float> ItemWidthStack { get => default; }
+    public ImVector<float> TextWrapPosStack { get => default; }
+    internal static UnityEngine.Vector2 __0;
+    internal static float __1;
+    internal static bool __2;
+    internal static ImVec1 __3;
+    internal static ImGuiNavLayer __4;
+    internal static short __5;
+    internal static uint __6;
+    internal static ImGuiMenuColumns __7;
+    internal static int __8;
+    internal static ImGuiStoragePtr __9;
+    internal static ImGuiOldColumnsPtr __10;
+    internal static ImGuiLayoutType __11;
+  }
+  public struct ImSpanAllocator
+  {
+  }
+  public struct ImSpanAllocatorPtr
+  {
+    public unsafe ImSpanAllocator* NativePtr { get => default; }
+    public int GetArenaSizeInBytes() { return default; }
+    public unsafe void* GetSpanPtrBegin(int n) { return default; }
+    public unsafe void* GetSpanPtrEnd(int n) { return default; }
+    public void Reserve(int n, uint sz) { }
+    public void Reserve(int n, uint sz, int a) { }
+    public void SetArenaBasePtr(System.IntPtr base_ptr) { }
+    public void ImSpanAllocator_destroy() { }
+  }
+  public struct ImVec1
+  {
+    public float x;
+  }
+  public struct ImVec1Ptr
+  {
+    public unsafe ImVec1* NativePtr { get => default; }
+    public ref float x { get => ref __0; }
+    public void ImVec1_destroy() { }
+    internal static float __0;
+  }
+  public class ColorExtensions
+  {
+    public static UnityEngine.Color32 ToColor32(uint rgba) { return default; }
+    public static UnityEngine.Color ToColor(uint rgba) { return default; }
+    public static uint ToUint(UnityEngine.Color32 c32) { return default; }
+    public static uint ToUint(UnityEngine.Color color) { return default; }
+  }
+  public delegate int ImGuiInputTextSafeCallback(ImGuiInputTextCallbackDataPtr data);
+  public delegate void ImGuiSizeSafeCallback(ImGuiSizeCallbackDataPtr data);
+  public class ImFreetype
+  {
+    public static bool BuildFontAtlas(ImFontAtlasPtr atlas, ImFreetype.RasterizerFlags extra_flags) { return default; }
+    public enum RasterizerFlags
+    {
+      None = 0,
+      NoHinting = 1,
+      NoAutoHint = 2,
+      ForceAutoHint = 4,
+      LightHinting = 8,
+      MonoHinting = 16,
+      Bold = 32,
+      Oblique = 64,
+      MonoChrome = 128,
+    }
+  }
+  public unsafe delegate void ImDrawCallback(ImDrawList* parent_list, ImDrawCmd* cmd);
+  public unsafe delegate void ImGuiSizeCallback(ImGuiSizeCallbackData* data);
+  public unsafe delegate int ImGuiInputTextCallback(ImGuiInputTextCallbackData* data);
+  public struct ImSpan
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public ref T Ref<T>(int index) { return ref ImSpan<T>.__0; }
+    public System.IntPtr Address<T>(int index) { return default; }
+  }
+  public struct ImSpan<T>
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public ref T Item { get => ref __0; }
+    internal static T __0;
+  }
+  public struct ImPtrSpan<T>
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public T Item { get => default; }
+  }
+  public struct ImVector
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public ref T Ref<T>(int index) { return ref ImVector<T>.__0; }
+    public System.IntPtr Address<T>(int index) { return default; }
+  }
+  public struct ImVector<T>
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public ref T Item { get => ref __0; }
+    internal static T __0;
+  }
+  public struct ImPtrVector<T>
+  {
+    public int Size;
+    public int Capacity;
+    public System.IntPtr Data;
+    public T Item { get => default; }
+  }
+  public class IntPtrEqualityComparer
+  {
+    public static IntPtrEqualityComparer Instance { get => default; }
+    public bool Equals(System.IntPtr p1, System.IntPtr p2) { return default; }
+    public int GetHashCode(System.IntPtr ptr) { return default; }
+  }
+  public struct NullTerminatedString
+  {
+    public unsafe byte* Data;
+  }
+  public struct ImGuiStoragePair
+  {
+    public uint Key;
+    public UnionValue Value;
+  }
+  public struct ImGuiStoragePairPtr
+  {
+    public unsafe ImGuiStoragePair* NativePtr { get => default; }
+  }
+  public struct UnionValue
+  {
+    public int ValueI32;
+    public float ValueF32;
+    public System.IntPtr ValuePtr;
+  }
+  public struct RangeAccessor<T>
+  {
+    public unsafe void* Data;
+    public int Count;
+    public ref T Item { get => ref __0; }
+    internal static T __0;
+  }
+  public struct RangePtrAccessor<T>
+  {
+    public unsafe void* Data;
+    public int Count;
+    public T Item { get => default; }
+  }
+  public class RangeAccessorExtensions
+  {
+    public static string GetStringASCII(RangeAccessor<byte> stringAccessor) { return default; }
+  }
+  public class ImGuiDebug
+  {
+    public static bool EnableLogging;
+    public static bool LogFrame;
+    public static bool LogNextFrame;
+    public static int LogIndent;
+    public static bool LoggingEnabled { get => default; }
+    public static string LogPad { get => default; }
+    public static void Log(string text) { }
+  }
+  public struct Vector2ih
+  {
+    public short x;
+    public short y;
+  }
+  public class MarshalUtils
+  {
+    public static unsafe System.IntPtr pointer_to_IntPtr(void* inData) { return default; }
+    public static unsafe void* IntPtr_to_pointer(System.IntPtr inData) { return default; }
+    public static unsafe void** IntPtr_to_pointerPointer(System.IntPtr inData) { return default; }
+    public static bool byte_to_bool(byte inByte) { return default; }
+    public static byte bool_to_byte(bool inBool) { return default; }
+    public static unsafe byte boolPointer_to_byte(System.Boolean* inBoolPointer) { return default; }
+    public static unsafe string bytePointer_to_string(byte* inLiteral) { return default; }
+    public static int GetByteCount(string inString) { return default; }
+  }
+  public struct StbTexteditRow
+  {
+    public float x0;
+    public float x1;
+    public float baseline_y_delta;
+    public float ymin;
+    public float ymax;
+    public int num_chars;
+  }
+  public struct StbTexteditRowPtr
+  {
+    public unsafe StbTexteditRow* NativePtr { get => default; }
+    public ref float x0 { get => ref __0; }
+    public ref float x1 { get => ref __0; }
+    public ref float baseline_y_delta { get => ref __0; }
+    public ref float ymin { get => ref __0; }
+    public ref float ymax { get => ref __0; }
+    public ref int num_chars { get => ref __1; }
+    internal static float __0;
+    internal static int __1;
+  }
+  public struct StbUndoRecord
+  {
+    public int where;
+    public int insert_length;
+    public int delete_length;
+    public int char_storage;
+  }
+  public struct StbUndoRecordPtr
+  {
+    public unsafe StbUndoRecord* NativePtr { get => default; }
+    public ref int where { get => ref __0; }
+    public ref int insert_length { get => ref __0; }
+    public ref int delete_length { get => ref __0; }
+    public ref int char_storage { get => ref __0; }
+    internal static int __0;
+  }
 }
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiActivateFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiActivateFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiActivateFlags.cs	2025-05-22 18:15:44.457333400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiActivateFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiActivateFlags
-{
-	None = 0,
-	PreferInput = 1,
-	PreferTweak = 2,
-	TryToPreserveState = 4
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiAxis.cs Out/RG.ImGui/ImGuiNET/ImGuiAxis.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiAxis.cs	2025-05-22 18:15:44.463839900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiAxis.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiAxis
-{
-	None = -1,
-	X,
-	Y
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiBackendFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiBackendFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiBackendFlags.cs	2025-05-22 18:15:44.462835400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiBackendFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiBackendFlags
-{
-	None = 0,
-	HasGamepad = 1,
-	HasMouseCursors = 2,
-	HasSetMousePos = 4,
-	RendererHasVtxOffset = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiButtonFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiButtonFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiButtonFlags.cs	2025-05-22 18:15:44.464838400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiButtonFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiButtonFlags
-{
-	None = 0,
-	MouseButtonLeft = 1,
-	MouseButtonRight = 2,
-	MouseButtonMiddle = 4,
-	MouseButtonMask_ = 7,
-	MouseButtonDefault_ = 1
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiCol.cs Out/RG.ImGui/ImGuiNET/ImGuiCol.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiCol.cs	2025-05-22 18:15:44.462835400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiCol.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,59 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiCol
-{
-	Text,
-	TextDisabled,
-	WindowBg,
-	ChildBg,
-	PopupBg,
-	Border,
-	BorderShadow,
-	FrameBg,
-	FrameBgHovered,
-	FrameBgActive,
-	TitleBg,
-	TitleBgActive,
-	TitleBgCollapsed,
-	MenuBarBg,
-	ScrollbarBg,
-	ScrollbarGrab,
-	ScrollbarGrabHovered,
-	ScrollbarGrabActive,
-	CheckMark,
-	SliderGrab,
-	SliderGrabActive,
-	Button,
-	ButtonHovered,
-	ButtonActive,
-	Header,
-	HeaderHovered,
-	HeaderActive,
-	Separator,
-	SeparatorHovered,
-	SeparatorActive,
-	ResizeGrip,
-	ResizeGripHovered,
-	ResizeGripActive,
-	Tab,
-	TabHovered,
-	TabActive,
-	TabUnfocused,
-	TabUnfocusedActive,
-	PlotLines,
-	PlotLinesHovered,
-	PlotHistogram,
-	PlotHistogramHovered,
-	TableHeaderBg,
-	TableBorderStrong,
-	TableBorderLight,
-	TableRowBg,
-	TableRowBgAlt,
-	TextSelectedBg,
-	DragDropTarget,
-	NavHighlight,
-	NavWindowingHighlight,
-	NavWindowingDimBg,
-	ModalWindowDimBg,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorEditFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiColorEditFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorEditFlags.cs	2025-05-22 18:15:44.462835400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiColorEditFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,34 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiColorEditFlags
-{
-	None = 0,
-	NoAlpha = 2,
-	NoPicker = 4,
-	NoOptions = 8,
-	NoSmallPreview = 16,
-	NoInputs = 32,
-	NoTooltip = 64,
-	NoLabel = 128,
-	NoSidePreview = 256,
-	NoDragDrop = 512,
-	NoBorder = 1024,
-	AlphaBar = 65536,
-	AlphaPreview = 131072,
-	AlphaPreviewHalf = 262144,
-	HDR = 524288,
-	DisplayRGB = 1048576,
-	DisplayHSV = 2097152,
-	DisplayHex = 4194304,
-	Uint8 = 8388608,
-	Float = 16777216,
-	PickerHueBar = 33554432,
-	PickerHueWheel = 67108864,
-	InputRGB = 134217728,
-	InputHSV = 268435456,
-	DefaultOptions_ = 177209344,
-	DisplayMask_ = 7340032,
-	DataTypeMask_ = 25165824,
-	PickerMask_ = 100663296,
-	InputMask_ = 402653184
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorMod.cs Out/RG.ImGui/ImGuiNET/ImGuiColorMod.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorMod.cs	2025-05-22 18:15:44.462835400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiColorMod.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiColorMod
-{
-	public ImGuiCol Col;
-
-	public Vector4 BackupValue;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorModPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiColorModPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiColorModPtr.cs	2025-05-22 18:15:44.471347400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiColorModPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,39 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiColorModPtr
-{
-	public unsafe ImGuiColorMod* NativePtr { get; }
-
-	public unsafe ref ImGuiCol Col => ref Unsafe.AsRef<ImGuiCol>(&NativePtr->Col);
-
-	public unsafe ref Vector4 BackupValue => ref Unsafe.AsRef<Vector4>(&NativePtr->BackupValue);
-
-	public unsafe ImGuiColorModPtr(ImGuiColorMod* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiColorModPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiColorMod*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiColorModPtr(ImGuiColorMod* nativePtr)
-	{
-		return new ImGuiColorModPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiColorMod*(ImGuiColorModPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiColorModPtr(IntPtr nativePtr)
-	{
-		return new ImGuiColorModPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiComboFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboFlags.cs	2025-05-22 18:15:44.483878900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiComboFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiComboFlags
-{
-	None = 0,
-	PopupAlignLeft = 1,
-	HeightSmall = 2,
-	HeightRegular = 4,
-	HeightLarge = 8,
-	HeightLargest = 16,
-	NoArrowButton = 32,
-	NoPreview = 64,
-	HeightMask_ = 30
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiComboFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboFlagsPrivate.cs	2025-05-22 18:15:44.464838400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiComboFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiComboFlagsPrivate
-{
-	CustomPreview = 0x100000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboPreviewData.cs Out/RG.ImGui/ImGuiNET/ImGuiComboPreviewData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboPreviewData.cs	2025-05-22 18:15:44.464838400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiComboPreviewData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,18 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiComboPreviewData
-{
-	public Rect PreviewRect;
-
-	public Vector2 BackupCursorPos;
-
-	public Vector2 BackupCursorMaxPos;
-
-	public Vector2 BackupCursorPosPrevLine;
-
-	public float BackupPrevLineTextBaseOffset;
-
-	public ImGuiLayoutType BackupLayout;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboPreviewDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiComboPreviewDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiComboPreviewDataPtr.cs	2025-05-22 18:15:44.497529200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiComboPreviewDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,53 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiComboPreviewDataPtr
-{
-	public unsafe ImGuiComboPreviewData* NativePtr { get; }
-
-	public unsafe ref Rect PreviewRect => ref Unsafe.AsRef<Rect>(&NativePtr->PreviewRect);
-
-	public unsafe ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorPos);
-
-	public unsafe ref Vector2 BackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorMaxPos);
-
-	public unsafe ref Vector2 BackupCursorPosPrevLine => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorPosPrevLine);
-
-	public unsafe ref float BackupPrevLineTextBaseOffset => ref Unsafe.AsRef<float>(&NativePtr->BackupPrevLineTextBaseOffset);
-
-	public unsafe ref ImGuiLayoutType BackupLayout => ref Unsafe.AsRef<ImGuiLayoutType>(&NativePtr->BackupLayout);
-
-	public unsafe ImGuiComboPreviewDataPtr(ImGuiComboPreviewData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiComboPreviewDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiComboPreviewData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiComboPreviewDataPtr(ImGuiComboPreviewData* nativePtr)
-	{
-		return new ImGuiComboPreviewDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiComboPreviewData*(ImGuiComboPreviewDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiComboPreviewDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiComboPreviewDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiComboPreviewData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiComboPreviewData_destroy #1");
-		ImGuiNative.ImGuiComboPreviewData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiCond.cs Out/RG.ImGui/ImGuiNET/ImGuiCond.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiCond.cs	2025-05-22 18:15:44.515540400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiCond.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiCond
-{
-	None = 0,
-	Always = 1,
-	Once = 2,
-	FirstUseEver = 4,
-	Appearing = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiConfigFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiConfigFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiConfigFlags.cs	2025-05-22 18:15:44.464838400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiConfigFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiConfigFlags
-{
-	None = 0,
-	NavEnableKeyboard = 1,
-	NavEnableGamepad = 2,
-	NavEnableSetMousePos = 4,
-	NavNoCaptureKeyboard = 8,
-	NoMouse = 0x10,
-	NoMouseCursorChange = 0x20,
-	IsSRGB = 0x100000,
-	IsTouchScreen = 0x200000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiContextHookType.cs Out/RG.ImGui/ImGuiNET/ImGuiContextHookType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiContextHookType.cs	2025-05-22 18:15:44.470339300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiContextHookType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,13 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiContextHookType
-{
-	NewFramePre,
-	NewFramePost,
-	EndFramePre,
-	EndFramePost,
-	RenderPre,
-	RenderPost,
-	Shutdown,
-	PendingRemoval_
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataType.cs Out/RG.ImGui/ImGuiNET/ImGuiDataType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataType.cs	2025-05-22 18:15:44.483878900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiDataType
-{
-	S8,
-	U8,
-	S16,
-	U16,
-	S32,
-	U32,
-	S64,
-	U64,
-	Float,
-	Double,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeInfo.cs Out/RG.ImGui/ImGuiNET/ImGuiDataTypeInfo.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeInfo.cs	2025-05-22 18:15:44.470339300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataTypeInfo.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiDataTypeInfo
-{
-	public uint Size;
-
-	public unsafe byte* Name;
-
-	public unsafe byte* PrintFmt;
-
-	public unsafe byte* ScanFmt;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeInfoPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiDataTypeInfoPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeInfoPtr.cs	2025-05-22 18:15:44.497529200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataTypeInfoPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiDataTypeInfoPtr
-{
-	public unsafe ImGuiDataTypeInfo* NativePtr { get; }
-
-	public unsafe ref uint Size => ref Unsafe.AsRef<uint>(&NativePtr->Size);
-
-	public unsafe ref string Name => ref Unsafe.AsRef<string>(&NativePtr->Name);
-
-	public unsafe ref string PrintFmt => ref Unsafe.AsRef<string>(&NativePtr->PrintFmt);
-
-	public unsafe ref string ScanFmt => ref Unsafe.AsRef<string>(&NativePtr->ScanFmt);
-
-	public unsafe ImGuiDataTypeInfoPtr(ImGuiDataTypeInfo* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiDataTypeInfoPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiDataTypeInfo*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiDataTypeInfoPtr(ImGuiDataTypeInfo* nativePtr)
-	{
-		return new ImGuiDataTypeInfoPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiDataTypeInfo*(ImGuiDataTypeInfoPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiDataTypeInfoPtr(IntPtr nativePtr)
-	{
-		return new ImGuiDataTypeInfoPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypePrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiDataTypePrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypePrivate.cs	2025-05-22 18:15:44.470339300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataTypePrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiDataTypePrivate
-{
-	String = 11,
-	Pointer,
-	ID
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStorage.cs Out/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStorage.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStorage.cs	2025-05-22 18:15:44.471347400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStorage.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,20 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiDataTypeTempStorage
-{
-	public byte Data_0;
-
-	public byte Data_1;
-
-	public byte Data_2;
-
-	public byte Data_3;
-
-	public byte Data_4;
-
-	public byte Data_5;
-
-	public byte Data_6;
-
-	public byte Data_7;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStoragePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStoragePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStoragePtr.cs	2025-05-22 18:15:44.472348600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDataTypeTempStoragePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,35 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiDataTypeTempStoragePtr
-{
-	public unsafe ImGuiDataTypeTempStorage* NativePtr { get; }
-
-	public unsafe RangeAccessor<byte> Data => new RangeAccessor<byte>(&NativePtr->Data_0, 8);
-
-	public unsafe ImGuiDataTypeTempStoragePtr(ImGuiDataTypeTempStorage* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiDataTypeTempStoragePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiDataTypeTempStorage*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiDataTypeTempStoragePtr(ImGuiDataTypeTempStorage* nativePtr)
-	{
-		return new ImGuiDataTypeTempStoragePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiDataTypeTempStorage*(ImGuiDataTypeTempStoragePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiDataTypeTempStoragePtr(IntPtr nativePtr)
-	{
-		return new ImGuiDataTypeTempStoragePtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDebug.cs Out/RG.ImGui/ImGuiNET/ImGuiDebug.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDebug.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDebug.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,36 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public static class ImGuiDebug
-{
-	public static bool EnableLogging;
-
-	public static bool LogFrame;
-
-	public static bool LogNextFrame;
-
-	public static int LogIndent;
-
-	public static bool LoggingEnabled
-	{
-		get
-		{
-			if (!EnableLogging)
-			{
-				return LogFrame;
-			}
-			return true;
-		}
-	}
-
-	public static string LogPad => string.Empty.PadRight(LogIndent, ' ');
-
-	public static void Log(string text)
-	{
-		if (LoggingEnabled)
-		{
-			Console.WriteLine("IMGUI: " + LogPad + text);
-		}
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDebugLogFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiDebugLogFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDebugLogFlags.cs	2025-05-22 18:15:44.485876300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDebugLogFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,13 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiDebugLogFlags
-{
-	None = 0,
-	EventActiveId = 1,
-	EventFocus = 2,
-	EventPopup = 4,
-	EventNav = 8,
-	EventIO = 16,
-	EventMask_ = 31,
-	OutputToTTY = 1024
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDir.cs Out/RG.ImGui/ImGuiNET/ImGuiDir.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDir.cs	2025-05-22 18:15:44.470339300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDir.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiDir
-{
-	None = -1,
-	Left,
-	Right,
-	Up,
-	Down,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDragDropFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiDragDropFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiDragDropFlags.cs	2025-05-22 18:15:44.472348600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiDragDropFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiDragDropFlags
-{
-	None = 0,
-	SourceNoPreviewTooltip = 1,
-	SourceNoDisableHover = 2,
-	SourceNoHoldToOpenOthers = 4,
-	SourceAllowNullID = 8,
-	SourceExtern = 16,
-	SourceAutoExpirePayload = 32,
-	AcceptBeforeDelivery = 1024,
-	AcceptNoDrawDefaultRect = 2048,
-	AcceptNoPreviewTooltip = 4096,
-	AcceptPeekOnly = 3072
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiFocusedFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiFocusedFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiFocusedFlags.cs	2025-05-22 18:15:44.471347400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiFocusedFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiFocusedFlags
-{
-	None = 0,
-	ChildWindows = 1,
-	RootWindow = 2,
-	AnyWindow = 4,
-	NoPopupHierarchy = 8,
-	RootAndChildWindows = 3
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiGroupData.cs Out/RG.ImGui/ImGuiNET/ImGuiGroupData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiGroupData.cs	2025-05-22 18:15:44.484875400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiGroupData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,28 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiGroupData
-{
-	public uint WindowID;
-
-	public Vector2 BackupCursorPos;
-
-	public Vector2 BackupCursorMaxPos;
-
-	public ImVec1 BackupIndent;
-
-	public ImVec1 BackupGroupOffset;
-
-	public Vector2 BackupCurrLineSize;
-
-	public float BackupCurrLineTextBaseOffset;
-
-	public uint BackupActiveIdIsAlive;
-
-	public byte BackupActiveIdPreviousFrameIsAlive;
-
-	public byte BackupHoveredIdIsAlive;
-
-	public byte EmitItem;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiGroupDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiGroupDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiGroupDataPtr.cs	2025-05-22 18:15:44.516544400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiGroupDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,57 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiGroupDataPtr
-{
-	public unsafe ImGuiGroupData* NativePtr { get; }
-
-	public unsafe ref uint WindowID => ref Unsafe.AsRef<uint>(&NativePtr->WindowID);
-
-	public unsafe ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorPos);
-
-	public unsafe ref Vector2 BackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorMaxPos);
-
-	public unsafe ref ImVec1 BackupIndent => ref Unsafe.AsRef<ImVec1>(&NativePtr->BackupIndent);
-
-	public unsafe ref ImVec1 BackupGroupOffset => ref Unsafe.AsRef<ImVec1>(&NativePtr->BackupGroupOffset);
-
-	public unsafe ref Vector2 BackupCurrLineSize => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCurrLineSize);
-
-	public unsafe ref float BackupCurrLineTextBaseOffset => ref Unsafe.AsRef<float>(&NativePtr->BackupCurrLineTextBaseOffset);
-
-	public unsafe ref uint BackupActiveIdIsAlive => ref Unsafe.AsRef<uint>(&NativePtr->BackupActiveIdIsAlive);
-
-	public unsafe ref bool BackupActiveIdPreviousFrameIsAlive => ref Unsafe.AsRef<bool>(&NativePtr->BackupActiveIdPreviousFrameIsAlive);
-
-	public unsafe ref bool BackupHoveredIdIsAlive => ref Unsafe.AsRef<bool>(&NativePtr->BackupHoveredIdIsAlive);
-
-	public unsafe ref bool EmitItem => ref Unsafe.AsRef<bool>(&NativePtr->EmitItem);
-
-	public unsafe ImGuiGroupDataPtr(ImGuiGroupData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiGroupDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiGroupData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiGroupDataPtr(ImGuiGroupData* nativePtr)
-	{
-		return new ImGuiGroupDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiGroupData*(ImGuiGroupDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiGroupDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiGroupDataPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiHoveredFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiHoveredFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiHoveredFlags.cs	2025-05-22 18:15:44.470339300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiHoveredFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,17 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiHoveredFlags
-{
-	None = 0,
-	ChildWindows = 1,
-	RootWindow = 2,
-	AnyWindow = 4,
-	NoPopupHierarchy = 8,
-	AllowWhenBlockedByPopup = 32,
-	AllowWhenBlockedByActiveItem = 128,
-	AllowWhenOverlapped = 256,
-	AllowWhenDisabled = 512,
-	NoNavOverride = 1024,
-	RectOnly = 416,
-	RootAndChildWindows = 3
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocused.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocused.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocused.cs	2025-05-22 18:15:44.472348600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocused.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventAppFocused
-{
-	public byte Focused;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocusedPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocusedPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocusedPtr.cs	2025-05-22 18:15:44.485876300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventAppFocusedPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,36 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventAppFocusedPtr
-{
-	public unsafe ImGuiInputEventAppFocused* NativePtr { get; }
-
-	public unsafe ref bool Focused => ref Unsafe.AsRef<bool>(&NativePtr->Focused);
-
-	public unsafe ImGuiInputEventAppFocusedPtr(ImGuiInputEventAppFocused* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventAppFocusedPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventAppFocused*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventAppFocusedPtr(ImGuiInputEventAppFocused* nativePtr)
-	{
-		return new ImGuiInputEventAppFocusedPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventAppFocused*(ImGuiInputEventAppFocusedPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventAppFocusedPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventAppFocusedPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventKey.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventKey.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventKey.cs	2025-05-22 18:15:44.482878100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventKey.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventKey
-{
-	public ImGuiKey Key;
-
-	public byte Down;
-
-	public float AnalogValue;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventKeyPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventKeyPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventKeyPtr.cs	2025-05-22 18:15:44.516544400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventKeyPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,40 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventKeyPtr
-{
-	public unsafe ImGuiInputEventKey* NativePtr { get; }
-
-	public unsafe ref ImGuiKey Key => ref Unsafe.AsRef<ImGuiKey>(&NativePtr->Key);
-
-	public unsafe ref bool Down => ref Unsafe.AsRef<bool>(&NativePtr->Down);
-
-	public unsafe ref float AnalogValue => ref Unsafe.AsRef<float>(&NativePtr->AnalogValue);
-
-	public unsafe ImGuiInputEventKeyPtr(ImGuiInputEventKey* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventKeyPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventKey*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventKeyPtr(ImGuiInputEventKey* nativePtr)
-	{
-		return new ImGuiInputEventKeyPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventKey*(ImGuiInputEventKeyPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventKeyPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventKeyPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButton.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButton.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButton.cs	2025-05-22 18:15:44.483878900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButton.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMouseButton
-{
-	public int Button;
-
-	public byte Down;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButtonPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButtonPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButtonPtr.cs	2025-05-22 18:15:44.485876300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseButtonPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMouseButtonPtr
-{
-	public unsafe ImGuiInputEventMouseButton* NativePtr { get; }
-
-	public unsafe ref int Button => ref Unsafe.AsRef<int>(&NativePtr->Button);
-
-	public unsafe ref bool Down => ref Unsafe.AsRef<bool>(&NativePtr->Down);
-
-	public unsafe ImGuiInputEventMouseButtonPtr(ImGuiInputEventMouseButton* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventMouseButtonPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventMouseButton*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMouseButtonPtr(ImGuiInputEventMouseButton* nativePtr)
-	{
-		return new ImGuiInputEventMouseButtonPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMouseButton*(ImGuiInputEventMouseButtonPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventMouseButtonPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventMouseButtonPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMousePos.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMousePos.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMousePos.cs	2025-05-22 18:15:44.497529200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMousePos.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMousePos
-{
-	public float PosX;
-
-	public float PosY;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMousePosPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMousePosPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMousePosPtr.cs	2025-05-22 18:15:44.515540400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMousePosPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMousePosPtr
-{
-	public unsafe ImGuiInputEventMousePos* NativePtr { get; }
-
-	public unsafe ref float PosX => ref Unsafe.AsRef<float>(&NativePtr->PosX);
-
-	public unsafe ref float PosY => ref Unsafe.AsRef<float>(&NativePtr->PosY);
-
-	public unsafe ImGuiInputEventMousePosPtr(ImGuiInputEventMousePos* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventMousePosPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventMousePos*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMousePosPtr(ImGuiInputEventMousePos* nativePtr)
-	{
-		return new ImGuiInputEventMousePosPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMousePos*(ImGuiInputEventMousePosPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventMousePosPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventMousePosPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheel.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheel.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheel.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheel.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMouseWheel
-{
-	public float WheelX;
-
-	public float WheelY;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheelPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheelPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheelPtr.cs	2025-05-22 18:15:44.515540400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventMouseWheelPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventMouseWheelPtr
-{
-	public unsafe ImGuiInputEventMouseWheel* NativePtr { get; }
-
-	public unsafe ref float WheelX => ref Unsafe.AsRef<float>(&NativePtr->WheelX);
-
-	public unsafe ref float WheelY => ref Unsafe.AsRef<float>(&NativePtr->WheelY);
-
-	public unsafe ImGuiInputEventMouseWheelPtr(ImGuiInputEventMouseWheel* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventMouseWheelPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventMouseWheel*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMouseWheelPtr(ImGuiInputEventMouseWheel* nativePtr)
-	{
-		return new ImGuiInputEventMouseWheelPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventMouseWheel*(ImGuiInputEventMouseWheelPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventMouseWheelPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventMouseWheelPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventText.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventText.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventText.cs	2025-05-22 18:15:44.517541400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventText.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputEventText
-{
-	public uint Char;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventTextPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventTextPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventTextPtr.cs	2025-05-22 18:15:44.498533300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventTextPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,36 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputEventTextPtr
-{
-	public unsafe ImGuiInputEventText* NativePtr { get; }
-
-	public unsafe ref uint Char => ref Unsafe.AsRef<uint>(&NativePtr->Char);
-
-	public unsafe ImGuiInputEventTextPtr(ImGuiInputEventText* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputEventTextPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputEventText*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputEventTextPtr(ImGuiInputEventText* nativePtr)
-	{
-		return new ImGuiInputEventTextPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputEventText*(ImGuiInputEventTextPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputEventTextPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputEventTextPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventType.cs Out/RG.ImGui/ImGuiNET/ImGuiInputEventType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputEventType.cs	2025-05-22 18:15:44.517541400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputEventType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,13 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiInputEventType
-{
-	None,
-	MousePos,
-	MouseWheel,
-	MouseButton,
-	Key,
-	Text,
-	Focus,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputSource.cs Out/RG.ImGui/ImGuiNET/ImGuiInputSource.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputSource.cs	2025-05-22 18:15:44.496527500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputSource.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiInputSource
-{
-	None,
-	Mouse,
-	Keyboard,
-	Gamepad,
-	Clipboard,
-	Nav,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallback.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallback.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallback.cs	2025-05-22 18:15:44.726412400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallback.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-namespace ImGuiNET;
-
-public unsafe delegate int ImGuiInputTextCallback(ImGuiInputTextCallbackData* data);
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackData.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackData.cs	2025-05-22 18:15:44.498533300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,28 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiInputTextCallbackData
-{
-	public ImGuiInputTextFlags EventFlag;
-
-	public ImGuiInputTextFlags Flags;
-
-	public unsafe void* UserData;
-
-	public ushort EventChar;
-
-	public ImGuiKey EventKey;
-
-	public unsafe byte* Buf;
-
-	public int BufTextLen;
-
-	public int BufSize;
-
-	public byte BufDirty;
-
-	public int CursorPos;
-
-	public int SelectionStart;
-
-	public int SelectionEnd;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackDataPtr.cs	2025-05-22 18:15:44.566354200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextCallbackDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,178 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiInputTextCallbackDataPtr
-{
-	public unsafe ImGuiInputTextCallbackData* NativePtr { get; }
-
-	public unsafe ref ImGuiInputTextFlags EventFlag => ref Unsafe.AsRef<ImGuiInputTextFlags>(&NativePtr->EventFlag);
-
-	public unsafe ref ImGuiInputTextFlags Flags => ref Unsafe.AsRef<ImGuiInputTextFlags>(&NativePtr->Flags);
-
-	public unsafe IntPtr UserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->UserData;
-		}
-		set
-		{
-			NativePtr->UserData = (void*)value;
-		}
-	}
-
-	public unsafe ref ushort EventChar => ref Unsafe.AsRef<ushort>(&NativePtr->EventChar);
-
-	public unsafe ref ImGuiKey EventKey => ref Unsafe.AsRef<ImGuiKey>(&NativePtr->EventKey);
-
-	public unsafe IntPtr Buf
-	{
-		get
-		{
-			return (IntPtr)NativePtr->Buf;
-		}
-		set
-		{
-			NativePtr->Buf = (byte*)(void*)value;
-		}
-	}
-
-	public unsafe ref int BufTextLen => ref Unsafe.AsRef<int>(&NativePtr->BufTextLen);
-
-	public unsafe ref int BufSize => ref Unsafe.AsRef<int>(&NativePtr->BufSize);
-
-	public unsafe ref bool BufDirty => ref Unsafe.AsRef<bool>(&NativePtr->BufDirty);
-
-	public unsafe ref int CursorPos => ref Unsafe.AsRef<int>(&NativePtr->CursorPos);
-
-	public unsafe ref int SelectionStart => ref Unsafe.AsRef<int>(&NativePtr->SelectionStart);
-
-	public unsafe ref int SelectionEnd => ref Unsafe.AsRef<int>(&NativePtr->SelectionEnd);
-
-	public unsafe string Text => Util.StringFromPtr(NativePtr->Buf);
-
-	public unsafe ImGuiInputTextCallbackDataPtr(ImGuiInputTextCallbackData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiInputTextCallbackDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiInputTextCallbackData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiInputTextCallbackDataPtr(ImGuiInputTextCallbackData* nativePtr)
-	{
-		return new ImGuiInputTextCallbackDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiInputTextCallbackData*(ImGuiInputTextCallbackDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiInputTextCallbackDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiInputTextCallbackDataPtr(nativePtr);
-	}
-
-	public unsafe void ClearSelection()
-	{
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_ClearSelection #1");
-		ImGuiNative.ImGuiInputTextCallbackData_ClearSelection(NativePtr);
-	}
-
-	public unsafe void DeleteChars(int pos, int bytes_count)
-	{
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_DeleteChars #1");
-		ImGuiNative.ImGuiInputTextCallbackData_DeleteChars(NativePtr, pos, bytes_count);
-	}
-
-	public unsafe bool HasSelection()
-	{
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_HasSelection #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiInputTextCallbackData_HasSelection(NativePtr));
-	}
-
-	public unsafe void InsertChars(int pos, string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_InsertChars #1");
-		ImGuiNative.ImGuiInputTextCallbackData_InsertChars(NativePtr, pos, ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void InsertChars(int pos, string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_InsertChars #2");
-		ImGuiNative.ImGuiInputTextCallbackData_InsertChars(NativePtr, pos, ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void SelectAll()
-	{
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_SelectAll #1");
-		ImGuiNative.ImGuiInputTextCallbackData_SelectAll(NativePtr);
-	}
-
-	public unsafe void ImGuiInputTextCallbackData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiInputTextCallbackData_destroy #1");
-		ImGuiNative.ImGuiInputTextCallbackData_destroy(NativePtr);
-	}
-
-	public unsafe ImGuiInputTextCallbackDataPtr(ref ImGuiInputTextCallbackData data)
-	{
-		NativePtr = (ImGuiInputTextCallbackData*)Unsafe.AsPointer(ref data);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextFlags.cs	2025-05-22 18:15:44.585883500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,26 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiInputTextFlags
-{
-	None = 0,
-	CharsDecimal = 1,
-	CharsHexadecimal = 2,
-	CharsUppercase = 4,
-	CharsNoBlank = 8,
-	AutoSelectAll = 0x10,
-	EnterReturnsTrue = 0x20,
-	CallbackCompletion = 0x40,
-	CallbackHistory = 0x80,
-	CallbackAlways = 0x100,
-	CallbackCharFilter = 0x200,
-	AllowTabInput = 0x400,
-	CtrlEnterForNewLine = 0x800,
-	NoHorizontalScroll = 0x1000,
-	AlwaysOverwrite = 0x2000,
-	ReadOnly = 0x4000,
-	Password = 0x8000,
-	NoUndoRedo = 0x10000,
-	CharsScientific = 0x20000,
-	CallbackResize = 0x40000,
-	CallbackEdit = 0x80000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextFlagsPrivate.cs	2025-05-22 18:15:44.496527500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiInputTextFlagsPrivate
-{
-	Multiline = 0x4000000,
-	NoMarkEdited = 0x8000000,
-	MergedItem = 0x10000000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextSafeCallback.cs Out/RG.ImGui/ImGuiNET/ImGuiInputTextSafeCallback.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiInputTextSafeCallback.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiInputTextSafeCallback.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-namespace ImGuiNET;
-
-public delegate int ImGuiInputTextSafeCallback(ImGuiInputTextCallbackDataPtr data);
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiIO.cs Out/RG.ImGui/ImGuiNET/ImGuiIO.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiIO.cs	2025-05-22 18:15:44.556254200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiIO.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,1491 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiIO
-{
-	public ImGuiConfigFlags ConfigFlags;
-
-	public ImGuiBackendFlags BackendFlags;
-
-	public Vector2 DisplaySize;
-
-	public float DeltaTime;
-
-	public float IniSavingRate;
-
-	public unsafe byte* IniFilename;
-
-	public unsafe byte* LogFilename;
-
-	public float MouseDoubleClickTime;
-
-	public float MouseDoubleClickMaxDist;
-
-	public float MouseDragThreshold;
-
-	public float KeyRepeatDelay;
-
-	public float KeyRepeatRate;
-
-	public unsafe void* UserData;
-
-	public unsafe ImFontAtlas* Fonts;
-
-	public float FontGlobalScale;
-
-	public byte FontAllowUserScaling;
-
-	public unsafe ImFont* FontDefault;
-
-	public Vector2 DisplayFramebufferScale;
-
-	public byte MouseDrawCursor;
-
-	public byte ConfigMacOSXBehaviors;
-
-	public byte ConfigInputTrickleEventQueue;
-
-	public byte ConfigInputTextCursorBlink;
-
-	public byte ConfigDragClickToInputText;
-
-	public byte ConfigWindowsResizeFromEdges;
-
-	public byte ConfigWindowsMoveFromTitleBarOnly;
-
-	public float ConfigMemoryCompactTimer;
-
-	public unsafe byte* BackendPlatformName;
-
-	public unsafe byte* BackendRendererName;
-
-	public unsafe void* BackendPlatformUserData;
-
-	public unsafe void* BackendRendererUserData;
-
-	public unsafe void* BackendLanguageUserData;
-
-	public IntPtr GetClipboardTextFn;
-
-	public IntPtr SetClipboardTextFn;
-
-	public unsafe void* ClipboardUserData;
-
-	public IntPtr SetPlatformImeDataFn;
-
-	public IntPtr _UnusedPadding;
-
-	public byte WantCaptureMouse;
-
-	public byte WantCaptureKeyboard;
-
-	public byte WantTextInput;
-
-	public byte WantSetMousePos;
-
-	public byte WantSaveIniSettings;
-
-	public byte NavActive;
-
-	public byte NavVisible;
-
-	public float Framerate;
-
-	public int MetricsRenderVertices;
-
-	public int MetricsRenderIndices;
-
-	public int MetricsRenderWindows;
-
-	public int MetricsActiveWindows;
-
-	public int MetricsActiveAllocations;
-
-	public Vector2 MouseDelta;
-
-	public unsafe fixed int KeyMap[645];
-
-	public unsafe fixed byte KeysDown[645];
-
-	public Vector2 MousePos;
-
-	public unsafe fixed byte MouseDown[5];
-
-	public float MouseWheel;
-
-	public float MouseWheelH;
-
-	public byte KeyCtrl;
-
-	public byte KeyShift;
-
-	public byte KeyAlt;
-
-	public byte KeySuper;
-
-	public unsafe fixed float NavInputs[20];
-
-	public ImGuiModFlags KeyMods;
-
-	public ImGuiKeyData KeysData_0;
-
-	public ImGuiKeyData KeysData_1;
-
-	public ImGuiKeyData KeysData_2;
-
-	public ImGuiKeyData KeysData_3;
-
-	public ImGuiKeyData KeysData_4;
-
-	public ImGuiKeyData KeysData_5;
-
-	public ImGuiKeyData KeysData_6;
-
-	public ImGuiKeyData KeysData_7;
-
-	public ImGuiKeyData KeysData_8;
-
-	public ImGuiKeyData KeysData_9;
-
-	public ImGuiKeyData KeysData_10;
-
-	public ImGuiKeyData KeysData_11;
-
-	public ImGuiKeyData KeysData_12;
-
-	public ImGuiKeyData KeysData_13;
-
-	public ImGuiKeyData KeysData_14;
-
-	public ImGuiKeyData KeysData_15;
-
-	public ImGuiKeyData KeysData_16;
-
-	public ImGuiKeyData KeysData_17;
-
-	public ImGuiKeyData KeysData_18;
-
-	public ImGuiKeyData KeysData_19;
-
-	public ImGuiKeyData KeysData_20;
-
-	public ImGuiKeyData KeysData_21;
-
-	public ImGuiKeyData KeysData_22;
-
-	public ImGuiKeyData KeysData_23;
-
-	public ImGuiKeyData KeysData_24;
-
-	public ImGuiKeyData KeysData_25;
-
-	public ImGuiKeyData KeysData_26;
-
-	public ImGuiKeyData KeysData_27;
-
-	public ImGuiKeyData KeysData_28;
-
-	public ImGuiKeyData KeysData_29;
-
-	public ImGuiKeyData KeysData_30;
-
-	public ImGuiKeyData KeysData_31;
-
-	public ImGuiKeyData KeysData_32;
-
-	public ImGuiKeyData KeysData_33;
-
-	public ImGuiKeyData KeysData_34;
-
-	public ImGuiKeyData KeysData_35;
-
-	public ImGuiKeyData KeysData_36;
-
-	public ImGuiKeyData KeysData_37;
-
-	public ImGuiKeyData KeysData_38;
-
-	public ImGuiKeyData KeysData_39;
-
-	public ImGuiKeyData KeysData_40;
-
-	public ImGuiKeyData KeysData_41;
-
-	public ImGuiKeyData KeysData_42;
-
-	public ImGuiKeyData KeysData_43;
-
-	public ImGuiKeyData KeysData_44;
-
-	public ImGuiKeyData KeysData_45;
-
-	public ImGuiKeyData KeysData_46;
-
-	public ImGuiKeyData KeysData_47;
-
-	public ImGuiKeyData KeysData_48;
-
-	public ImGuiKeyData KeysData_49;
-
-	public ImGuiKeyData KeysData_50;
-
-	public ImGuiKeyData KeysData_51;
-
-	public ImGuiKeyData KeysData_52;
-
-	public ImGuiKeyData KeysData_53;
-
-	public ImGuiKeyData KeysData_54;
-
-	public ImGuiKeyData KeysData_55;
-
-	public ImGuiKeyData KeysData_56;
-
-	public ImGuiKeyData KeysData_57;
-
-	public ImGuiKeyData KeysData_58;
-
-	public ImGuiKeyData KeysData_59;
-
-	public ImGuiKeyData KeysData_60;
-
-	public ImGuiKeyData KeysData_61;
-
-	public ImGuiKeyData KeysData_62;
-
-	public ImGuiKeyData KeysData_63;
-
-	public ImGuiKeyData KeysData_64;
-
-	public ImGuiKeyData KeysData_65;
-
-	public ImGuiKeyData KeysData_66;
-
-	public ImGuiKeyData KeysData_67;
-
-	public ImGuiKeyData KeysData_68;
-
-	public ImGuiKeyData KeysData_69;
-
-	public ImGuiKeyData KeysData_70;
-
-	public ImGuiKeyData KeysData_71;
-
-	public ImGuiKeyData KeysData_72;
-
-	public ImGuiKeyData KeysData_73;
-
-	public ImGuiKeyData KeysData_74;
-
-	public ImGuiKeyData KeysData_75;
-
-	public ImGuiKeyData KeysData_76;
-
-	public ImGuiKeyData KeysData_77;
-
-	public ImGuiKeyData KeysData_78;
-
-	public ImGuiKeyData KeysData_79;
-
-	public ImGuiKeyData KeysData_80;
-
-	public ImGuiKeyData KeysData_81;
-
-	public ImGuiKeyData KeysData_82;
-
-	public ImGuiKeyData KeysData_83;
-
-	public ImGuiKeyData KeysData_84;
-
-	public ImGuiKeyData KeysData_85;
-
-	public ImGuiKeyData KeysData_86;
-
-	public ImGuiKeyData KeysData_87;
-
-	public ImGuiKeyData KeysData_88;
-
-	public ImGuiKeyData KeysData_89;
-
-	public ImGuiKeyData KeysData_90;
-
-	public ImGuiKeyData KeysData_91;
-
-	public ImGuiKeyData KeysData_92;
-
-	public ImGuiKeyData KeysData_93;
-
-	public ImGuiKeyData KeysData_94;
-
-	public ImGuiKeyData KeysData_95;
-
-	public ImGuiKeyData KeysData_96;
-
-	public ImGuiKeyData KeysData_97;
-
-	public ImGuiKeyData KeysData_98;
-
-	public ImGuiKeyData KeysData_99;
-
-	public ImGuiKeyData KeysData_100;
-
-	public ImGuiKeyData KeysData_101;
-
-	public ImGuiKeyData KeysData_102;
-
-	public ImGuiKeyData KeysData_103;
-
-	public ImGuiKeyData KeysData_104;
-
-	public ImGuiKeyData KeysData_105;
-
-	public ImGuiKeyData KeysData_106;
-
-	public ImGuiKeyData KeysData_107;
-
-	public ImGuiKeyData KeysData_108;
-
-	public ImGuiKeyData KeysData_109;
-
-	public ImGuiKeyData KeysData_110;
-
-	public ImGuiKeyData KeysData_111;
-
-	public ImGuiKeyData KeysData_112;
-
-	public ImGuiKeyData KeysData_113;
-
-	public ImGuiKeyData KeysData_114;
-
-	public ImGuiKeyData KeysData_115;
-
-	public ImGuiKeyData KeysData_116;
-
-	public ImGuiKeyData KeysData_117;
-
-	public ImGuiKeyData KeysData_118;
-
-	public ImGuiKeyData KeysData_119;
-
-	public ImGuiKeyData KeysData_120;
-
-	public ImGuiKeyData KeysData_121;
-
-	public ImGuiKeyData KeysData_122;
-
-	public ImGuiKeyData KeysData_123;
-
-	public ImGuiKeyData KeysData_124;
-
-	public ImGuiKeyData KeysData_125;
-
-	public ImGuiKeyData KeysData_126;
-
-	public ImGuiKeyData KeysData_127;
-
-	public ImGuiKeyData KeysData_128;
-
-	public ImGuiKeyData KeysData_129;
-
-	public ImGuiKeyData KeysData_130;
-
-	public ImGuiKeyData KeysData_131;
-
-	public ImGuiKeyData KeysData_132;
-
-	public ImGuiKeyData KeysData_133;
-
-	public ImGuiKeyData KeysData_134;
-
-	public ImGuiKeyData KeysData_135;
-
-	public ImGuiKeyData KeysData_136;
-
-	public ImGuiKeyData KeysData_137;
-
-	public ImGuiKeyData KeysData_138;
-
-	public ImGuiKeyData KeysData_139;
-
-	public ImGuiKeyData KeysData_140;
-
-	public ImGuiKeyData KeysData_141;
-
-	public ImGuiKeyData KeysData_142;
-
-	public ImGuiKeyData KeysData_143;
-
-	public ImGuiKeyData KeysData_144;
-
-	public ImGuiKeyData KeysData_145;
-
-	public ImGuiKeyData KeysData_146;
-
-	public ImGuiKeyData KeysData_147;
-
-	public ImGuiKeyData KeysData_148;
-
-	public ImGuiKeyData KeysData_149;
-
-	public ImGuiKeyData KeysData_150;
-
-	public ImGuiKeyData KeysData_151;
-
-	public ImGuiKeyData KeysData_152;
-
-	public ImGuiKeyData KeysData_153;
-
-	public ImGuiKeyData KeysData_154;
-
-	public ImGuiKeyData KeysData_155;
-
-	public ImGuiKeyData KeysData_156;
-
-	public ImGuiKeyData KeysData_157;
-
-	public ImGuiKeyData KeysData_158;
-
-	public ImGuiKeyData KeysData_159;
-
-	public ImGuiKeyData KeysData_160;
-
-	public ImGuiKeyData KeysData_161;
-
-	public ImGuiKeyData KeysData_162;
-
-	public ImGuiKeyData KeysData_163;
-
-	public ImGuiKeyData KeysData_164;
-
-	public ImGuiKeyData KeysData_165;
-
-	public ImGuiKeyData KeysData_166;
-
-	public ImGuiKeyData KeysData_167;
-
-	public ImGuiKeyData KeysData_168;
-
-	public ImGuiKeyData KeysData_169;
-
-	public ImGuiKeyData KeysData_170;
-
-	public ImGuiKeyData KeysData_171;
-
-	public ImGuiKeyData KeysData_172;
-
-	public ImGuiKeyData KeysData_173;
-
-	public ImGuiKeyData KeysData_174;
-
-	public ImGuiKeyData KeysData_175;
-
-	public ImGuiKeyData KeysData_176;
-
-	public ImGuiKeyData KeysData_177;
-
-	public ImGuiKeyData KeysData_178;
-
-	public ImGuiKeyData KeysData_179;
-
-	public ImGuiKeyData KeysData_180;
-
-	public ImGuiKeyData KeysData_181;
-
-	public ImGuiKeyData KeysData_182;
-
-	public ImGuiKeyData KeysData_183;
-
-	public ImGuiKeyData KeysData_184;
-
-	public ImGuiKeyData KeysData_185;
-
-	public ImGuiKeyData KeysData_186;
-
-	public ImGuiKeyData KeysData_187;
-
-	public ImGuiKeyData KeysData_188;
-
-	public ImGuiKeyData KeysData_189;
-
-	public ImGuiKeyData KeysData_190;
-
-	public ImGuiKeyData KeysData_191;
-
-	public ImGuiKeyData KeysData_192;
-
-	public ImGuiKeyData KeysData_193;
-
-	public ImGuiKeyData KeysData_194;
-
-	public ImGuiKeyData KeysData_195;
-
-	public ImGuiKeyData KeysData_196;
-
-	public ImGuiKeyData KeysData_197;
-
-	public ImGuiKeyData KeysData_198;
-
-	public ImGuiKeyData KeysData_199;
-
-	public ImGuiKeyData KeysData_200;
-
-	public ImGuiKeyData KeysData_201;
-
-	public ImGuiKeyData KeysData_202;
-
-	public ImGuiKeyData KeysData_203;
-
-	public ImGuiKeyData KeysData_204;
-
-	public ImGuiKeyData KeysData_205;
-
-	public ImGuiKeyData KeysData_206;
-
-	public ImGuiKeyData KeysData_207;
-
-	public ImGuiKeyData KeysData_208;
-
-	public ImGuiKeyData KeysData_209;
-
-	public ImGuiKeyData KeysData_210;
-
-	public ImGuiKeyData KeysData_211;
-
-	public ImGuiKeyData KeysData_212;
-
-	public ImGuiKeyData KeysData_213;
-
-	public ImGuiKeyData KeysData_214;
-
-	public ImGuiKeyData KeysData_215;
-
-	public ImGuiKeyData KeysData_216;
-
-	public ImGuiKeyData KeysData_217;
-
-	public ImGuiKeyData KeysData_218;
-
-	public ImGuiKeyData KeysData_219;
-
-	public ImGuiKeyData KeysData_220;
-
-	public ImGuiKeyData KeysData_221;
-
-	public ImGuiKeyData KeysData_222;
-
-	public ImGuiKeyData KeysData_223;
-
-	public ImGuiKeyData KeysData_224;
-
-	public ImGuiKeyData KeysData_225;
-
-	public ImGuiKeyData KeysData_226;
-
-	public ImGuiKeyData KeysData_227;
-
-	public ImGuiKeyData KeysData_228;
-
-	public ImGuiKeyData KeysData_229;
-
-	public ImGuiKeyData KeysData_230;
-
-	public ImGuiKeyData KeysData_231;
-
-	public ImGuiKeyData KeysData_232;
-
-	public ImGuiKeyData KeysData_233;
-
-	public ImGuiKeyData KeysData_234;
-
-	public ImGuiKeyData KeysData_235;
-
-	public ImGuiKeyData KeysData_236;
-
-	public ImGuiKeyData KeysData_237;
-
-	public ImGuiKeyData KeysData_238;
-
-	public ImGuiKeyData KeysData_239;
-
-	public ImGuiKeyData KeysData_240;
-
-	public ImGuiKeyData KeysData_241;
-
-	public ImGuiKeyData KeysData_242;
-
-	public ImGuiKeyData KeysData_243;
-
-	public ImGuiKeyData KeysData_244;
-
-	public ImGuiKeyData KeysData_245;
-
-	public ImGuiKeyData KeysData_246;
-
-	public ImGuiKeyData KeysData_247;
-
-	public ImGuiKeyData KeysData_248;
-
-	public ImGuiKeyData KeysData_249;
-
-	public ImGuiKeyData KeysData_250;
-
-	public ImGuiKeyData KeysData_251;
-
-	public ImGuiKeyData KeysData_252;
-
-	public ImGuiKeyData KeysData_253;
-
-	public ImGuiKeyData KeysData_254;
-
-	public ImGuiKeyData KeysData_255;
-
-	public ImGuiKeyData KeysData_256;
-
-	public ImGuiKeyData KeysData_257;
-
-	public ImGuiKeyData KeysData_258;
-
-	public ImGuiKeyData KeysData_259;
-
-	public ImGuiKeyData KeysData_260;
-
-	public ImGuiKeyData KeysData_261;
-
-	public ImGuiKeyData KeysData_262;
-
-	public ImGuiKeyData KeysData_263;
-
-	public ImGuiKeyData KeysData_264;
-
-	public ImGuiKeyData KeysData_265;
-
-	public ImGuiKeyData KeysData_266;
-
-	public ImGuiKeyData KeysData_267;
-
-	public ImGuiKeyData KeysData_268;
-
-	public ImGuiKeyData KeysData_269;
-
-	public ImGuiKeyData KeysData_270;
-
-	public ImGuiKeyData KeysData_271;
-
-	public ImGuiKeyData KeysData_272;
-
-	public ImGuiKeyData KeysData_273;
-
-	public ImGuiKeyData KeysData_274;
-
-	public ImGuiKeyData KeysData_275;
-
-	public ImGuiKeyData KeysData_276;
-
-	public ImGuiKeyData KeysData_277;
-
-	public ImGuiKeyData KeysData_278;
-
-	public ImGuiKeyData KeysData_279;
-
-	public ImGuiKeyData KeysData_280;
-
-	public ImGuiKeyData KeysData_281;
-
-	public ImGuiKeyData KeysData_282;
-
-	public ImGuiKeyData KeysData_283;
-
-	public ImGuiKeyData KeysData_284;
-
-	public ImGuiKeyData KeysData_285;
-
-	public ImGuiKeyData KeysData_286;
-
-	public ImGuiKeyData KeysData_287;
-
-	public ImGuiKeyData KeysData_288;
-
-	public ImGuiKeyData KeysData_289;
-
-	public ImGuiKeyData KeysData_290;
-
-	public ImGuiKeyData KeysData_291;
-
-	public ImGuiKeyData KeysData_292;
-
-	public ImGuiKeyData KeysData_293;
-
-	public ImGuiKeyData KeysData_294;
-
-	public ImGuiKeyData KeysData_295;
-
-	public ImGuiKeyData KeysData_296;
-
-	public ImGuiKeyData KeysData_297;
-
-	public ImGuiKeyData KeysData_298;
-
-	public ImGuiKeyData KeysData_299;
-
-	public ImGuiKeyData KeysData_300;
-
-	public ImGuiKeyData KeysData_301;
-
-	public ImGuiKeyData KeysData_302;
-
-	public ImGuiKeyData KeysData_303;
-
-	public ImGuiKeyData KeysData_304;
-
-	public ImGuiKeyData KeysData_305;
-
-	public ImGuiKeyData KeysData_306;
-
-	public ImGuiKeyData KeysData_307;
-
-	public ImGuiKeyData KeysData_308;
-
-	public ImGuiKeyData KeysData_309;
-
-	public ImGuiKeyData KeysData_310;
-
-	public ImGuiKeyData KeysData_311;
-
-	public ImGuiKeyData KeysData_312;
-
-	public ImGuiKeyData KeysData_313;
-
-	public ImGuiKeyData KeysData_314;
-
-	public ImGuiKeyData KeysData_315;
-
-	public ImGuiKeyData KeysData_316;
-
-	public ImGuiKeyData KeysData_317;
-
-	public ImGuiKeyData KeysData_318;
-
-	public ImGuiKeyData KeysData_319;
-
-	public ImGuiKeyData KeysData_320;
-
-	public ImGuiKeyData KeysData_321;
-
-	public ImGuiKeyData KeysData_322;
-
-	public ImGuiKeyData KeysData_323;
-
-	public ImGuiKeyData KeysData_324;
-
-	public ImGuiKeyData KeysData_325;
-
-	public ImGuiKeyData KeysData_326;
-
-	public ImGuiKeyData KeysData_327;
-
-	public ImGuiKeyData KeysData_328;
-
-	public ImGuiKeyData KeysData_329;
-
-	public ImGuiKeyData KeysData_330;
-
-	public ImGuiKeyData KeysData_331;
-
-	public ImGuiKeyData KeysData_332;
-
-	public ImGuiKeyData KeysData_333;
-
-	public ImGuiKeyData KeysData_334;
-
-	public ImGuiKeyData KeysData_335;
-
-	public ImGuiKeyData KeysData_336;
-
-	public ImGuiKeyData KeysData_337;
-
-	public ImGuiKeyData KeysData_338;
-
-	public ImGuiKeyData KeysData_339;
-
-	public ImGuiKeyData KeysData_340;
-
-	public ImGuiKeyData KeysData_341;
-
-	public ImGuiKeyData KeysData_342;
-
-	public ImGuiKeyData KeysData_343;
-
-	public ImGuiKeyData KeysData_344;
-
-	public ImGuiKeyData KeysData_345;
-
-	public ImGuiKeyData KeysData_346;
-
-	public ImGuiKeyData KeysData_347;
-
-	public ImGuiKeyData KeysData_348;
-
-	public ImGuiKeyData KeysData_349;
-
-	public ImGuiKeyData KeysData_350;
-
-	public ImGuiKeyData KeysData_351;
-
-	public ImGuiKeyData KeysData_352;
-
-	public ImGuiKeyData KeysData_353;
-
-	public ImGuiKeyData KeysData_354;
-
-	public ImGuiKeyData KeysData_355;
-
-	public ImGuiKeyData KeysData_356;
-
-	public ImGuiKeyData KeysData_357;
-
-	public ImGuiKeyData KeysData_358;
-
-	public ImGuiKeyData KeysData_359;
-
-	public ImGuiKeyData KeysData_360;
-
-	public ImGuiKeyData KeysData_361;
-
-	public ImGuiKeyData KeysData_362;
-
-	public ImGuiKeyData KeysData_363;
-
-	public ImGuiKeyData KeysData_364;
-
-	public ImGuiKeyData KeysData_365;
-
-	public ImGuiKeyData KeysData_366;
-
-	public ImGuiKeyData KeysData_367;
-
-	public ImGuiKeyData KeysData_368;
-
-	public ImGuiKeyData KeysData_369;
-
-	public ImGuiKeyData KeysData_370;
-
-	public ImGuiKeyData KeysData_371;
-
-	public ImGuiKeyData KeysData_372;
-
-	public ImGuiKeyData KeysData_373;
-
-	public ImGuiKeyData KeysData_374;
-
-	public ImGuiKeyData KeysData_375;
-
-	public ImGuiKeyData KeysData_376;
-
-	public ImGuiKeyData KeysData_377;
-
-	public ImGuiKeyData KeysData_378;
-
-	public ImGuiKeyData KeysData_379;
-
-	public ImGuiKeyData KeysData_380;
-
-	public ImGuiKeyData KeysData_381;
-
-	public ImGuiKeyData KeysData_382;
-
-	public ImGuiKeyData KeysData_383;
-
-	public ImGuiKeyData KeysData_384;
-
-	public ImGuiKeyData KeysData_385;
-
-	public ImGuiKeyData KeysData_386;
-
-	public ImGuiKeyData KeysData_387;
-
-	public ImGuiKeyData KeysData_388;
-
-	public ImGuiKeyData KeysData_389;
-
-	public ImGuiKeyData KeysData_390;
-
-	public ImGuiKeyData KeysData_391;
-
-	public ImGuiKeyData KeysData_392;
-
-	public ImGuiKeyData KeysData_393;
-
-	public ImGuiKeyData KeysData_394;
-
-	public ImGuiKeyData KeysData_395;
-
-	public ImGuiKeyData KeysData_396;
-
-	public ImGuiKeyData KeysData_397;
-
-	public ImGuiKeyData KeysData_398;
-
-	public ImGuiKeyData KeysData_399;
-
-	public ImGuiKeyData KeysData_400;
-
-	public ImGuiKeyData KeysData_401;
-
-	public ImGuiKeyData KeysData_402;
-
-	public ImGuiKeyData KeysData_403;
-
-	public ImGuiKeyData KeysData_404;
-
-	public ImGuiKeyData KeysData_405;
-
-	public ImGuiKeyData KeysData_406;
-
-	public ImGuiKeyData KeysData_407;
-
-	public ImGuiKeyData KeysData_408;
-
-	public ImGuiKeyData KeysData_409;
-
-	public ImGuiKeyData KeysData_410;
-
-	public ImGuiKeyData KeysData_411;
-
-	public ImGuiKeyData KeysData_412;
-
-	public ImGuiKeyData KeysData_413;
-
-	public ImGuiKeyData KeysData_414;
-
-	public ImGuiKeyData KeysData_415;
-
-	public ImGuiKeyData KeysData_416;
-
-	public ImGuiKeyData KeysData_417;
-
-	public ImGuiKeyData KeysData_418;
-
-	public ImGuiKeyData KeysData_419;
-
-	public ImGuiKeyData KeysData_420;
-
-	public ImGuiKeyData KeysData_421;
-
-	public ImGuiKeyData KeysData_422;
-
-	public ImGuiKeyData KeysData_423;
-
-	public ImGuiKeyData KeysData_424;
-
-	public ImGuiKeyData KeysData_425;
-
-	public ImGuiKeyData KeysData_426;
-
-	public ImGuiKeyData KeysData_427;
-
-	public ImGuiKeyData KeysData_428;
-
-	public ImGuiKeyData KeysData_429;
-
-	public ImGuiKeyData KeysData_430;
-
-	public ImGuiKeyData KeysData_431;
-
-	public ImGuiKeyData KeysData_432;
-
-	public ImGuiKeyData KeysData_433;
-
-	public ImGuiKeyData KeysData_434;
-
-	public ImGuiKeyData KeysData_435;
-
-	public ImGuiKeyData KeysData_436;
-
-	public ImGuiKeyData KeysData_437;
-
-	public ImGuiKeyData KeysData_438;
-
-	public ImGuiKeyData KeysData_439;
-
-	public ImGuiKeyData KeysData_440;
-
-	public ImGuiKeyData KeysData_441;
-
-	public ImGuiKeyData KeysData_442;
-
-	public ImGuiKeyData KeysData_443;
-
-	public ImGuiKeyData KeysData_444;
-
-	public ImGuiKeyData KeysData_445;
-
-	public ImGuiKeyData KeysData_446;
-
-	public ImGuiKeyData KeysData_447;
-
-	public ImGuiKeyData KeysData_448;
-
-	public ImGuiKeyData KeysData_449;
-
-	public ImGuiKeyData KeysData_450;
-
-	public ImGuiKeyData KeysData_451;
-
-	public ImGuiKeyData KeysData_452;
-
-	public ImGuiKeyData KeysData_453;
-
-	public ImGuiKeyData KeysData_454;
-
-	public ImGuiKeyData KeysData_455;
-
-	public ImGuiKeyData KeysData_456;
-
-	public ImGuiKeyData KeysData_457;
-
-	public ImGuiKeyData KeysData_458;
-
-	public ImGuiKeyData KeysData_459;
-
-	public ImGuiKeyData KeysData_460;
-
-	public ImGuiKeyData KeysData_461;
-
-	public ImGuiKeyData KeysData_462;
-
-	public ImGuiKeyData KeysData_463;
-
-	public ImGuiKeyData KeysData_464;
-
-	public ImGuiKeyData KeysData_465;
-
-	public ImGuiKeyData KeysData_466;
-
-	public ImGuiKeyData KeysData_467;
-
-	public ImGuiKeyData KeysData_468;
-
-	public ImGuiKeyData KeysData_469;
-
-	public ImGuiKeyData KeysData_470;
-
-	public ImGuiKeyData KeysData_471;
-
-	public ImGuiKeyData KeysData_472;
-
-	public ImGuiKeyData KeysData_473;
-
-	public ImGuiKeyData KeysData_474;
-
-	public ImGuiKeyData KeysData_475;
-
-	public ImGuiKeyData KeysData_476;
-
-	public ImGuiKeyData KeysData_477;
-
-	public ImGuiKeyData KeysData_478;
-
-	public ImGuiKeyData KeysData_479;
-
-	public ImGuiKeyData KeysData_480;
-
-	public ImGuiKeyData KeysData_481;
-
-	public ImGuiKeyData KeysData_482;
-
-	public ImGuiKeyData KeysData_483;
-
-	public ImGuiKeyData KeysData_484;
-
-	public ImGuiKeyData KeysData_485;
-
-	public ImGuiKeyData KeysData_486;
-
-	public ImGuiKeyData KeysData_487;
-
-	public ImGuiKeyData KeysData_488;
-
-	public ImGuiKeyData KeysData_489;
-
-	public ImGuiKeyData KeysData_490;
-
-	public ImGuiKeyData KeysData_491;
-
-	public ImGuiKeyData KeysData_492;
-
-	public ImGuiKeyData KeysData_493;
-
-	public ImGuiKeyData KeysData_494;
-
-	public ImGuiKeyData KeysData_495;
-
-	public ImGuiKeyData KeysData_496;
-
-	public ImGuiKeyData KeysData_497;
-
-	public ImGuiKeyData KeysData_498;
-
-	public ImGuiKeyData KeysData_499;
-
-	public ImGuiKeyData KeysData_500;
-
-	public ImGuiKeyData KeysData_501;
-
-	public ImGuiKeyData KeysData_502;
-
-	public ImGuiKeyData KeysData_503;
-
-	public ImGuiKeyData KeysData_504;
-
-	public ImGuiKeyData KeysData_505;
-
-	public ImGuiKeyData KeysData_506;
-
-	public ImGuiKeyData KeysData_507;
-
-	public ImGuiKeyData KeysData_508;
-
-	public ImGuiKeyData KeysData_509;
-
-	public ImGuiKeyData KeysData_510;
-
-	public ImGuiKeyData KeysData_511;
-
-	public ImGuiKeyData KeysData_512;
-
-	public ImGuiKeyData KeysData_513;
-
-	public ImGuiKeyData KeysData_514;
-
-	public ImGuiKeyData KeysData_515;
-
-	public ImGuiKeyData KeysData_516;
-
-	public ImGuiKeyData KeysData_517;
-
-	public ImGuiKeyData KeysData_518;
-
-	public ImGuiKeyData KeysData_519;
-
-	public ImGuiKeyData KeysData_520;
-
-	public ImGuiKeyData KeysData_521;
-
-	public ImGuiKeyData KeysData_522;
-
-	public ImGuiKeyData KeysData_523;
-
-	public ImGuiKeyData KeysData_524;
-
-	public ImGuiKeyData KeysData_525;
-
-	public ImGuiKeyData KeysData_526;
-
-	public ImGuiKeyData KeysData_527;
-
-	public ImGuiKeyData KeysData_528;
-
-	public ImGuiKeyData KeysData_529;
-
-	public ImGuiKeyData KeysData_530;
-
-	public ImGuiKeyData KeysData_531;
-
-	public ImGuiKeyData KeysData_532;
-
-	public ImGuiKeyData KeysData_533;
-
-	public ImGuiKeyData KeysData_534;
-
-	public ImGuiKeyData KeysData_535;
-
-	public ImGuiKeyData KeysData_536;
-
-	public ImGuiKeyData KeysData_537;
-
-	public ImGuiKeyData KeysData_538;
-
-	public ImGuiKeyData KeysData_539;
-
-	public ImGuiKeyData KeysData_540;
-
-	public ImGuiKeyData KeysData_541;
-
-	public ImGuiKeyData KeysData_542;
-
-	public ImGuiKeyData KeysData_543;
-
-	public ImGuiKeyData KeysData_544;
-
-	public ImGuiKeyData KeysData_545;
-
-	public ImGuiKeyData KeysData_546;
-
-	public ImGuiKeyData KeysData_547;
-
-	public ImGuiKeyData KeysData_548;
-
-	public ImGuiKeyData KeysData_549;
-
-	public ImGuiKeyData KeysData_550;
-
-	public ImGuiKeyData KeysData_551;
-
-	public ImGuiKeyData KeysData_552;
-
-	public ImGuiKeyData KeysData_553;
-
-	public ImGuiKeyData KeysData_554;
-
-	public ImGuiKeyData KeysData_555;
-
-	public ImGuiKeyData KeysData_556;
-
-	public ImGuiKeyData KeysData_557;
-
-	public ImGuiKeyData KeysData_558;
-
-	public ImGuiKeyData KeysData_559;
-
-	public ImGuiKeyData KeysData_560;
-
-	public ImGuiKeyData KeysData_561;
-
-	public ImGuiKeyData KeysData_562;
-
-	public ImGuiKeyData KeysData_563;
-
-	public ImGuiKeyData KeysData_564;
-
-	public ImGuiKeyData KeysData_565;
-
-	public ImGuiKeyData KeysData_566;
-
-	public ImGuiKeyData KeysData_567;
-
-	public ImGuiKeyData KeysData_568;
-
-	public ImGuiKeyData KeysData_569;
-
-	public ImGuiKeyData KeysData_570;
-
-	public ImGuiKeyData KeysData_571;
-
-	public ImGuiKeyData KeysData_572;
-
-	public ImGuiKeyData KeysData_573;
-
-	public ImGuiKeyData KeysData_574;
-
-	public ImGuiKeyData KeysData_575;
-
-	public ImGuiKeyData KeysData_576;
-
-	public ImGuiKeyData KeysData_577;
-
-	public ImGuiKeyData KeysData_578;
-
-	public ImGuiKeyData KeysData_579;
-
-	public ImGuiKeyData KeysData_580;
-
-	public ImGuiKeyData KeysData_581;
-
-	public ImGuiKeyData KeysData_582;
-
-	public ImGuiKeyData KeysData_583;
-
-	public ImGuiKeyData KeysData_584;
-
-	public ImGuiKeyData KeysData_585;
-
-	public ImGuiKeyData KeysData_586;
-
-	public ImGuiKeyData KeysData_587;
-
-	public ImGuiKeyData KeysData_588;
-
-	public ImGuiKeyData KeysData_589;
-
-	public ImGuiKeyData KeysData_590;
-
-	public ImGuiKeyData KeysData_591;
-
-	public ImGuiKeyData KeysData_592;
-
-	public ImGuiKeyData KeysData_593;
-
-	public ImGuiKeyData KeysData_594;
-
-	public ImGuiKeyData KeysData_595;
-
-	public ImGuiKeyData KeysData_596;
-
-	public ImGuiKeyData KeysData_597;
-
-	public ImGuiKeyData KeysData_598;
-
-	public ImGuiKeyData KeysData_599;
-
-	public ImGuiKeyData KeysData_600;
-
-	public ImGuiKeyData KeysData_601;
-
-	public ImGuiKeyData KeysData_602;
-
-	public ImGuiKeyData KeysData_603;
-
-	public ImGuiKeyData KeysData_604;
-
-	public ImGuiKeyData KeysData_605;
-
-	public ImGuiKeyData KeysData_606;
-
-	public ImGuiKeyData KeysData_607;
-
-	public ImGuiKeyData KeysData_608;
-
-	public ImGuiKeyData KeysData_609;
-
-	public ImGuiKeyData KeysData_610;
-
-	public ImGuiKeyData KeysData_611;
-
-	public ImGuiKeyData KeysData_612;
-
-	public ImGuiKeyData KeysData_613;
-
-	public ImGuiKeyData KeysData_614;
-
-	public ImGuiKeyData KeysData_615;
-
-	public ImGuiKeyData KeysData_616;
-
-	public ImGuiKeyData KeysData_617;
-
-	public ImGuiKeyData KeysData_618;
-
-	public ImGuiKeyData KeysData_619;
-
-	public ImGuiKeyData KeysData_620;
-
-	public ImGuiKeyData KeysData_621;
-
-	public ImGuiKeyData KeysData_622;
-
-	public ImGuiKeyData KeysData_623;
-
-	public ImGuiKeyData KeysData_624;
-
-	public ImGuiKeyData KeysData_625;
-
-	public ImGuiKeyData KeysData_626;
-
-	public ImGuiKeyData KeysData_627;
-
-	public ImGuiKeyData KeysData_628;
-
-	public ImGuiKeyData KeysData_629;
-
-	public ImGuiKeyData KeysData_630;
-
-	public ImGuiKeyData KeysData_631;
-
-	public ImGuiKeyData KeysData_632;
-
-	public ImGuiKeyData KeysData_633;
-
-	public ImGuiKeyData KeysData_634;
-
-	public ImGuiKeyData KeysData_635;
-
-	public ImGuiKeyData KeysData_636;
-
-	public ImGuiKeyData KeysData_637;
-
-	public ImGuiKeyData KeysData_638;
-
-	public ImGuiKeyData KeysData_639;
-
-	public ImGuiKeyData KeysData_640;
-
-	public ImGuiKeyData KeysData_641;
-
-	public ImGuiKeyData KeysData_642;
-
-	public ImGuiKeyData KeysData_643;
-
-	public ImGuiKeyData KeysData_644;
-
-	public byte WantCaptureMouseUnlessPopupClose;
-
-	public Vector2 MousePosPrev;
-
-	public Vector2 MouseClickedPos_0;
-
-	public Vector2 MouseClickedPos_1;
-
-	public Vector2 MouseClickedPos_2;
-
-	public Vector2 MouseClickedPos_3;
-
-	public Vector2 MouseClickedPos_4;
-
-	public unsafe fixed double MouseClickedTime[5];
-
-	public unsafe fixed byte MouseClicked[5];
-
-	public unsafe fixed byte MouseDoubleClicked[5];
-
-	public ushort MouseClickedCount_0;
-
-	public ushort MouseClickedCount_1;
-
-	public ushort MouseClickedCount_2;
-
-	public ushort MouseClickedCount_3;
-
-	public ushort MouseClickedCount_4;
-
-	public ushort MouseClickedLastCount_0;
-
-	public ushort MouseClickedLastCount_1;
-
-	public ushort MouseClickedLastCount_2;
-
-	public ushort MouseClickedLastCount_3;
-
-	public ushort MouseClickedLastCount_4;
-
-	public unsafe fixed byte MouseReleased[5];
-
-	public unsafe fixed byte MouseDownOwned[5];
-
-	public unsafe fixed byte MouseDownOwnedUnlessPopupClose[5];
-
-	public unsafe fixed float MouseDownDuration[5];
-
-	public unsafe fixed float MouseDownDurationPrev[5];
-
-	public unsafe fixed float MouseDragMaxDistanceSqr[5];
-
-	public unsafe fixed float NavInputsDownDuration[20];
-
-	public unsafe fixed float NavInputsDownDurationPrev[20];
-
-	public float PenPressure;
-
-	public byte AppFocusLost;
-
-	public byte AppAcceptingEvents;
-
-	public sbyte BackendUsingLegacyKeyArrays;
-
-	public byte BackendUsingLegacyNavInputArray;
-
-	public ushort InputQueueSurrogate;
-
-	public ImVector InputQueueCharacters;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiIOPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiIOPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiIOPtr.cs	2025-05-22 18:15:44.865370600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiIOPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,601 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-using System.Text;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiIOPtr
-{
-	private static readonly HashSet<IntPtr> s_managedAllocations = new HashSet<IntPtr>(IntPtrEqualityComparer.Instance);
-
-	public unsafe ImGuiIO* NativePtr { get; }
-
-	public unsafe ref ImGuiConfigFlags ConfigFlags => ref Unsafe.AsRef<ImGuiConfigFlags>(&NativePtr->ConfigFlags);
-
-	public unsafe ref ImGuiBackendFlags BackendFlags => ref Unsafe.AsRef<ImGuiBackendFlags>(&NativePtr->BackendFlags);
-
-	public unsafe ref Vector2 DisplaySize => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplaySize);
-
-	public unsafe ref float DeltaTime => ref Unsafe.AsRef<float>(&NativePtr->DeltaTime);
-
-	public unsafe ref float IniSavingRate => ref Unsafe.AsRef<float>(&NativePtr->IniSavingRate);
-
-	public unsafe ref string IniFilename => ref Unsafe.AsRef<string>(&NativePtr->IniFilename);
-
-	public unsafe ref string LogFilename => ref Unsafe.AsRef<string>(&NativePtr->LogFilename);
-
-	public unsafe ref float MouseDoubleClickTime => ref Unsafe.AsRef<float>(&NativePtr->MouseDoubleClickTime);
-
-	public unsafe ref float MouseDoubleClickMaxDist => ref Unsafe.AsRef<float>(&NativePtr->MouseDoubleClickMaxDist);
-
-	public unsafe ref float MouseDragThreshold => ref Unsafe.AsRef<float>(&NativePtr->MouseDragThreshold);
-
-	public unsafe ref float KeyRepeatDelay => ref Unsafe.AsRef<float>(&NativePtr->KeyRepeatDelay);
-
-	public unsafe ref float KeyRepeatRate => ref Unsafe.AsRef<float>(&NativePtr->KeyRepeatRate);
-
-	public unsafe IntPtr UserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->UserData;
-		}
-		set
-		{
-			NativePtr->UserData = (void*)value;
-		}
-	}
-
-	public unsafe ref ImFontAtlasPtr Fonts => ref Unsafe.AsRef<ImFontAtlasPtr>(&NativePtr->Fonts);
-
-	public unsafe ref float FontGlobalScale => ref Unsafe.AsRef<float>(&NativePtr->FontGlobalScale);
-
-	public unsafe ref bool FontAllowUserScaling => ref Unsafe.AsRef<bool>(&NativePtr->FontAllowUserScaling);
-
-	public unsafe ref ImFontPtr FontDefault => ref Unsafe.AsRef<ImFontPtr>(&NativePtr->FontDefault);
-
-	public unsafe ref Vector2 DisplayFramebufferScale => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplayFramebufferScale);
-
-	public unsafe ref bool MouseDrawCursor => ref Unsafe.AsRef<bool>(&NativePtr->MouseDrawCursor);
-
-	public unsafe ref bool ConfigMacOSXBehaviors => ref Unsafe.AsRef<bool>(&NativePtr->ConfigMacOSXBehaviors);
-
-	public unsafe ref bool ConfigInputTrickleEventQueue => ref Unsafe.AsRef<bool>(&NativePtr->ConfigInputTrickleEventQueue);
-
-	public unsafe ref bool ConfigInputTextCursorBlink => ref Unsafe.AsRef<bool>(&NativePtr->ConfigInputTextCursorBlink);
-
-	public unsafe ref bool ConfigDragClickToInputText => ref Unsafe.AsRef<bool>(&NativePtr->ConfigDragClickToInputText);
-
-	public unsafe ref bool ConfigWindowsResizeFromEdges => ref Unsafe.AsRef<bool>(&NativePtr->ConfigWindowsResizeFromEdges);
-
-	public unsafe ref bool ConfigWindowsMoveFromTitleBarOnly => ref Unsafe.AsRef<bool>(&NativePtr->ConfigWindowsMoveFromTitleBarOnly);
-
-	public unsafe ref float ConfigMemoryCompactTimer => ref Unsafe.AsRef<float>(&NativePtr->ConfigMemoryCompactTimer);
-
-	public unsafe ref string BackendPlatformName => ref Unsafe.AsRef<string>(&NativePtr->BackendPlatformName);
-
-	public unsafe ref string BackendRendererName => ref Unsafe.AsRef<string>(&NativePtr->BackendRendererName);
-
-	public unsafe IntPtr BackendPlatformUserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->BackendPlatformUserData;
-		}
-		set
-		{
-			NativePtr->BackendPlatformUserData = (void*)value;
-		}
-	}
-
-	public unsafe IntPtr BackendRendererUserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->BackendRendererUserData;
-		}
-		set
-		{
-			NativePtr->BackendRendererUserData = (void*)value;
-		}
-	}
-
-	public unsafe IntPtr BackendLanguageUserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->BackendLanguageUserData;
-		}
-		set
-		{
-			NativePtr->BackendLanguageUserData = (void*)value;
-		}
-	}
-
-	public unsafe IntPtr GetClipboardTextFn
-	{
-		get
-		{
-			return NativePtr->GetClipboardTextFn;
-		}
-		set
-		{
-			NativePtr->GetClipboardTextFn = value;
-		}
-	}
-
-	public unsafe IntPtr SetClipboardTextFn
-	{
-		get
-		{
-			return NativePtr->SetClipboardTextFn;
-		}
-		set
-		{
-			NativePtr->SetClipboardTextFn = value;
-		}
-	}
-
-	public unsafe IntPtr ClipboardUserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->ClipboardUserData;
-		}
-		set
-		{
-			NativePtr->ClipboardUserData = (void*)value;
-		}
-	}
-
-	public unsafe IntPtr SetPlatformImeDataFn
-	{
-		get
-		{
-			return NativePtr->SetPlatformImeDataFn;
-		}
-		set
-		{
-			NativePtr->SetPlatformImeDataFn = value;
-		}
-	}
-
-	public unsafe IntPtr _UnusedPadding
-	{
-		get
-		{
-			return NativePtr->_UnusedPadding;
-		}
-		set
-		{
-			NativePtr->_UnusedPadding = value;
-		}
-	}
-
-	public unsafe ref bool WantCaptureMouse => ref Unsafe.AsRef<bool>(&NativePtr->WantCaptureMouse);
-
-	public unsafe ref bool WantCaptureKeyboard => ref Unsafe.AsRef<bool>(&NativePtr->WantCaptureKeyboard);
-
-	public unsafe ref bool WantTextInput => ref Unsafe.AsRef<bool>(&NativePtr->WantTextInput);
-
-	public unsafe ref bool WantSetMousePos => ref Unsafe.AsRef<bool>(&NativePtr->WantSetMousePos);
-
-	public unsafe ref bool WantSaveIniSettings => ref Unsafe.AsRef<bool>(&NativePtr->WantSaveIniSettings);
-
-	public unsafe ref bool NavActive => ref Unsafe.AsRef<bool>(&NativePtr->NavActive);
-
-	public unsafe ref bool NavVisible => ref Unsafe.AsRef<bool>(&NativePtr->NavVisible);
-
-	public unsafe ref float Framerate => ref Unsafe.AsRef<float>(&NativePtr->Framerate);
-
-	public unsafe ref int MetricsRenderVertices => ref Unsafe.AsRef<int>(&NativePtr->MetricsRenderVertices);
-
-	public unsafe ref int MetricsRenderIndices => ref Unsafe.AsRef<int>(&NativePtr->MetricsRenderIndices);
-
-	public unsafe ref int MetricsRenderWindows => ref Unsafe.AsRef<int>(&NativePtr->MetricsRenderWindows);
-
-	public unsafe ref int MetricsActiveWindows => ref Unsafe.AsRef<int>(&NativePtr->MetricsActiveWindows);
-
-	public unsafe ref int MetricsActiveAllocations => ref Unsafe.AsRef<int>(&NativePtr->MetricsActiveAllocations);
-
-	public unsafe ref Vector2 MouseDelta => ref Unsafe.AsRef<Vector2>(&NativePtr->MouseDelta);
-
-	public unsafe RangeAccessor<int> KeyMap
-	{
-		get
-		{
-			int* ptr = NativePtr->KeyMap;
-			return new RangeAccessor<int>(&ptr, 645);
-		}
-	}
-
-	public unsafe RangeAccessor<bool> KeysDown
-	{
-		get
-		{
-			byte* ptr = NativePtr->KeysDown;
-			return new RangeAccessor<bool>(&ptr, 645);
-		}
-	}
-
-	public unsafe ref Vector2 MousePos => ref Unsafe.AsRef<Vector2>(&NativePtr->MousePos);
-
-	public unsafe RangeAccessor<bool> MouseDown
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseDown;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe ref float MouseWheel => ref Unsafe.AsRef<float>(&NativePtr->MouseWheel);
-
-	public unsafe ref float MouseWheelH => ref Unsafe.AsRef<float>(&NativePtr->MouseWheelH);
-
-	public unsafe ref bool KeyCtrl => ref Unsafe.AsRef<bool>(&NativePtr->KeyCtrl);
-
-	public unsafe ref bool KeyShift => ref Unsafe.AsRef<bool>(&NativePtr->KeyShift);
-
-	public unsafe ref bool KeyAlt => ref Unsafe.AsRef<bool>(&NativePtr->KeyAlt);
-
-	public unsafe ref bool KeySuper => ref Unsafe.AsRef<bool>(&NativePtr->KeySuper);
-
-	public unsafe RangeAccessor<float> NavInputs
-	{
-		get
-		{
-			float* ptr = NativePtr->NavInputs;
-			return new RangeAccessor<float>(&ptr, 20);
-		}
-	}
-
-	public unsafe ref ImGuiModFlags KeyMods => ref Unsafe.AsRef<ImGuiModFlags>(&NativePtr->KeyMods);
-
-	public unsafe RangeAccessor<ImGuiKeyData> KeysData => new RangeAccessor<ImGuiKeyData>(&NativePtr->KeysData_0, 645);
-
-	public unsafe ref bool WantCaptureMouseUnlessPopupClose => ref Unsafe.AsRef<bool>(&NativePtr->WantCaptureMouseUnlessPopupClose);
-
-	public unsafe ref Vector2 MousePosPrev => ref Unsafe.AsRef<Vector2>(&NativePtr->MousePosPrev);
-
-	public unsafe RangeAccessor<Vector2> MouseClickedPos => new RangeAccessor<Vector2>(&NativePtr->MouseClickedPos_0, 5);
-
-	public unsafe RangeAccessor<double> MouseClickedTime
-	{
-		get
-		{
-			double* ptr = NativePtr->MouseClickedTime;
-			return new RangeAccessor<double>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<bool> MouseClicked
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseClicked;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<bool> MouseDoubleClicked
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseDoubleClicked;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<ushort> MouseClickedCount => new RangeAccessor<ushort>(&NativePtr->MouseClickedCount_0, 5);
-
-	public unsafe RangeAccessor<ushort> MouseClickedLastCount => new RangeAccessor<ushort>(&NativePtr->MouseClickedLastCount_0, 5);
-
-	public unsafe RangeAccessor<bool> MouseReleased
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseReleased;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<bool> MouseDownOwned
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseDownOwned;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<bool> MouseDownOwnedUnlessPopupClose
-	{
-		get
-		{
-			byte* ptr = NativePtr->MouseDownOwnedUnlessPopupClose;
-			return new RangeAccessor<bool>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<float> MouseDownDuration
-	{
-		get
-		{
-			float* ptr = NativePtr->MouseDownDuration;
-			return new RangeAccessor<float>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<float> MouseDownDurationPrev
-	{
-		get
-		{
-			float* ptr = NativePtr->MouseDownDurationPrev;
-			return new RangeAccessor<float>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<float> MouseDragMaxDistanceSqr
-	{
-		get
-		{
-			float* ptr = NativePtr->MouseDragMaxDistanceSqr;
-			return new RangeAccessor<float>(&ptr, 5);
-		}
-	}
-
-	public unsafe RangeAccessor<float> NavInputsDownDuration
-	{
-		get
-		{
-			float* ptr = NativePtr->NavInputsDownDuration;
-			return new RangeAccessor<float>(&ptr, 20);
-		}
-	}
-
-	public unsafe RangeAccessor<float> NavInputsDownDurationPrev
-	{
-		get
-		{
-			float* ptr = NativePtr->NavInputsDownDurationPrev;
-			return new RangeAccessor<float>(&ptr, 20);
-		}
-	}
-
-	public unsafe ref float PenPressure => ref Unsafe.AsRef<float>(&NativePtr->PenPressure);
-
-	public unsafe ref bool AppFocusLost => ref Unsafe.AsRef<bool>(&NativePtr->AppFocusLost);
-
-	public unsafe ref bool AppAcceptingEvents => ref Unsafe.AsRef<bool>(&NativePtr->AppAcceptingEvents);
-
-	public unsafe ref sbyte BackendUsingLegacyKeyArrays => ref Unsafe.AsRef<sbyte>(&NativePtr->BackendUsingLegacyKeyArrays);
-
-	public unsafe ref bool BackendUsingLegacyNavInputArray => ref Unsafe.AsRef<bool>(&NativePtr->BackendUsingLegacyNavInputArray);
-
-	public unsafe ref ushort InputQueueSurrogate => ref Unsafe.AsRef<ushort>(&NativePtr->InputQueueSurrogate);
-
-	public unsafe ImVector<ushort> InputQueueCharacters => new ImVector<ushort>(NativePtr->InputQueueCharacters);
-
-	public unsafe ImGuiIOPtr(ImGuiIO* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiIOPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiIO*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiIOPtr(ImGuiIO* nativePtr)
-	{
-		return new ImGuiIOPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiIO*(ImGuiIOPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiIOPtr(IntPtr nativePtr)
-	{
-		return new ImGuiIOPtr(nativePtr);
-	}
-
-	public unsafe void AddFocusEvent(bool focused)
-	{
-		byte focused2 = MarshalUtils.bool_to_byte(focused);
-		ImGuiDebug.Log("ImGuiIO_AddFocusEvent #1");
-		ImGuiNative.ImGuiIO_AddFocusEvent(NativePtr, focused2);
-	}
-
-	public unsafe void AddInputCharacter(uint c)
-	{
-		ImGuiDebug.Log("ImGuiIO_AddInputCharacter #1");
-		ImGuiNative.ImGuiIO_AddInputCharacter(NativePtr, c);
-	}
-
-	public unsafe void AddInputCharacterUTF16(ushort c)
-	{
-		ImGuiDebug.Log("ImGuiIO_AddInputCharacterUTF16 #1");
-		ImGuiNative.ImGuiIO_AddInputCharacterUTF16(NativePtr, c);
-	}
-
-	public unsafe void AddInputCharactersUTF8(string str)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiIO_AddInputCharactersUTF8 #1");
-		ImGuiNative.ImGuiIO_AddInputCharactersUTF8(NativePtr, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void AddKeyAnalogEvent(ImGuiKey key, bool down, float v)
-	{
-		byte down2 = MarshalUtils.bool_to_byte(down);
-		ImGuiDebug.Log("ImGuiIO_AddKeyAnalogEvent #1");
-		ImGuiNative.ImGuiIO_AddKeyAnalogEvent(NativePtr, key, down2, v);
-	}
-
-	public unsafe void AddKeyEvent(ImGuiKey key, bool down)
-	{
-		byte down2 = MarshalUtils.bool_to_byte(down);
-		ImGuiDebug.Log("ImGuiIO_AddKeyEvent #1");
-		ImGuiNative.ImGuiIO_AddKeyEvent(NativePtr, key, down2);
-	}
-
-	public unsafe void AddMouseButtonEvent(int button, bool down)
-	{
-		byte down2 = MarshalUtils.bool_to_byte(down);
-		ImGuiDebug.Log("ImGuiIO_AddMouseButtonEvent #1");
-		ImGuiNative.ImGuiIO_AddMouseButtonEvent(NativePtr, button, down2);
-	}
-
-	public unsafe void AddMousePosEvent(float x, float y)
-	{
-		ImGuiDebug.Log("ImGuiIO_AddMousePosEvent #1");
-		ImGuiNative.ImGuiIO_AddMousePosEvent(NativePtr, x, y);
-	}
-
-	public unsafe void AddMouseWheelEvent(float wh_x, float wh_y)
-	{
-		ImGuiDebug.Log("ImGuiIO_AddMouseWheelEvent #1");
-		ImGuiNative.ImGuiIO_AddMouseWheelEvent(NativePtr, wh_x, wh_y);
-	}
-
-	public unsafe void ClearInputCharacters()
-	{
-		ImGuiDebug.Log("ImGuiIO_ClearInputCharacters #1");
-		ImGuiNative.ImGuiIO_ClearInputCharacters(NativePtr);
-	}
-
-	public unsafe void ClearInputKeys()
-	{
-		ImGuiDebug.Log("ImGuiIO_ClearInputKeys #1");
-		ImGuiNative.ImGuiIO_ClearInputKeys(NativePtr);
-	}
-
-	public unsafe void SetAppAcceptingEvents(bool accepting_events)
-	{
-		byte accepting_events2 = MarshalUtils.bool_to_byte(accepting_events);
-		ImGuiDebug.Log("ImGuiIO_SetAppAcceptingEvents #1");
-		ImGuiNative.ImGuiIO_SetAppAcceptingEvents(NativePtr, accepting_events2);
-	}
-
-	public unsafe void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode)
-	{
-		ImGuiDebug.Log("ImGuiIO_SetKeyEventNativeData #1");
-		ImGuiNative.ImGuiIO_SetKeyEventNativeData(NativePtr, key, native_keycode, native_scancode, -1);
-	}
-
-	public unsafe void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
-	{
-		ImGuiDebug.Log("ImGuiIO_SetKeyEventNativeData #2");
-		ImGuiNative.ImGuiIO_SetKeyEventNativeData(NativePtr, key, native_keycode, native_scancode, native_legacy_index);
-	}
-
-	public unsafe void ImGuiIO_destroy()
-	{
-		ImGuiDebug.Log("ImGuiIO_destroy #1");
-		ImGuiNative.ImGuiIO_destroy(NativePtr);
-	}
-
-	public unsafe void SetBackendRendererName(string name)
-	{
-		if (NativePtr->BackendRendererName != null)
-		{
-			if (s_managedAllocations.Contains((IntPtr)NativePtr->BackendRendererName))
-			{
-				Util.Free(NativePtr->BackendRendererName);
-			}
-			NativePtr->BackendRendererName = null;
-		}
-		if (name != null)
-		{
-			int byteCount = Encoding.UTF8.GetByteCount(name);
-			byte* ptr = Util.Allocate(byteCount + 1);
-			int utf = Util.GetUtf8(name, ptr, byteCount);
-			ptr[utf] = 0;
-			NativePtr->BackendRendererName = ptr;
-			s_managedAllocations.Add((IntPtr)ptr);
-		}
-	}
-
-	public unsafe void SetBackendPlatformName(string name)
-	{
-		if (NativePtr->BackendPlatformName != null)
-		{
-			if (s_managedAllocations.Contains((IntPtr)NativePtr->BackendPlatformName))
-			{
-				Util.Free(NativePtr->BackendPlatformName);
-			}
-			NativePtr->BackendPlatformName = null;
-		}
-		if (name != null)
-		{
-			int byteCount = Encoding.UTF8.GetByteCount(name);
-			byte* ptr = Util.Allocate(byteCount + 1);
-			int utf = Util.GetUtf8(name, ptr, byteCount);
-			ptr[utf] = 0;
-			NativePtr->BackendPlatformName = ptr;
-			s_managedAllocations.Add((IntPtr)ptr);
-		}
-	}
-
-	public unsafe void SetIniFilename(string name)
-	{
-		if (NativePtr->IniFilename != null)
-		{
-			if (s_managedAllocations.Contains((IntPtr)NativePtr->IniFilename))
-			{
-				Util.Free(NativePtr->IniFilename);
-			}
-			NativePtr->IniFilename = null;
-		}
-		if (name != null)
-		{
-			int byteCount = Encoding.UTF8.GetByteCount(name);
-			byte* ptr = Util.Allocate(byteCount + 1);
-			int utf = Util.GetUtf8(name, ptr, byteCount);
-			ptr[utf] = 0;
-			NativePtr->IniFilename = ptr;
-			s_managedAllocations.Add((IntPtr)ptr);
-		}
-	}
-
-	public unsafe void SetBackendPlatformUserData<T>(T? data) where T : unmanaged
-	{
-		if (NativePtr->BackendPlatformUserData != null)
-		{
-			if (s_managedAllocations.Contains((IntPtr)NativePtr->BackendPlatformUserData))
-			{
-				Marshal.FreeHGlobal((IntPtr)NativePtr->BackendPlatformUserData);
-			}
-			NativePtr->BackendPlatformUserData = null;
-		}
-		if (data.HasValue)
-		{
-			IntPtr intPtr = Marshal.AllocHGlobal(sizeof(T));
-			Marshal.StructureToPtr(data, intPtr, fDeleteOld: false);
-			NativePtr->BackendPlatformUserData = intPtr.ToPointer();
-			s_managedAllocations.Add(intPtr);
-		}
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiItemFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiItemFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiItemFlags.cs	2025-05-22 18:15:44.497529200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiItemFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,15 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiItemFlags
-{
-	None = 0,
-	NoTabStop = 1,
-	ButtonRepeat = 2,
-	Disabled = 4,
-	NoNav = 8,
-	NoNavDefaultFocus = 0x10,
-	SelectableDontClosePopup = 0x20,
-	MixedValue = 0x40,
-	ReadOnly = 0x80,
-	Inputable = 0x100
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiItemStatusFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiItemStatusFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiItemStatusFlags.cs	2025-05-22 18:15:44.515540400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiItemStatusFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,15 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiItemStatusFlags
-{
-	None = 0,
-	HoveredRect = 1,
-	HasDisplayRect = 2,
-	Edited = 4,
-	ToggledSelection = 8,
-	ToggledOpen = 0x10,
-	HasDeactivated = 0x20,
-	Deactivated = 0x40,
-	HoveredWindow = 0x80,
-	FocusedByTabbing = 0x100
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKey.cs Out/RG.ImGui/ImGuiNET/ImGuiKey.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKey.cs	2025-05-22 18:15:44.516544400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiKey.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,145 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiKey
-{
-	None = 0,
-	Tab = 512,
-	LeftArrow = 513,
-	RightArrow = 514,
-	UpArrow = 515,
-	DownArrow = 516,
-	PageUp = 517,
-	PageDown = 518,
-	Home = 519,
-	End = 520,
-	Insert = 521,
-	Delete = 522,
-	Backspace = 523,
-	Space = 524,
-	Enter = 525,
-	Escape = 526,
-	LeftCtrl = 527,
-	LeftShift = 528,
-	LeftAlt = 529,
-	LeftSuper = 530,
-	RightCtrl = 531,
-	RightShift = 532,
-	RightAlt = 533,
-	RightSuper = 534,
-	Menu = 535,
-	_0 = 536,
-	_1 = 537,
-	_2 = 538,
-	_3 = 539,
-	_4 = 540,
-	_5 = 541,
-	_6 = 542,
-	_7 = 543,
-	_8 = 544,
-	_9 = 545,
-	A = 546,
-	B = 547,
-	C = 548,
-	D = 549,
-	E = 550,
-	F = 551,
-	G = 552,
-	H = 553,
-	I = 554,
-	J = 555,
-	K = 556,
-	L = 557,
-	M = 558,
-	N = 559,
-	O = 560,
-	P = 561,
-	Q = 562,
-	R = 563,
-	S = 564,
-	T = 565,
-	U = 566,
-	V = 567,
-	W = 568,
-	X = 569,
-	Y = 570,
-	Z = 571,
-	F1 = 572,
-	F2 = 573,
-	F3 = 574,
-	F4 = 575,
-	F5 = 576,
-	F6 = 577,
-	F7 = 578,
-	F8 = 579,
-	F9 = 580,
-	F10 = 581,
-	F11 = 582,
-	F12 = 583,
-	Apostrophe = 584,
-	Comma = 585,
-	Minus = 586,
-	Period = 587,
-	Slash = 588,
-	Semicolon = 589,
-	Equal = 590,
-	LeftBracket = 591,
-	Backslash = 592,
-	RightBracket = 593,
-	GraveAccent = 594,
-	CapsLock = 595,
-	ScrollLock = 596,
-	NumLock = 597,
-	PrintScreen = 598,
-	Pause = 599,
-	Keypad0 = 600,
-	Keypad1 = 601,
-	Keypad2 = 602,
-	Keypad3 = 603,
-	Keypad4 = 604,
-	Keypad5 = 605,
-	Keypad6 = 606,
-	Keypad7 = 607,
-	Keypad8 = 608,
-	Keypad9 = 609,
-	KeypadDecimal = 610,
-	KeypadDivide = 611,
-	KeypadMultiply = 612,
-	KeypadSubtract = 613,
-	KeypadAdd = 614,
-	KeypadEnter = 615,
-	KeypadEqual = 616,
-	GamepadStart = 617,
-	GamepadBack = 618,
-	GamepadFaceUp = 619,
-	GamepadFaceDown = 620,
-	GamepadFaceLeft = 621,
-	GamepadFaceRight = 622,
-	GamepadDpadUp = 623,
-	GamepadDpadDown = 624,
-	GamepadDpadLeft = 625,
-	GamepadDpadRight = 626,
-	GamepadL1 = 627,
-	GamepadR1 = 628,
-	GamepadL2 = 629,
-	GamepadR2 = 630,
-	GamepadL3 = 631,
-	GamepadR3 = 632,
-	GamepadLStickUp = 633,
-	GamepadLStickDown = 634,
-	GamepadLStickLeft = 635,
-	GamepadLStickRight = 636,
-	GamepadRStickUp = 637,
-	GamepadRStickDown = 638,
-	GamepadRStickLeft = 639,
-	GamepadRStickRight = 640,
-	ModCtrl = 641,
-	ModShift = 642,
-	ModAlt = 643,
-	ModSuper = 644,
-	COUNT = 645,
-	NamedKey_BEGIN = 512,
-	NamedKey_END = 645,
-	NamedKey_COUNT = 133,
-	KeysData_SIZE = 645,
-	KeysData_OFFSET = 0
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyData.cs Out/RG.ImGui/ImGuiNET/ImGuiKeyData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyData.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiKeyData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiKeyData
-{
-	public byte Down;
-
-	public float DownDuration;
-
-	public float DownDurationPrev;
-
-	public float AnalogValue;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiKeyDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyDataPtr.cs	2025-05-22 18:15:44.528052500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiKeyDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiKeyDataPtr
-{
-	public unsafe ImGuiKeyData* NativePtr { get; }
-
-	public unsafe ref bool Down => ref Unsafe.AsRef<bool>(&NativePtr->Down);
-
-	public unsafe ref float DownDuration => ref Unsafe.AsRef<float>(&NativePtr->DownDuration);
-
-	public unsafe ref float DownDurationPrev => ref Unsafe.AsRef<float>(&NativePtr->DownDurationPrev);
-
-	public unsafe ref float AnalogValue => ref Unsafe.AsRef<float>(&NativePtr->AnalogValue);
-
-	public unsafe ImGuiKeyDataPtr(ImGuiKeyData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiKeyDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiKeyData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiKeyDataPtr(ImGuiKeyData* nativePtr)
-	{
-		return new ImGuiKeyDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiKeyData*(ImGuiKeyDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiKeyDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiKeyDataPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiKeyPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiKeyPrivate.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiKeyPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiKeyPrivate
-{
-	LegacyNativeKey_BEGIN = 0,
-	LegacyNativeKey_END = 512,
-	Gamepad_BEGIN = 617,
-	Gamepad_END = 641
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLastItemData.cs Out/RG.ImGui/ImGuiNET/ImGuiLastItemData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLastItemData.cs	2025-05-22 18:15:44.515540400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiLastItemData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,18 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiLastItemData
-{
-	public uint ID;
-
-	public ImGuiItemFlags InFlags;
-
-	public ImGuiItemStatusFlags StatusFlags;
-
-	public Rect Rect;
-
-	public Rect NavRect;
-
-	public Rect DisplayRect;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLastItemDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiLastItemDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLastItemDataPtr.cs	2025-05-22 18:15:44.544737200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiLastItemDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,53 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiLastItemDataPtr
-{
-	public unsafe ImGuiLastItemData* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiItemFlags InFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&NativePtr->InFlags);
-
-	public unsafe ref ImGuiItemStatusFlags StatusFlags => ref Unsafe.AsRef<ImGuiItemStatusFlags>(&NativePtr->StatusFlags);
-
-	public unsafe ref Rect Rect => ref Unsafe.AsRef<Rect>(&NativePtr->Rect);
-
-	public unsafe ref Rect NavRect => ref Unsafe.AsRef<Rect>(&NativePtr->NavRect);
-
-	public unsafe ref Rect DisplayRect => ref Unsafe.AsRef<Rect>(&NativePtr->DisplayRect);
-
-	public unsafe ImGuiLastItemDataPtr(ImGuiLastItemData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiLastItemDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiLastItemData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiLastItemDataPtr(ImGuiLastItemData* nativePtr)
-	{
-		return new ImGuiLastItemDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiLastItemData*(ImGuiLastItemDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiLastItemDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiLastItemDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiLastItemData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiLastItemData_destroy #1");
-		ImGuiNative.ImGuiLastItemData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLayoutType.cs Out/RG.ImGui/ImGuiNET/ImGuiLayoutType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLayoutType.cs	2025-05-22 18:15:44.517541400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiLayoutType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiLayoutType
-{
-	Horizontal,
-	Vertical
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipper.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipper.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipper.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipper.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiListClipper
-{
-	public int DisplayStart;
-
-	public int DisplayEnd;
-
-	public int ItemsCount;
-
-	public float ItemsHeight;
-
-	public float StartPosY;
-
-	public unsafe void* TempData;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperData.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipperData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperData.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipperData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiListClipperData
-{
-	public unsafe ImGuiListClipper* ListClipper;
-
-	public float LossynessOffset;
-
-	public int StepNo;
-
-	public int ItemsFrozen;
-
-	public ImVector Ranges;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipperDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperDataPtr.cs	2025-05-22 18:15:44.544737200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipperDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,56 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiListClipperDataPtr
-{
-	public unsafe ImGuiListClipperData* NativePtr { get; }
-
-	public unsafe ref ImGuiListClipperPtr ListClipper => ref Unsafe.AsRef<ImGuiListClipperPtr>(&NativePtr->ListClipper);
-
-	public unsafe ref float LossynessOffset => ref Unsafe.AsRef<float>(&NativePtr->LossynessOffset);
-
-	public unsafe ref int StepNo => ref Unsafe.AsRef<int>(&NativePtr->StepNo);
-
-	public unsafe ref int ItemsFrozen => ref Unsafe.AsRef<int>(&NativePtr->ItemsFrozen);
-
-	public unsafe ImPtrVector<ImGuiListClipperRangePtr> Ranges => new ImPtrVector<ImGuiListClipperRangePtr>(NativePtr->Ranges, Unsafe.SizeOf<ImGuiListClipperRange>());
-
-	public unsafe ImGuiListClipperDataPtr(ImGuiListClipperData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiListClipperDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiListClipperData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiListClipperDataPtr(ImGuiListClipperData* nativePtr)
-	{
-		return new ImGuiListClipperDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiListClipperData*(ImGuiListClipperDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiListClipperDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiListClipperDataPtr(nativePtr);
-	}
-
-	public unsafe void Reset(ImGuiListClipperPtr clipper)
-	{
-		ImGuiDebug.Log("ImGuiListClipperData_Reset #1");
-		ImGuiNative.ImGuiListClipperData_Reset(NativePtr, clipper);
-	}
-
-	public unsafe void ImGuiListClipperData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiListClipperData_destroy #1");
-		ImGuiNative.ImGuiListClipperData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipperPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperPtr.cs	2025-05-22 18:15:44.557251300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipperPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,92 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiListClipperPtr
-{
-	public unsafe ImGuiListClipper* NativePtr { get; }
-
-	public unsafe ref int DisplayStart => ref Unsafe.AsRef<int>(&NativePtr->DisplayStart);
-
-	public unsafe ref int DisplayEnd => ref Unsafe.AsRef<int>(&NativePtr->DisplayEnd);
-
-	public unsafe ref int ItemsCount => ref Unsafe.AsRef<int>(&NativePtr->ItemsCount);
-
-	public unsafe ref float ItemsHeight => ref Unsafe.AsRef<float>(&NativePtr->ItemsHeight);
-
-	public unsafe ref float StartPosY => ref Unsafe.AsRef<float>(&NativePtr->StartPosY);
-
-	public unsafe IntPtr TempData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->TempData;
-		}
-		set
-		{
-			NativePtr->TempData = (void*)value;
-		}
-	}
-
-	public unsafe ImGuiListClipperPtr(ImGuiListClipper* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiListClipperPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiListClipper*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiListClipperPtr(ImGuiListClipper* nativePtr)
-	{
-		return new ImGuiListClipperPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiListClipper*(ImGuiListClipperPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiListClipperPtr(IntPtr nativePtr)
-	{
-		return new ImGuiListClipperPtr(nativePtr);
-	}
-
-	public unsafe void Begin(int items_count)
-	{
-		ImGuiDebug.Log("ImGuiListClipper_Begin #1");
-		ImGuiNative.ImGuiListClipper_Begin(NativePtr, items_count, -1f);
-	}
-
-	public unsafe void Begin(int items_count, float items_height)
-	{
-		ImGuiDebug.Log("ImGuiListClipper_Begin #2");
-		ImGuiNative.ImGuiListClipper_Begin(NativePtr, items_count, items_height);
-	}
-
-	public unsafe void End()
-	{
-		ImGuiDebug.Log("ImGuiListClipper_End #1");
-		ImGuiNative.ImGuiListClipper_End(NativePtr);
-	}
-
-	public unsafe void ForceDisplayRangeByIndices(int item_min, int item_max)
-	{
-		ImGuiDebug.Log("ImGuiListClipper_ForceDisplayRangeByIndices #1");
-		ImGuiNative.ImGuiListClipper_ForceDisplayRangeByIndices(NativePtr, item_min, item_max);
-	}
-
-	public unsafe bool Step()
-	{
-		ImGuiDebug.Log("ImGuiListClipper_Step #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiListClipper_Step(NativePtr));
-	}
-
-	public unsafe void ImGuiListClipper_destroy()
-	{
-		ImGuiDebug.Log("ImGuiListClipper_destroy #1");
-		ImGuiNative.ImGuiListClipper_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperRange.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipperRange.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperRange.cs	2025-05-22 18:15:44.555253700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipperRange.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiListClipperRange
-{
-	public int Min;
-
-	public int Max;
-
-	public byte PosToIndexConvert;
-
-	public sbyte PosToIndexOffsetMin;
-
-	public sbyte PosToIndexOffsetMax;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperRangePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiListClipperRangePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiListClipperRangePtr.cs	2025-05-22 18:15:44.555253700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiListClipperRangePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,56 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiListClipperRangePtr
-{
-	public unsafe ImGuiListClipperRange* NativePtr { get; }
-
-	public unsafe ref int Min => ref Unsafe.AsRef<int>(&NativePtr->Min);
-
-	public unsafe ref int Max => ref Unsafe.AsRef<int>(&NativePtr->Max);
-
-	public unsafe ref bool PosToIndexConvert => ref Unsafe.AsRef<bool>(&NativePtr->PosToIndexConvert);
-
-	public unsafe ref sbyte PosToIndexOffsetMin => ref Unsafe.AsRef<sbyte>(&NativePtr->PosToIndexOffsetMin);
-
-	public unsafe ref sbyte PosToIndexOffsetMax => ref Unsafe.AsRef<sbyte>(&NativePtr->PosToIndexOffsetMax);
-
-	public unsafe ImGuiListClipperRangePtr(ImGuiListClipperRange* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiListClipperRangePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiListClipperRange*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiListClipperRangePtr(ImGuiListClipperRange* nativePtr)
-	{
-		return new ImGuiListClipperRangePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiListClipperRange*(ImGuiListClipperRangePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiListClipperRangePtr(IntPtr nativePtr)
-	{
-		return new ImGuiListClipperRangePtr(nativePtr);
-	}
-
-	public static ImGuiListClipperRange FromIndices(int min, int max)
-	{
-		ImGuiDebug.Log("ImGuiListClipperRange_FromIndices #1");
-		return ImGuiNative.ImGuiListClipperRange_FromIndices(min, max);
-	}
-
-	public static ImGuiListClipperRange FromPositions(float y1, float y2, int off_min, int off_max)
-	{
-		ImGuiDebug.Log("ImGuiListClipperRange_FromPositions #1");
-		return ImGuiNative.ImGuiListClipperRange_FromPositions(y1, y2, off_min, off_max);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLogType.cs Out/RG.ImGui/ImGuiNET/ImGuiLogType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiLogType.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiLogType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiLogType
-{
-	None,
-	TTY,
-	File,
-	Buffer,
-	Clipboard
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMenuColumns.cs Out/RG.ImGui/ImGuiNET/ImGuiMenuColumns.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMenuColumns.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMenuColumns.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,26 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiMenuColumns
-{
-	public uint TotalWidth;
-
-	public uint NextTotalWidth;
-
-	public ushort Spacing;
-
-	public ushort OffsetIcon;
-
-	public ushort OffsetLabel;
-
-	public ushort OffsetShortcut;
-
-	public ushort OffsetMark;
-
-	public ushort Widths_0;
-
-	public ushort Widths_1;
-
-	public ushort Widths_2;
-
-	public ushort Widths_3;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMenuColumnsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiMenuColumnsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMenuColumnsPtr.cs	2025-05-22 18:15:44.555253700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMenuColumnsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,76 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiMenuColumnsPtr
-{
-	public unsafe ImGuiMenuColumns* NativePtr { get; }
-
-	public unsafe ref uint TotalWidth => ref Unsafe.AsRef<uint>(&NativePtr->TotalWidth);
-
-	public unsafe ref uint NextTotalWidth => ref Unsafe.AsRef<uint>(&NativePtr->NextTotalWidth);
-
-	public unsafe ref ushort Spacing => ref Unsafe.AsRef<ushort>(&NativePtr->Spacing);
-
-	public unsafe ref ushort OffsetIcon => ref Unsafe.AsRef<ushort>(&NativePtr->OffsetIcon);
-
-	public unsafe ref ushort OffsetLabel => ref Unsafe.AsRef<ushort>(&NativePtr->OffsetLabel);
-
-	public unsafe ref ushort OffsetShortcut => ref Unsafe.AsRef<ushort>(&NativePtr->OffsetShortcut);
-
-	public unsafe ref ushort OffsetMark => ref Unsafe.AsRef<ushort>(&NativePtr->OffsetMark);
-
-	public unsafe RangeAccessor<ushort> Widths => new RangeAccessor<ushort>(&NativePtr->Widths_0, 4);
-
-	public unsafe ImGuiMenuColumnsPtr(ImGuiMenuColumns* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiMenuColumnsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiMenuColumns*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiMenuColumnsPtr(ImGuiMenuColumns* nativePtr)
-	{
-		return new ImGuiMenuColumnsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiMenuColumns*(ImGuiMenuColumnsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiMenuColumnsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiMenuColumnsPtr(nativePtr);
-	}
-
-	public unsafe void CalcNextTotalWidth(bool update_offsets)
-	{
-		byte update_offsets2 = MarshalUtils.bool_to_byte(update_offsets);
-		ImGuiDebug.Log("ImGuiMenuColumns_CalcNextTotalWidth #1");
-		ImGuiNative.ImGuiMenuColumns_CalcNextTotalWidth(NativePtr, update_offsets2);
-	}
-
-	public unsafe float DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)
-	{
-		ImGuiDebug.Log("ImGuiMenuColumns_DeclColumns #1");
-		return ImGuiNative.ImGuiMenuColumns_DeclColumns(NativePtr, w_icon, w_label, w_shortcut, w_mark);
-	}
-
-	public unsafe void Update(float spacing, bool window_reappearing)
-	{
-		byte window_reappearing2 = MarshalUtils.bool_to_byte(window_reappearing);
-		ImGuiDebug.Log("ImGuiMenuColumns_Update #1");
-		ImGuiNative.ImGuiMenuColumns_Update(NativePtr, spacing, window_reappearing2);
-	}
-
-	public unsafe void ImGuiMenuColumns_destroy()
-	{
-		ImGuiDebug.Log("ImGuiMenuColumns_destroy #1");
-		ImGuiNative.ImGuiMenuColumns_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMetricsConfig.cs Out/RG.ImGui/ImGuiNET/ImGuiMetricsConfig.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMetricsConfig.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMetricsConfig.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,22 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiMetricsConfig
-{
-	public byte ShowDebugLog;
-
-	public byte ShowStackTool;
-
-	public byte ShowWindowsRects;
-
-	public byte ShowWindowsBeginOrder;
-
-	public byte ShowTablesRects;
-
-	public byte ShowDrawCmdMesh;
-
-	public byte ShowDrawCmdBoundingBoxes;
-
-	public int ShowWindowsRectsType;
-
-	public int ShowTablesRectsType;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMetricsConfigPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiMetricsConfigPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMetricsConfigPtr.cs	2025-05-22 18:15:44.545733700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMetricsConfigPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,58 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiMetricsConfigPtr
-{
-	public unsafe ImGuiMetricsConfig* NativePtr { get; }
-
-	public unsafe ref bool ShowDebugLog => ref Unsafe.AsRef<bool>(&NativePtr->ShowDebugLog);
-
-	public unsafe ref bool ShowStackTool => ref Unsafe.AsRef<bool>(&NativePtr->ShowStackTool);
-
-	public unsafe ref bool ShowWindowsRects => ref Unsafe.AsRef<bool>(&NativePtr->ShowWindowsRects);
-
-	public unsafe ref bool ShowWindowsBeginOrder => ref Unsafe.AsRef<bool>(&NativePtr->ShowWindowsBeginOrder);
-
-	public unsafe ref bool ShowTablesRects => ref Unsafe.AsRef<bool>(&NativePtr->ShowTablesRects);
-
-	public unsafe ref bool ShowDrawCmdMesh => ref Unsafe.AsRef<bool>(&NativePtr->ShowDrawCmdMesh);
-
-	public unsafe ref bool ShowDrawCmdBoundingBoxes => ref Unsafe.AsRef<bool>(&NativePtr->ShowDrawCmdBoundingBoxes);
-
-	public unsafe ref int ShowWindowsRectsType => ref Unsafe.AsRef<int>(&NativePtr->ShowWindowsRectsType);
-
-	public unsafe ref int ShowTablesRectsType => ref Unsafe.AsRef<int>(&NativePtr->ShowTablesRectsType);
-
-	public unsafe ImGuiMetricsConfigPtr(ImGuiMetricsConfig* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiMetricsConfigPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiMetricsConfig*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiMetricsConfigPtr(ImGuiMetricsConfig* nativePtr)
-	{
-		return new ImGuiMetricsConfigPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiMetricsConfig*(ImGuiMetricsConfigPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiMetricsConfigPtr(IntPtr nativePtr)
-	{
-		return new ImGuiMetricsConfigPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiMetricsConfig_destroy()
-	{
-		ImGuiDebug.Log("ImGuiMetricsConfig_destroy #1");
-		ImGuiNative.ImGuiMetricsConfig_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiModFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiModFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiModFlags.cs	2025-05-22 18:15:44.557251300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiModFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiModFlags
-{
-	None = 0,
-	Ctrl = 1,
-	Shift = 2,
-	Alt = 4,
-	Super = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMouseButton.cs Out/RG.ImGui/ImGuiNET/ImGuiMouseButton.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMouseButton.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMouseButton.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiMouseButton
-{
-	Left = 0,
-	Right = 1,
-	Middle = 2,
-	COUNT = 5
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMouseCursor.cs Out/RG.ImGui/ImGuiNET/ImGuiMouseCursor.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiMouseCursor.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiMouseCursor.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiMouseCursor
-{
-	None = -1,
-	Arrow,
-	TextInput,
-	ResizeAll,
-	ResizeNS,
-	ResizeEW,
-	ResizeNESW,
-	ResizeNWSE,
-	Hand,
-	NotAllowed,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNative.cs Out/RG.ImGui/ImGuiNET/ImGuiNative.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNative.cs	2025-05-22 18:15:44.902064200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNative.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3311 +0,0 @@
-using System;
-using System.Runtime.InteropServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public static class ImGuiNative
-{
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImColor_HSV(ImColor* pOut, float h, float s, float v, float a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImColor* ImColor_ImColor_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImColor* ImColor_ImColor_Float(float r, float g, float b, float a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImColor* ImColor_ImColor_Vec4(Vector4 col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImColor* ImColor_ImColor_Int(int r, int g, int b, int a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImColor* ImColor_ImColor_U32(uint rgba);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImColor_SetHSV(ImColor* self, float h, float s, float v, float a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImColor_destroy(ImColor* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr ImDrawCmd_GetTexID(ImDrawCmd* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawCmd* ImDrawCmd_ImDrawCmd();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawCmd_destroy(ImDrawCmd* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawData_Clear(ImDrawData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawData* ImDrawData_ImDrawData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawData_ScaleClipRects(ImDrawData* self, Vector2 fb_scale);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawData_destroy(ImDrawData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawDataBuilder_Clear(ImDrawDataBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImDrawDataBuilder_GetDrawListCount(ImDrawDataBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddBezierCubic(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddBezierQuadratic(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddCallback(ImDrawList* self, ImDrawCallback? callback, IntPtr callback_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddCircle(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddCircleFilled(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddConvexPolyFilled(ImDrawList* self, Vector2* points, int num_points, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddDrawCmd(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddImage(ImDrawList* self, IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddImageQuad(ImDrawList* self, IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddImageRounded(ImDrawList* self, IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col, float rounding, ImDrawFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddLine(ImDrawList* self, Vector2 p1, Vector2 p2, uint col, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddNgon(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddNgonFilled(ImDrawList* self, Vector2 center, float radius, uint col, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddPolyline(ImDrawList* self, Vector2* points, int num_points, uint col, ImDrawFlags flags, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddQuad(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddQuadFilled(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddRect(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddRectFilled(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col, float rounding, ImDrawFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddRectFilledMultiColor(ImDrawList* self, Vector2 p_min, Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddText_Vec2(ImDrawList* self, Vector2 pos, uint col, byte* text_begin, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddText_FontPtr(ImDrawList* self, ImFont* font, float font_size, Vector2 pos, uint col, byte* text_begin, byte* text_end, float wrap_width, Vector4* cpu_fine_clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddTriangle(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_AddTriangleFilled(ImDrawList* self, Vector2 p1, Vector2 p2, Vector2 p3, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_ChannelsMerge(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_ChannelsSetCurrent(ImDrawList* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_ChannelsSplit(ImDrawList* self, int count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_GetClipRectMax(Vector2* pOut, ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_GetClipRectMin(Vector2* pOut, ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* ImDrawList_ImDrawList(ImDrawListSharedData* shared_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathArcTo(ImDrawList* self, Vector2 center, float radius, float a_min, float a_max, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathArcToFast(ImDrawList* self, Vector2 center, float radius, int a_min_of_12, int a_max_of_12);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList* self, Vector2 p2, Vector2 p3, Vector2 p4, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self, Vector2 p2, Vector2 p3, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathClear(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathFillConvex(ImDrawList* self, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathLineTo(ImDrawList* self, Vector2 pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self, Vector2 pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathRect(ImDrawList* self, Vector2 rect_min, Vector2 rect_max, float rounding, ImDrawFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PathStroke(ImDrawList* self, uint col, ImDrawFlags flags, float thickness);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PopClipRect(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PopTextureID(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimQuadUV(ImDrawList* self, Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uv_a, Vector2 uv_b, Vector2 uv_c, Vector2 uv_d, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimRect(ImDrawList* self, Vector2 a, Vector2 b, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimRectUV(ImDrawList* self, Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimReserve(ImDrawList* self, int idx_count, int vtx_count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimUnreserve(ImDrawList* self, int idx_count, int vtx_count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimVtx(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimWriteIdx(ImDrawList* self, ushort idx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PrimWriteVtx(ImDrawList* self, Vector2 pos, Vector2 uv, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PushClipRect(ImDrawList* self, Vector2 clip_rect_min, Vector2 clip_rect_max, byte intersect_with_current_clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_PushTextureID(ImDrawList* self, IntPtr texture_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList* self, float radius);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__ClearFreeMemory(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__OnChangedClipRect(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__OnChangedTextureID(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__OnChangedVtxOffset(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__PathArcToFastEx(ImDrawList* self, Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__PathArcToN(ImDrawList* self, Vector2 center, float radius, float a_min, float a_max, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__PopUnusedDrawCmd(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__ResetForNewFrame(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList__TryMergeDrawCmds(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawList_destroy(ImDrawList* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawListSharedData* ImDrawListSharedData_ImDrawListSharedData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData* self, float max_error);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSharedData_destroy(ImDrawListSharedData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_Clear(ImDrawListSplitter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_Merge(ImDrawListSplitter* self, ImDrawList* draw_list);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self, ImDrawList* draw_list, int channel_idx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_Split(ImDrawListSplitter* self, ImDrawList* draw_list, int count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImDrawListSplitter_destroy(ImDrawListSplitter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_AddGlyph(ImFont* self, ImFontConfig* src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_AddRemapChar(ImFont* self, ushort dst, ushort src, byte overwrite_dst);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_BuildLookupTable(ImFont* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_CalcTextSizeA(Vector2* pOut, ImFont* self, float size, float max_width, float wrap_width, byte* text_begin, byte* text_end, byte** remaining);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImFont_CalcWordWrapPositionA(ImFont* self, float scale, byte* text, byte* text_end, float wrap_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_ClearOutputData(ImFont* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontGlyph* ImFont_FindGlyph(ImFont* self, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImFont_GetCharAdvance(ImFont* self, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImFont_GetDebugName(ImFont* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_GrowIndex(ImFont* self, int new_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFont_ImFont();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFont_IsGlyphRangeUnused(ImFont* self, uint c_begin, uint c_last);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFont_IsLoaded(ImFont* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_RenderChar(ImFont* self, ImDrawList* draw_list, float size, Vector2 pos, uint col, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_RenderText(ImFont* self, ImDrawList* draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, byte* text_begin, byte* text_end, float wrap_width, byte cpu_fine_clip);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_SetGlyphVisible(ImFont* self, ushort c, byte visible);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFont_destroy(ImFont* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self, ImFont* font, ushort id, int width, int height, float advance_x, Vector2 offset);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self, int width, int height);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFont(ImFontAtlas* self, ImFontConfig* font_cfg);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self, ImFontConfig* font_cfg);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self, byte* filename, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self, byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self, IntPtr compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self, IntPtr font_data, int font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFontAtlas_Build(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self, ImFontAtlasCustomRect* rect, Vector2* out_uv_min, Vector2* out_uv_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_Clear(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_ClearFonts(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_ClearInputData(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_ClearTexData(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self, int index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self, ImGuiMouseCursor cursor, Vector2* out_offset, Vector2* out_size, Vector2* out_uv_border, Vector2* out_uv_fill);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontAtlas* ImFontAtlas_ImFontAtlas();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFontAtlas_IsBuilt(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_SetTexID(ImFontAtlas* self, IntPtr id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlas_destroy(ImFontAtlas* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontConfig* ImFontConfig_ImFontConfig();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontConfig_destroy(ImFontConfig* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self, ushort* ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self, byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self, ImVector out_ranges);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self, uint n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self, uint n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiComboPreviewData* ImGuiComboPreviewData_ImGuiComboPreviewData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddFocusEvent(ImGuiIO* self, byte focused);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddInputCharacter(ImGuiIO* self, uint c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self, ushort c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self, byte* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self, ImGuiKey key, byte down, float v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddKeyEvent(ImGuiIO* self, ImGuiKey key, byte down);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self, int button, byte down);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddMousePosEvent(ImGuiIO* self, float x, float y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self, float wh_x, float wh_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_ClearInputCharacters(ImGuiIO* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_ClearInputKeys(ImGuiIO* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiIO* ImGuiIO_ImGuiIO();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self, byte accepting_events);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiIO_destroy(ImGuiIO* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self, int pos, int bytes_count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self, int pos, byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiLastItemData* ImGuiLastItemData_ImGuiLastItemData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiLastItemData_destroy(ImGuiLastItemData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipper_Begin(ImGuiListClipper* self, int items_count, float items_height);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipper_End(ImGuiListClipper* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self, int item_min, int item_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiListClipper* ImGuiListClipper_ImGuiListClipper();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiListClipper_Step(ImGuiListClipper* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipper_destroy(ImGuiListClipper* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiListClipperData* ImGuiListClipperData_ImGuiListClipperData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipperData_Reset(ImGuiListClipperData* self, ImGuiListClipper* clipper);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiListClipperData_destroy(ImGuiListClipperData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns* self, byte update_offsets);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns* self, float w_icon, float w_label, float w_shortcut, float w_mark);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiMenuColumns* ImGuiMenuColumns_ImGuiMenuColumns();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiMenuColumns_Update(ImGuiMenuColumns* self, float spacing, byte window_reappearing);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiMetricsConfig* ImGuiMetricsConfig_ImGuiMetricsConfig();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiMetricsConfig_destroy(ImGuiMetricsConfig* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiNextItemData* ImGuiNextItemData_ImGuiNextItemData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiNextItemData_destroy(ImGuiNextItemData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiNextWindowData* ImGuiNextWindowData_ImGuiNextWindowData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiOldColumnData* ImGuiOldColumnData_ImGuiOldColumnData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiOldColumns* ImGuiOldColumns_ImGuiOldColumns();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiOldColumns_destroy(ImGuiOldColumns* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiPayload_Clear(ImGuiPayload* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPayload* ImGuiPayload_ImGuiPayload();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiPayload_IsDataType(ImGuiPayload* self, byte* type);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiPayload_IsDelivery(ImGuiPayload* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiPayload_IsPreview(ImGuiPayload* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiPayload_destroy(ImGuiPayload* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPlatformImeData* ImGuiPlatformImeData_ImGuiPlatformImeData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(IntPtr ptr);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPtrOrIndex* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiSettingsHandler* ImGuiSettingsHandler_ImGuiSettingsHandler();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStackLevelInfo* ImGuiStackLevelInfo_ImGuiStackLevelInfo();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStackSizes_CompareWithCurrentState(ImGuiStackSizes* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStackSizes* ImGuiStackSizes_ImGuiStackSizes();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStackSizes_SetToCurrentState(ImGuiStackSizes* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStackSizes_destroy(ImGuiStackSizes* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStackTool* ImGuiStackTool_ImGuiStackTool();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStackTool_destroy(ImGuiStackTool* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_Clear(ImGuiStorage* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiStorage_GetBool(ImGuiStorage* self, uint key, byte default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImGuiStorage_GetBoolRef(ImGuiStorage* self, uint key, byte default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImGuiStorage_GetFloat(ImGuiStorage* self, uint key, float default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float* ImGuiStorage_GetFloatRef(ImGuiStorage* self, uint key, float default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImGuiStorage_GetInt(ImGuiStorage* self, uint key, int default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int* ImGuiStorage_GetIntRef(ImGuiStorage* self, uint key, int default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr ImGuiStorage_GetVoidPtr(ImGuiStorage* self, uint key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self, uint key, IntPtr default_val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_SetAllInt(ImGuiStorage* self, int val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_SetBool(ImGuiStorage* self, uint key, byte val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_SetFloat(ImGuiStorage* self, uint key, float val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_SetInt(ImGuiStorage* self, uint key, int val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStorage_SetVoidPtr(ImGuiStorage* self, uint key, IntPtr val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStyle* ImGuiStyle_ImGuiStyle();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self, float scale_factor);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiStyle_destroy(ImGuiStyle* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImGuiTabBar_GetTabName(ImGuiTabBar* self, ImGuiTabItem* tab);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImGuiTabBar_GetTabOrder(ImGuiTabBar* self, ImGuiTabItem* tab);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTabBar* ImGuiTabBar_ImGuiTabBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTabBar_destroy(ImGuiTabBar* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTabItem* ImGuiTabItem_ImGuiTabItem();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTabItem_destroy(ImGuiTabItem* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTable* ImGuiTable_ImGuiTable();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTable_destroy(ImGuiTable* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableColumn* ImGuiTableColumn_ImGuiTableColumn();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableColumn_destroy(ImGuiTableColumn* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableColumnSettings* ImGuiTableColumnSettings_ImGuiTableColumnSettings();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableInstanceData* ImGuiTableInstanceData_ImGuiTableInstanceData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableColumnSettings* ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSettings* ImGuiTableSettings_ImGuiTableSettings();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableSettings_destroy(ImGuiTableSettings* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSortSpecs* ImGuiTableSortSpecs_ImGuiTableSortSpecs();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableTempData* ImGuiTableTempData_ImGuiTableTempData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTableTempData_destroy(ImGuiTableTempData* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_append(ImGuiTextBuffer* self, byte* str, byte* str_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_appendf(ImGuiTextBuffer* self, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self, int capacity);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextFilter_Build(ImGuiTextFilter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiTextFilter_Draw(ImGuiTextFilter* self, byte* label, float width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(byte* default_filter);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiTextFilter_PassFilter(ImGuiTextFilter* self, byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextFilter_destroy(ImGuiTextFilter* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Str(byte* _b, byte* _e);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextRange_destroy(ImGuiTextRange* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImGuiTextRange_empty(ImGuiTextRange* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiTextRange_split(ImGuiTextRange* self, byte separator, ImVector @out);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewport_GetCenter(Vector2* pOut, ImGuiViewport* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewport_GetWorkCenter(Vector2* pOut, ImGuiViewport* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiViewport* ImGuiViewport_ImGuiViewport();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewport_destroy(ImGuiViewport* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_CalcWorkRectPos(Vector2* pOut, ImGuiViewportP* self, Vector2 off_min);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_CalcWorkRectSize(Vector2* pOut, ImGuiViewportP* self, Vector2 off_min, Vector2 off_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_GetBuildWorkRect(Rect* pOut, ImGuiViewportP* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_GetMainRect(Rect* pOut, ImGuiViewportP* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_GetWorkRect(Rect* pOut, ImGuiViewportP* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiViewportP* ImGuiViewportP_ImGuiViewportP();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiViewportP_destroy(ImGuiViewportP* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImGuiWindow_CalcFontSize(ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint ImGuiWindow_GetID_Str(ImGuiWindow* self, byte* str, byte* str_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint ImGuiWindow_GetID_Ptr(ImGuiWindow* self, IntPtr ptr);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint ImGuiWindow_GetID_Int(ImGuiWindow* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint ImGuiWindow_GetIDFromRectangle(ImGuiWindow* self, Rect r_abs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* ImGuiWindow_ImGuiWindow(IntPtr context, byte* name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImGuiWindow_MenuBarHeight(ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiWindow_MenuBarRect(Rect* pOut, ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiWindow_Rect(Rect* pOut, ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float ImGuiWindow_TitleBarHeight(ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiWindow_TitleBarRect(Rect* pOut, ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImGuiWindow_destroy(ImGuiWindow* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImVec1* ImVec1_ImVec1_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImVec1* ImVec1_ImVec1_Float(float _x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImVec1_destroy(ImVec1* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_ClearAllBits(ImBitArray* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_ClearBit(ImBitArray* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImBitArray* ImBitArray_ImBitArray();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_SetAllBits(ImBitArray* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_SetBit(ImBitArray* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_SetBitRange(ImBitArray* self, int n, int n2);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte ImBitArray_TestBit(ImBitArray* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImBitArray_destroy(ImBitArray* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int ImSpanAllocator_GetArenaSizeInBytes(ImSpanAllocator* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr ImSpanAllocator_GetSpanPtrBegin(ImSpanAllocator* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr ImSpanAllocator_GetSpanPtrEnd(ImSpanAllocator* self, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImSpanAllocator* ImSpanAllocator_ImSpanAllocator();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImSpanAllocator_Reserve(ImSpanAllocator* self, int n, uint sz, int a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImSpanAllocator_SetArenaBasePtr(ImSpanAllocator* self, IntPtr base_ptr);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void ImSpanAllocator_destroy(ImSpanAllocator* self);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPayload* igAcceptDragDropPayload(byte* type, ImGuiDragDropFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igActivateItem(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igAddContextHook(IntPtr context, IntPtr hook);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igAddSettingsHandler(ImGuiSettingsHandler* handler);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igAlignTextToFramePadding();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igArrowButton(byte* str_id, ImGuiDir dir);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igArrowButtonEx(byte* str_id, ImGuiDir dir, Vector2 size_arg, ImGuiButtonFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBegin(byte* name, byte* p_open, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginChild_Str(byte* str_id, Vector2 size, byte border, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginChild_ID(uint id, Vector2 size, byte border, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginChildEx(byte* name, uint id, Vector2 size_arg, byte border, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginChildFrame(uint id, Vector2 size, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBeginColumns(byte* str_id, int count, ImGuiOldColumnFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginCombo(byte* label, byte* preview_value, ImGuiComboFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginComboPopup(uint popup_id, Rect bb, ImGuiComboFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginComboPreview();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igBeginDisabled(byte disabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginDragDropSource(ImGuiDragDropFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginDragDropTarget();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginDragDropTargetCustom(Rect bb, uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igBeginGroup();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginListBox(byte* label, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginMainMenuBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginMenu(byte* label, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginMenuBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginMenuEx(byte* label, byte* icon, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginPopup(byte* str_id, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginPopupContextItem(byte* str_id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginPopupContextVoid(byte* str_id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginPopupContextWindow(byte* str_id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igBeginPopupEx(uint id, ImGuiWindowFlags extra_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginPopupModal(byte* name, byte* p_open, ImGuiWindowFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginTabBar(byte* str_id, ImGuiTabBarFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginTabBarEx(ImGuiTabBar* tab_bar, Rect bb, ImGuiTabBarFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginTabItem(byte* label, byte* p_open, ImGuiTabItemFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginTable(byte* str_id, int column, ImGuiTableFlags flags, Vector2 outer_size, float inner_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginTableEx(byte* name, uint id, int columns_count, ImGuiTableFlags flags, Vector2 outer_size, float inner_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igBeginTooltip();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igBeginViewportSideBar(byte* name, ImGuiViewport* viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBringWindowToDisplayBack(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* above_window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBringWindowToDisplayFront(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBringWindowToFocusFront(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igBullet();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBulletText(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igBulletTextV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igButton(byte* label, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igButtonBehavior(Rect bb, uint id, byte* out_hovered, byte* out_held, ImGuiButtonFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igButtonEx(byte* label, Vector2 size_arg, ImGuiButtonFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igCalcItemSize(Vector2* pOut, Vector2 size, float default_w, float default_h);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igCalcItemWidth();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igCalcTextSize(Vector2* pOut, byte* text, byte* text_end, byte hide_text_after_double_hash, float wrap_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igCalcWindowNextAutoFitSize(Vector2* pOut, ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igCalcWrapWidthForPos(Vector2 pos, float wrap_pos_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igCallContextHooks(IntPtr context, IntPtr type);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCheckbox(byte* label, byte* v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCheckboxFlags_IntPtr(byte* label, int* flags, int flags_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCheckboxFlags_UintPtr(byte* label, uint* flags, uint flags_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCheckboxFlags_S64Ptr(byte* label, long* flags, long flags_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCheckboxFlags_U64Ptr(byte* label, ulong* flags, ulong flags_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igClearActiveID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igClearDragDrop();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igClearIniSettings();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igCloseButton(uint id, Vector2 pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igCloseCurrentPopup();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igClosePopupToLevel(int remaining, byte restore_focus_to_window_under_popup);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igClosePopupsExceptModals();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igClosePopupsOverWindow(ImGuiWindow* ref_window, byte restore_focus_to_window_under_popup);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igCollapseButton(uint id, Vector2 pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCollapsingHeader_TreeNodeFlags(byte* label, ImGuiTreeNodeFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCollapsingHeader_BoolPtr(byte* label, byte* p_visible, ImGuiTreeNodeFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igColorButton(byte* desc_id, Vector4 col, ImGuiColorEditFlags flags, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igColorConvertFloat4ToU32(Vector4 @in);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorConvertU32ToFloat4(Vector4* pOut, uint @in);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igColorEdit3(byte* label, Vector3* col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igColorEdit4(byte* label, Vector4* col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorEditOptionsPopup(float* col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igColorPicker3(byte* label, Vector3* col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igColorPicker4(byte* label, Vector4* col, ImGuiColorEditFlags flags, float* ref_col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorPickerOptionsPopup(float* ref_col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColorTooltip(byte* text, float* col, ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igColumns(int count, byte* id, byte border);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCombo_Str_arr(byte* label, int* current_item, byte** items, int items_count, int popup_max_height_in_items);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCombo_Str(byte* label, int* current_item, byte* items_separated_by_zeros, int popup_max_height_in_items);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igCombo_FnBoolPtr(byte* label, int* current_item, IntPtr items_getter, IntPtr data, int items_count, int popup_max_height_in_items);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr igCreateContext(ImFontAtlas* shared_font_atlas);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr igCreateNewWindowSettings(byte* name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDataTypeApplyFromText(byte* buf, ImGuiDataType data_type, IntPtr p_data, byte* format);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, IntPtr output, IntPtr arg_1, IntPtr arg_2);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igDataTypeClamp(ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igDataTypeCompare(ImGuiDataType data_type, IntPtr arg_1, IntPtr arg_2);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igDataTypeFormatString(byte* buf, int buf_size, ImGuiDataType data_type, IntPtr p_data, byte* format);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiDataTypeInfo* igDataTypeGetInfo(ImGuiDataType data_type);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDebugCheckVersionAndDataLayout(byte* version_str, uint sz_io, uint sz_style, uint sz_vec2, uint sz_vec4, uint sz_drawvert, uint sz_drawidx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDebugDrawItemRect(uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDebugHookIdInfo(uint id, ImGuiDataType data_type, IntPtr data_id, IntPtr data_id_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugLog(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugLogV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeColumns(ImGuiOldColumns* columns);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeFont(ImFont* font);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeFontGlyph(ImFont* font, ImFontGlyph* glyph);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDebugNodeInputTextState(IntPtr state);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeStorage(ImGuiStorage* storage, byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeTabBar(ImGuiTabBar* tab_bar, byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeTable(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeTableSettings(ImGuiTableSettings* settings);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeViewport(ImGuiViewportP* viewport);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeWindow(ImGuiWindow* window, byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDebugNodeWindowSettings(IntPtr settings);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeWindowsList(ImVector windows, byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGuiWindow* parent_in_begin_stack);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, Rect bb);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDebugStartItemPicker();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igDebugTextEncoding(byte* text);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDestroyContext(IntPtr ctx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragBehavior(uint id, ImGuiDataType data_type, IntPtr p_v, float v_speed, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragFloat(byte* label, float* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragFloat2(byte* label, Vector2* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragFloat3(byte* label, Vector3* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragFloat4(byte* label, Vector4* v, float v_speed, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragFloatRange2(byte* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, byte* format, byte* format_max, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragInt(byte* label, int* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragInt2(byte* label, int* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragInt3(byte* label, int* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragInt4(byte* label, int* v, float v_speed, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragIntRange2(byte* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, byte* format, byte* format_max, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragScalar(byte* label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igDragScalarN(byte* label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igDummy(Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEnd();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndChild();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndChildFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndColumns();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndCombo();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndComboPreview();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndDisabled();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndDragDropSource();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndDragDropTarget();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndGroup();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndListBox();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndMainMenuBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndMenu();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndMenuBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndPopup();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndTabBar();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndTabItem();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndTable();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igEndTooltip();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igFindBestWindowPosForPopup(Vector2* pOut, ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igFindBestWindowPosForPopupEx(Vector2* pOut, Vector2 ref_pos, Vector2 size, ImGuiDir* last_dir, Rect r_outer, Rect r_avoid, ImGuiPopupPositionPolicy policy);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiOldColumns* igFindOrCreateColumns(ImGuiWindow* window, uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr igFindOrCreateWindowSettings(byte* name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igFindRenderedTextEnd(byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiSettingsHandler* igFindSettingsHandler(byte* type_name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igFindWindowByID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igFindWindowByName(byte* name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igFindWindowDisplayIndex(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern IntPtr igFindWindowSettings(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igFocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igFocusWindow(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGcAwakeTransientWindowBuffers(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igGcCompactTransientMiscBuffers();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGcCompactTransientWindowBuffers(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetActiveID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetBackgroundDrawList_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igGetClipboardText();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetColorU32_Col(ImGuiCol idx, float alpha_mul);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetColorU32_Vec4(Vector4 col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetColorU32_U32(uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetColumnIndex();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float igGetColumnNormFromOffset(ImGuiOldColumns* columns, float offset);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetColumnOffset(int column_index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float igGetColumnOffsetFromNorm(ImGuiOldColumns* columns, float offset_norm);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetColumnWidth(int column_index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetColumnsCount();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetColumnsID(byte* str_id, int count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetContentRegionAvail(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetContentRegionMax(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetContentRegionMaxAbs(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern IntPtr igGetCurrentContext();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTable* igGetCurrentTable();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igGetCurrentWindow();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igGetCurrentWindowRead();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetCursorPos(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetCursorPosX();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetCursorPosY();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetCursorScreenPos(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetCursorStartPos(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* igGetDefaultFont();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiPayload* igGetDragDropPayload();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawData* igGetDrawData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawListSharedData* igGetDrawListSharedData();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetFocusID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetFocusScope();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetFocusedFocusScope();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFont* igGetFont();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetFontSize();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetFontTexUvWhitePixel(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetForegroundDrawList_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetForegroundDrawList_WindowPtr(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetFrameCount();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetFrameHeight();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetFrameHeightWithSpacing();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetHoveredID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetID_Str(byte* str_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetID_StrStr(byte* str_id_begin, byte* str_id_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetID_Ptr(IntPtr ptr_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetIDWithSeed(byte* str_id_begin, byte* str_id_end, uint seed);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiIO* igGetIO();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern IntPtr igGetInputTextState(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiItemFlags igGetItemFlags();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igGetItemID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetItemRectMax(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetItemRectMin(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetItemRectSize(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiItemStatusFlags igGetItemStatusFlags();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiKeyData* igGetKeyData(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetKeyIndex(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igGetKeyName(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiViewport* igGetMainViewport();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiModFlags igGetMergedModFlags();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igGetMouseClickedCount(ImGuiMouseButton button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiMouseCursor igGetMouseCursor();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetMouseDragDelta(Vector2* pOut, ImGuiMouseButton button, float lock_threshold);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetMousePos(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetMousePosOnOpeningCurrentPopup(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetNavInputAmount(ImGuiNavInput n, ImGuiNavReadMode mode);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetNavInputAmount2d(Vector2* pOut, ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, float slow_factor, float fast_factor);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igGetNavInputName(ImGuiNavInput n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetPopupAllowedExtentRect(Rect* pOut, ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetScrollMaxX();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetScrollMaxY();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetScrollX();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetScrollY();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStorage* igGetStateStorage();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiStyle* igGetStyle();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igGetStyleColorName(ImGuiCol idx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern Vector4* igGetStyleColorVec4(ImGuiCol idx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetTextLineHeight();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetTextLineHeightWithSpacing();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igGetTime();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igGetTopMostAndVisiblePopupModal();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiWindow* igGetTopMostPopupModal();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetTreeNodeToLabelSpacing();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igGetVersion();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetWindowContentRegionMax(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetWindowContentRegionMin(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImDrawList* igGetWindowDrawList();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetWindowHeight();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetWindowPos(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetWindowResizeCornerID(ImGuiWindow* window, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igGetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetWindowScrollbarRect(Rect* pOut, ImGuiWindow* window, ImGuiAxis axis);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igGetWindowSize(Vector2* pOut);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igGetWindowWidth();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igImAbs_Int(int x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImAbs_Float(float x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igImAbs_double(double x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igImAlphaBlendColors(uint col_a, uint col_b);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBezierCubicCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBezierCubicClosestPoint(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, int num_segments);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBezierCubicClosestPointCasteljau(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 p, float tess_tol);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBezierQuadraticCalc(Vector2* pOut, Vector2 p1, Vector2 p2, Vector2 p3, float t);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBitArrayClearBit(uint* arr, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBitArraySetBit(uint* arr, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImBitArraySetBitRange(uint* arr, int n, int n2);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igImBitArrayTestBit(uint* arr, int n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImCharIsBlankA(byte c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImCharIsBlankW(uint c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImClamp(Vector2* pOut, Vector2 v, Vector2 mn, Vector2 mx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImDot(Vector2 a, Vector2 b);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern IntPtr igImFileLoadToMemory(byte* filename, byte* mode, uint* out_file_size, int padding_bytes);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImFloor_Float(float f);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFloor_Vec2(Vector2* pOut, Vector2 v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImFloorSigned_Float(float f);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFloorSigned_Vec2(Vector2* pOut, Vector2 v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildFinish(ImFontAtlas* atlas);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildInit(ImFontAtlas* atlas);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildMultiplyCalcLookupTable(byte* out_table, float in_multiply_factor);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildMultiplyRectAlpha8(byte* table, byte* pixels, int x, int y, int w, int h, int stride);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, IntPtr stbrp_context_opaque);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, byte* in_str, byte in_marker_char, uint in_marker_pixel_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, byte* in_str, byte in_marker_char, byte in_marker_pixel_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImFontBuilderIO* igImFontAtlasGetBuilderForStbTruetype();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImFormatString(byte* buf, uint buf_size, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFormatStringToTempBuffer(byte** out_buf, byte** out_buf_end, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImFormatStringToTempBufferV(byte** out_buf, byte** out_buf_end, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImFormatStringV(byte* buf, uint buf_size, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiDir igImGetDirQuadrantFromDelta(float dx, float dy);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern uint igImHashData(IntPtr data, uint data_size, uint seed);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igImHashStr(byte* data, uint data_size, uint seed);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImInvLength(Vector2 lhs, float fail_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImIsFloatAboveGuaranteedIntegerPrecision(float f);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImIsPowerOfTwo_Int(int v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImIsPowerOfTwo_U64(ulong v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImLengthSqr_Vec2(Vector2 lhs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImLengthSqr_Vec4(Vector4 lhs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImLerp_Vec2Float(Vector2* pOut, Vector2 a, Vector2 b, float t);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImLerp_Vec2Vec2(Vector2* pOut, Vector2 a, Vector2 b, Vector2 t);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImLerp_Vec4(Vector4* pOut, Vector4 a, Vector4 b, float t);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImLineClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 p);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImLinearSweep(float current, float target, float speed);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImLog_Float(float x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igImLog_double(double x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImMax(Vector2* pOut, Vector2 lhs, Vector2 rhs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImMin(Vector2* pOut, Vector2 lhs, Vector2 rhs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igImModPositive(int a, int b);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImMul(Vector2* pOut, Vector2 lhs, Vector2 rhs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImParseFormatFindEnd(byte* format);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImParseFormatFindStart(byte* format);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImParseFormatPrecision(byte* format, int default_value);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImParseFormatSanitizeForPrinting(byte* fmt_in, byte* fmt_out, uint fmt_out_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImParseFormatSanitizeForScanning(byte* fmt_in, byte* fmt_out, uint fmt_out_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImParseFormatTrimDecorations(byte* format, byte* buf, uint buf_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImPow_Float(float x, float y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igImPow_double(double x, double y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igImQsort(IntPtr @base, uint count, uint size_of_element, IntPtr compare_func);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImRotate(Vector2* pOut, Vector2 v, float cos_a, float sin_a);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImRsqrt_Float(float x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igImRsqrt_double(double x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImSaturate(float f);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImSign_Float(float x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern double igImSign_double(double x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStrSkipBlank(byte* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImStrTrimBlanks(byte* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ushort* igImStrbolW(ushort* buf_mid_line, ushort* buf_begin);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStrchrRange(byte* str_begin, byte* str_end, byte c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStrdup(byte* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStrdupcpy(byte* dst, uint* p_dst_size, byte* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStreolRange(byte* str, byte* str_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImStricmp(byte* str1, byte* str2);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImStristr(byte* haystack, byte* haystack_end, byte* needle, byte* needle_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImStrlenW(ushort* str);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImStrncpy(byte* dst, byte* src, uint count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImStrnicmp(byte* str1, byte* str2, uint count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextCharFromUtf8(uint* out_char, byte* in_text, byte* in_text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igImTextCharToUtf8(byte* out_buf, uint c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextCountCharsFromUtf8(byte* in_text, byte* in_text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextCountUtf8BytesFromChar(byte* in_text, byte* in_text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextCountUtf8BytesFromStr(ushort* in_text, ushort* in_text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextStrFromUtf8(ushort* out_buf, int out_buf_size, byte* in_text, byte* in_text_end, byte** in_remaining);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igImTextStrToUtf8(byte* out_buf, int out_buf_size, ushort* in_text, ushort* in_text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igImTriangleArea(Vector2 a, Vector2 b, Vector2 c);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImTriangleBarycentricCoords(Vector2 a, Vector2 b, Vector2 c, Vector2 p, float* out_u, float* out_v, float* out_w);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igImTriangleClosestPoint(Vector2* pOut, Vector2 a, Vector2 b, Vector2 c, Vector2 p);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImTriangleContainsPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igImUpperPowerOfTwo(int v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igImage(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col, Vector4 border_col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImageButton(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, int frame_padding, Vector4 bg_col, Vector4 tint_col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igImageButtonEx(uint id, IntPtr texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector2 padding, Vector4 bg_col, Vector4 tint_col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igIndent(float indent_w);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igInitialize();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputDouble(byte* label, double* v, double step, double step_fast, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputFloat(byte* label, float* v, float step, float step_fast, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputFloat2(byte* label, Vector2* v, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputFloat3(byte* label, Vector3* v, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputFloat4(byte* label, Vector4* v, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputInt(byte* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputInt2(byte* label, int* v, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputInt3(byte* label, int* v, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputInt4(byte* label, int* v, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputScalar(byte* label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputScalarN(byte* label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, byte* format, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputText(byte* label, byte* buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputTextEx(byte* label, byte* hint, byte* buf, int buf_size, Vector2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputTextMultiline(byte* label, byte* buf, uint buf_size, Vector2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInputTextWithHint(byte* label, byte* hint, byte* buf, uint buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback? callback, IntPtr user_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igInvisibleButton(byte* str_id, Vector2 size, ImGuiButtonFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsActiveIdUsingKey(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsActiveIdUsingNavDir(ImGuiDir dir);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsActiveIdUsingNavInput(ImGuiNavInput input);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsAnyItemActive();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsAnyItemFocused();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsAnyItemHovered();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsAnyMouseDown();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsClippedEx(Rect bb, uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsDragDropActive();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsDragDropPayloadBeingAccepted();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsGamepadKey(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemActivated();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemActive();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemClicked(ImGuiMouseButton mouse_button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemDeactivated();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemDeactivatedAfterEdit();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemEdited();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemFocused();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemHovered(ImGuiHoveredFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemToggledOpen();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemToggledSelection();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsItemVisible();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsKeyDown(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsKeyPressed(ImGuiKey key, byte repeat);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsKeyPressedMap(ImGuiKey key, byte repeat);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsKeyReleased(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsLegacyKey(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseClicked(ImGuiMouseButton button, byte repeat);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseDoubleClicked(ImGuiMouseButton button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseDown(ImGuiMouseButton button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseDragging(ImGuiMouseButton button, float lock_threshold);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseHoveringRect(Vector2 r_min, Vector2 r_max, byte clip);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsMousePosValid(Vector2* mouse_pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsMouseReleased(ImGuiMouseButton button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsNamedKey(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsNavInputDown(ImGuiNavInput n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsNavInputTest(ImGuiNavInput n, ImGuiNavReadMode rm);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsPopupOpen_Str(byte* str_id, ImGuiPopupFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsPopupOpen_ID(uint id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsRectVisible_Nil(Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsRectVisible_Vec2(Vector2 rect_min, Vector2 rect_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsWindowAppearing();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, byte popup_hierarchy);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsWindowCollapsed();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsWindowFocused(ImGuiFocusedFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igIsWindowHovered(ImGuiHoveredFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsWindowNavFocusable(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igIsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igItemAdd(Rect bb, uint id, Rect* nav_bb, ImGuiItemFlags extra_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igItemHoverable(Rect bb, uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igItemSize_Vec2(Vector2 size, float text_baseline_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igItemSize_Rect(Rect bb, float text_baseline_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igKeepAliveID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLabelText(byte* label, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLabelTextV(byte* label, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igListBox_Str_arr(byte* label, int* current_item, byte** items, int items_count, int height_in_items);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igListBox_FnBoolPtr(byte* label, int* current_item, IntPtr items_getter, IntPtr data, int items_count, int height_in_items);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLoadIniSettingsFromDisk(byte* ini_filename);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLoadIniSettingsFromMemory(byte* ini_data, uint ini_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogBegin(ImGuiLogType type, int auto_open_depth);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogButtons();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogFinish();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLogRenderedText(Vector2* ref_pos, byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLogSetNextTextDecoration(byte* prefix, byte* suffix);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLogText(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLogTextV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogToBuffer(int auto_open_depth);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogToClipboard(int auto_open_depth);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igLogToFile(int auto_open_depth, byte* filename);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igLogToTTY(int auto_open_depth);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igMarkIniSettingsDirty_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igMarkItemEdited(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern IntPtr igMemAlloc(uint size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igMemFree(IntPtr ptr);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igMenuItem_Bool(byte* label, byte* shortcut, byte selected, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igMenuItem_BoolPtr(byte* label, byte* shortcut, byte* p_selected, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igMenuItemEx(byte* label, byte* icon, byte* shortcut, byte selected, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavInitRequestApplyResult();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igNavInitWindow(ImGuiWindow* window, byte force_reinit);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavMoveRequestApplyResult();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igNavMoveRequestButNoResultYet();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavMoveRequestCancel();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavMoveRequestResolveWithLastItem(IntPtr result);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igNavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNewFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNewLine();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igNextColumn();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igOpenPopup_Str(byte* str_id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igOpenPopup_ID(uint id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igOpenPopupEx(uint id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igOpenPopupOnItemClick(byte* str_id, ImGuiPopupFlags popup_flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern int igPlotEx(ImGuiPlotType plot_type, byte* label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, Vector2 frame_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPlotHistogram_FloatPtr(byte* label, float* values, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPlotHistogram_FnFloatPtr(byte* label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, Vector2 graph_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPlotLines_FloatPtr(byte* label, float* values, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPlotLines_FnFloatPtr(byte* label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, byte* overlay_text, float scale_min, float scale_max, Vector2 graph_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopAllowKeyboardFocus();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopButtonRepeat();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopClipRect();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopColumnsBackground();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopFocusScope();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopFont();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopID();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopItemFlag();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopItemWidth();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopStyleColor(int count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopStyleVar(int count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPopTextWrapPos();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igProgressBar(float fraction, Vector2 size_arg, byte* overlay);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushAllowKeyboardFocus(byte allow_keyboard_focus);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushButtonRepeat(byte repeat);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, byte intersect_with_current_clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushColumnClipRect(int column_index);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushColumnsBackground();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushFocusScope(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPushFont(ImFont* font);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPushID_Str(byte* str_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igPushID_StrStr(byte* str_id_begin, byte* str_id_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushID_Ptr(IntPtr ptr_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushID_Int(int int_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushItemFlag(ImGuiItemFlags option, byte enabled);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushItemWidth(float item_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushMultiItemsWidths(int components, float width_full);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushOverrideID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushStyleColor_U32(ImGuiCol idx, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushStyleColor_Vec4(ImGuiCol idx, Vector4 col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, Vector2 val);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igPushTextWrapPos(float wrap_local_pos_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igRadioButton_Bool(byte* label, byte active);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igRadioButton_IntPtr(byte* label, int* v, int v_button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRemoveContextHook(IntPtr context, uint hook_to_remove);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRemoveSettingsHandler(byte* type_name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRender();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderArrow(ImDrawList* draw_list, Vector2 pos, uint col, ImGuiDir dir, float scale);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderArrowPointingAt(ImDrawList* draw_list, Vector2 pos, Vector2 half_sz, ImGuiDir direction, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderBullet(ImDrawList* draw_list, Vector2 pos, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderCheckMark(ImDrawList* draw_list, Vector2 pos, uint col, float sz);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, Vector2 p_min, Vector2 p_max, uint fill_col, float grid_step, Vector2 grid_off, float rounding, ImDrawFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRenderFrame(Vector2 p_min, Vector2 p_max, uint fill_col, byte border, float rounding);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRenderFrameBorder(Vector2 p_min, Vector2 p_max, float rounding);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRenderMouseCursor(Vector2 pos, float scale, ImGuiMouseCursor mouse_cursor, uint col_fill, uint col_border, uint col_shadow);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igRenderNavHighlight(Rect bb, uint id, ImGuiNavHighlightFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderRectFilledRangeH(ImDrawList* draw_list, Rect rect, uint col, float x_start_norm, float x_end_norm, float rounding);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderRectFilledWithHole(ImDrawList* draw_list, Rect outer, Rect inner, uint col, float rounding);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderText(Vector2 pos, byte* text, byte* text_end, byte hide_text_after_hash);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderTextClipped(Vector2 pos_min, Vector2 pos_max, byte* text, byte* text_end, Vector2* text_size_if_known, Vector2 align, Rect* clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderTextClippedEx(ImDrawList* draw_list, Vector2 pos_min, Vector2 pos_max, byte* text, byte* text_end, Vector2* text_size_if_known, Vector2 align, Rect* clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderTextEllipsis(ImDrawList* draw_list, Vector2 pos_min, Vector2 pos_max, float clip_max_x, float ellipsis_max_x, byte* text, byte* text_end, Vector2* text_size_if_known);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igRenderTextWrapped(Vector2 pos, byte* text, byte* text_end, float wrap_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igResetMouseDragDelta(ImGuiMouseButton button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSameLine(float offset_from_start_x, float spacing);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSaveIniSettingsToDisk(byte* ini_filename);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igSaveIniSettingsToMemory(uint* out_ini_size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igScrollToBringRectIntoView(ImGuiWindow* window, Rect rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igScrollToItem(ImGuiScrollFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igScrollToRect(ImGuiWindow* window, Rect rect, ImGuiScrollFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igScrollToRectEx(Vector2* pOut, ImGuiWindow* window, Rect rect, ImGuiScrollFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igScrollbar(ImGuiAxis axis);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igScrollbarEx(Rect bb, uint id, ImGuiAxis axis, long* p_scroll_v, long avail_v, long contents_v, ImDrawFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSelectable_Bool(byte* label, byte selected, ImGuiSelectableFlags flags, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSelectable_BoolPtr(byte* label, byte* p_selected, ImGuiSelectableFlags flags, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSeparator();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSeparatorEx(ImGuiSeparatorFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetActiveID(uint id, ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetActiveIdUsingKey(ImGuiKey key);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetActiveIdUsingNavAndKeys();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetClipboardText(byte* text);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetColorEditOptions(ImGuiColorEditFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetColumnOffset(int column_index, float offset_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetColumnWidth(int column_index, float width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetCurrentContext(IntPtr ctx);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetCurrentFont(ImFont* font);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetCursorPos(Vector2 local_pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetCursorPosX(float local_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetCursorPosY(float local_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetCursorScreenPos(Vector2 pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSetDragDropPayload(byte* type, IntPtr data, uint sz, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetFocusID(uint id, ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetHoveredID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetItemAllowOverlap();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetItemDefaultFocus();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetItemUsingMouseWheel();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetKeyboardFocusHere(int offset);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetLastItemData(uint item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, Rect item_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetMouseCursor(ImGuiMouseCursor cursor_type);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNavID(uint id, ImGuiNavLayer nav_layer, uint focus_scope_id, Rect rect_rel);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetNavWindow(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextFrameWantCaptureKeyboard(byte want_capture_keyboard);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextFrameWantCaptureMouse(byte want_capture_mouse);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextItemOpen(byte is_open, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextItemWidth(float item_width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowBgAlpha(float alpha);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowCollapsed(byte collapsed, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowContentSize(Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowFocus();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowScroll(Vector2 scroll);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowSize(Vector2 size, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, ImGuiSizeCallback? custom_callback, IntPtr custom_callback_data);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow* window, float local_x, float center_x_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow* window, float local_y, float center_y_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollHereX(float center_x_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollHereY(float center_y_ratio);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollX_Float(float scroll_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetScrollX_WindowPtr(ImGuiWindow* window, float scroll_x);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetScrollY_Float(float scroll_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetScrollY_WindowPtr(ImGuiWindow* window, float scroll_y);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetStateStorage(ImGuiStorage* storage);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetTabItemClosed(byte* tab_or_docked_window_label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetTooltip(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetTooltipV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow* window, Rect clip_rect);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetWindowCollapsed_Bool(byte collapsed, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowCollapsed_Str(byte* name, byte collapsed, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow* window, byte collapsed, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetWindowFocus_Nil();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowFocus_Str(byte* name);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetWindowFontScale(float scale);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowHitTestHole(ImGuiWindow* window, Vector2 pos, Vector2 size);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetWindowPos_Vec2(Vector2 pos, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowPos_Str(byte* name, Vector2 pos, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowPos_WindowPtr(ImGuiWindow* window, Vector2 pos, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSetWindowSize_Vec2(Vector2 size, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowSize_Str(byte* name, Vector2 size, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowSize_WindowPtr(ImGuiWindow* window, Vector2 size, ImGuiCond cond);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igSetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, Vector2 gradient_p0, Vector2 gradient_p1, uint col0, uint col1);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, byte clamp);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowAboutWindow(byte* p_open);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowDebugLogWindow(byte* p_open);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowDemoWindow(byte* p_open);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowFontAtlas(ImFontAtlas* atlas);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowFontSelector(byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowMetricsWindow(byte* p_open);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowStackToolWindow(byte* p_open);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShowStyleEditor(ImGuiStyle* @ref);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igShowStyleSelector(byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igShowUserGuide();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igShutdown();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderAngle(byte* label, float* v_rad, float v_degrees_min, float v_degrees_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderBehavior(Rect bb, uint id, ImGuiDataType data_type, IntPtr p_v, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags, Rect* out_grab_bb);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderFloat(byte* label, float* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderFloat2(byte* label, Vector2* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderFloat3(byte* label, Vector3* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderFloat4(byte* label, Vector4* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderInt(byte* label, int* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderInt2(byte* label, int* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderInt3(byte* label, int* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderInt4(byte* label, int* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderScalar(byte* label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSliderScalarN(byte* label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSmallButton(byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igSpacing();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igSplitterBehavior(Rect bb, uint id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igStartMouseMovingWindow(ImGuiWindow* window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igStyleColorsClassic(ImGuiStyle* dst);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igStyleColorsDark(ImGuiStyle* dst);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igStyleColorsLight(ImGuiStyle* dst);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTabItem* igTabBarFindTabByID(ImGuiTabBar* tab_bar, uint tab_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTabBarProcessReorder(ImGuiTabBar* tab_bar);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, Vector2 mouse_pos);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabBarRemoveTab(ImGuiTabBar* tab_bar, uint tab_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabItemBackground(ImDrawList* draw_list, Rect bb, ImGuiTabItemFlags flags, uint col);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTabItemButton(byte* label, ImGuiTabItemFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabItemCalcSize(Vector2* pOut, byte* label, byte has_close_button);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTabItemEx(ImGuiTabBar* tab_bar, byte* label, byte* p_open, ImGuiTabItemFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTabItemLabelAndCloseButton(ImDrawList* draw_list, Rect bb, ImGuiTabItemFlags flags, Vector2 frame_padding, byte* label, uint tab_id, uint close_button_id, byte is_contents_visible, byte* out_just_closed, byte* out_text_clipped);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableBeginApplyRequests(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableBeginCell(ImGuiTable* table, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableBeginInitMemory(ImGuiTable* table, int columns_count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableBeginRow(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableDrawBorders(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableDrawContextMenu(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableEndCell(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableEndRow(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTable* igTableFindByID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableGcCompactSettings();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSettings* igTableGetBoundSettings(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableGetCellBgRect(Rect* pOut, ImGuiTable* table, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igTableGetColumnCount();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igTableGetColumnIndex();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igTableGetColumnName_Int(int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte* igTableGetColumnName_TablePtr(ImGuiTable* table, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn* column);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern uint igTableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float igTableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern float igTableGetHeaderRowHeight();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igTableGetHoveredColumn();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableInstanceData* igTableGetInstanceData(ImGuiTable* table, int instance_no);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern float igTableGetMaxColumnWidth(ImGuiTable* table, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern int igTableGetRowIndex();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSortSpecs* igTableGetSortSpecs();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableHeader(byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableHeadersRow();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableLoadSettings(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableMergeDrawChannels(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igTableNextColumn();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableOpenContextMenu(int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTablePopBackgroundChannel();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTablePushBackgroundChannel();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableRemove(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableResetSettings(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSaveSettings(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSetColumnEnabled(int column_n, byte v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igTableSetColumnIndex(int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, byte append_to_sort_specs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSetColumnWidth(int column_n, float width);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSetColumnWidthAutoAll(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSettingsAddSettingsHandler();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSettings* igTableSettingsCreate(uint id, int columns_count);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern ImGuiTableSettings* igTableSettingsFindByID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSetupColumn(byte* label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSetupDrawChannels(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTableSetupScrollFreeze(int cols, int rows);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSortSpecsBuild(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableSortSpecsSanitize(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableUpdateBorders(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTableUpdateLayout(ImGuiTable* table);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igTempInputIsActive(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTempInputScalar(Rect bb, uint id, byte* label, ImGuiDataType data_type, IntPtr p_data, byte* format, IntPtr p_clamp_min, IntPtr p_clamp_max);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTempInputText(Rect bb, uint id, byte* label, byte* buf, int buf_size, ImGuiInputTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igText(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextColored(Vector4 col, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextColoredV(Vector4 col, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextDisabled(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextDisabledV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextEx(byte* text, byte* text_end, ImGuiTextFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextUnformatted(byte* text, byte* text_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextWrapped(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTextWrappedV(byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNode_Str(byte* label);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNode_StrStr(byte* str_id, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNode_Ptr(IntPtr ptr_id, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeBehavior(uint id, ImGuiTreeNodeFlags flags, byte* label, byte* label_end);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern byte igTreeNodeBehaviorIsOpen(uint id, ImGuiTreeNodeFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeEx_Str(byte* label, ImGuiTreeNodeFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeEx_StrStr(byte* str_id, ImGuiTreeNodeFlags flags, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeEx_Ptr(IntPtr ptr_id, ImGuiTreeNodeFlags flags, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeExV_Str(byte* str_id, ImGuiTreeNodeFlags flags, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeExV_Ptr(IntPtr ptr_id, ImGuiTreeNodeFlags flags, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeV_Str(byte* str_id, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igTreeNodeV_Ptr(IntPtr ptr_id, byte* fmt);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTreePop();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igTreePush_Str(byte* str_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTreePush_Ptr(IntPtr ptr_id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igTreePushOverrideID(uint id);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igUnindent(float indent_w);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igUpdateHoveredWindowAndCaptureFlags();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igUpdateInputEvents(byte trickle_fast_inputs);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igUpdateMouseMovingWindowEndFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public static extern void igUpdateMouseMovingWindowNewFrame();
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igUpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWindow* parent_window);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igVSliderFloat(byte* label, Vector2 size, float* v, float v_min, float v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igVSliderInt(byte* label, Vector2 size, int* v, int v_min, int v_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern byte igVSliderScalar(byte* label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, byte* format, ImGuiSliderFlags flags);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igValue_Bool(byte* prefix, byte b);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igValue_Int(byte* prefix, int v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igValue_Uint(byte* prefix, uint v);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igValue_Float(byte* prefix, float v, byte* float_format);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igWindowRectAbsToRel(Rect* pOut, ImGuiWindow* window, Rect r);
-
-	[DllImport("cimgui", CallingConvention = CallingConvention.Cdecl)]
-	public unsafe static extern void igWindowRectRelToAbs(Rect* pOut, ImGuiWindow* window, Rect r);
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavDirSourceFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiNavDirSourceFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavDirSourceFlags.cs	2025-05-22 18:15:44.903067700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavDirSourceFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavDirSourceFlags
-{
-	None = 0,
-	RawKeyboard = 1,
-	Keyboard = 2,
-	PadDPad = 4,
-	PadLStick = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavHighlightFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiNavHighlightFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavHighlightFlags.cs	2025-05-22 18:15:44.527046700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavHighlightFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavHighlightFlags
-{
-	None = 0,
-	TypeDefault = 1,
-	TypeThin = 2,
-	AlwaysDraw = 4,
-	NoRounding = 8
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavInput.cs Out/RG.ImGui/ImGuiNET/ImGuiNavInput.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavInput.cs	2025-05-22 18:15:44.529050600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavInput.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,26 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavInput
-{
-	Activate,
-	Cancel,
-	Input,
-	Menu,
-	DpadLeft,
-	DpadRight,
-	DpadUp,
-	DpadDown,
-	LStickLeft,
-	LStickRight,
-	LStickUp,
-	LStickDown,
-	FocusPrev,
-	FocusNext,
-	TweakSlow,
-	TweakFast,
-	KeyLeft_,
-	KeyRight_,
-	KeyUp_,
-	KeyDown_,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavLayer.cs Out/RG.ImGui/ImGuiNET/ImGuiNavLayer.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavLayer.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavLayer.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavLayer
-{
-	Main,
-	Menu,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavMoveFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiNavMoveFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavMoveFlags.cs	2025-05-22 18:15:44.529050600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavMoveFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavMoveFlags
-{
-	None = 0,
-	LoopX = 1,
-	LoopY = 2,
-	WrapX = 4,
-	WrapY = 8,
-	AllowCurrentNavId = 0x10,
-	AlsoScoreVisibleSet = 0x20,
-	ScrollToEdgeY = 0x40,
-	Forwarded = 0x80,
-	DebugNoResult = 0x100,
-	FocusApi = 0x200,
-	Tabbing = 0x400,
-	Activate = 0x800,
-	DontSetNavHighlight = 0x1000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavReadMode.cs Out/RG.ImGui/ImGuiNET/ImGuiNavReadMode.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNavReadMode.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNavReadMode.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNavReadMode
-{
-	Down,
-	Pressed,
-	Released,
-	Repeat,
-	RepeatSlow,
-	RepeatFast
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemData.cs Out/RG.ImGui/ImGuiNET/ImGuiNextItemData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemData.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextItemData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiNextItemData
-{
-	public ImGuiNextItemDataFlags Flags;
-
-	public float Width;
-
-	public uint FocusScopeId;
-
-	public ImGuiCond OpenCond;
-
-	public byte OpenVal;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemDataFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiNextItemDataFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemDataFlags.cs	2025-05-22 18:15:44.535561800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextItemDataFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNextItemDataFlags
-{
-	None,
-	HasWidth,
-	HasOpen
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiNextItemDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextItemDataPtr.cs	2025-05-22 18:15:44.557251300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextItemDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,56 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiNextItemDataPtr
-{
-	public unsafe ImGuiNextItemData* NativePtr { get; }
-
-	public unsafe ref ImGuiNextItemDataFlags Flags => ref Unsafe.AsRef<ImGuiNextItemDataFlags>(&NativePtr->Flags);
-
-	public unsafe ref float Width => ref Unsafe.AsRef<float>(&NativePtr->Width);
-
-	public unsafe ref uint FocusScopeId => ref Unsafe.AsRef<uint>(&NativePtr->FocusScopeId);
-
-	public unsafe ref ImGuiCond OpenCond => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->OpenCond);
-
-	public unsafe ref bool OpenVal => ref Unsafe.AsRef<bool>(&NativePtr->OpenVal);
-
-	public unsafe ImGuiNextItemDataPtr(ImGuiNextItemData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiNextItemDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiNextItemData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiNextItemDataPtr(ImGuiNextItemData* nativePtr)
-	{
-		return new ImGuiNextItemDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiNextItemData*(ImGuiNextItemDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiNextItemDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiNextItemDataPtr(nativePtr);
-	}
-
-	public unsafe void ClearFlags()
-	{
-		ImGuiDebug.Log("ImGuiNextItemData_ClearFlags #1");
-		ImGuiNative.ImGuiNextItemData_ClearFlags(NativePtr);
-	}
-
-	public unsafe void ImGuiNextItemData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiNextItemData_destroy #1");
-		ImGuiNative.ImGuiNextItemData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowData.cs Out/RG.ImGui/ImGuiNET/ImGuiNextWindowData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowData.cs	2025-05-22 18:15:44.537567100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextWindowData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiNextWindowData
-{
-	public ImGuiNextWindowDataFlags Flags;
-
-	public ImGuiCond PosCond;
-
-	public ImGuiCond SizeCond;
-
-	public ImGuiCond CollapsedCond;
-
-	public Vector2 PosVal;
-
-	public Vector2 PosPivotVal;
-
-	public Vector2 SizeVal;
-
-	public Vector2 ContentSizeVal;
-
-	public Vector2 ScrollVal;
-
-	public byte CollapsedVal;
-
-	public Rect SizeConstraintRect;
-
-	public IntPtr SizeCallback;
-
-	public unsafe void* SizeCallbackUserData;
-
-	public float BgAlphaVal;
-
-	public Vector2 MenuBarOffsetMinVal;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowDataFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiNextWindowDataFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowDataFlags.cs	2025-05-22 18:15:44.616532700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextWindowDataFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiNextWindowDataFlags
-{
-	None = 0,
-	HasPos = 1,
-	HasSize = 2,
-	HasContentSize = 4,
-	HasCollapsed = 8,
-	HasSizeConstraint = 0x10,
-	HasFocus = 0x20,
-	HasBgAlpha = 0x40,
-	HasScroll = 0x80
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiNextWindowDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiNextWindowDataPtr.cs	2025-05-22 18:15:44.606483800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiNextWindowDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,87 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiNextWindowDataPtr
-{
-	public unsafe ImGuiNextWindowData* NativePtr { get; }
-
-	public unsafe ref ImGuiNextWindowDataFlags Flags => ref Unsafe.AsRef<ImGuiNextWindowDataFlags>(&NativePtr->Flags);
-
-	public unsafe ref ImGuiCond PosCond => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->PosCond);
-
-	public unsafe ref ImGuiCond SizeCond => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->SizeCond);
-
-	public unsafe ref ImGuiCond CollapsedCond => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->CollapsedCond);
-
-	public unsafe ref Vector2 PosVal => ref Unsafe.AsRef<Vector2>(&NativePtr->PosVal);
-
-	public unsafe ref Vector2 PosPivotVal => ref Unsafe.AsRef<Vector2>(&NativePtr->PosPivotVal);
-
-	public unsafe ref Vector2 SizeVal => ref Unsafe.AsRef<Vector2>(&NativePtr->SizeVal);
-
-	public unsafe ref Vector2 ContentSizeVal => ref Unsafe.AsRef<Vector2>(&NativePtr->ContentSizeVal);
-
-	public unsafe ref Vector2 ScrollVal => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollVal);
-
-	public unsafe ref bool CollapsedVal => ref Unsafe.AsRef<bool>(&NativePtr->CollapsedVal);
-
-	public unsafe ref Rect SizeConstraintRect => ref Unsafe.AsRef<Rect>(&NativePtr->SizeConstraintRect);
-
-	public unsafe ref ImGuiSizeCallback? SizeCallback => ref Unsafe.AsRef<ImGuiSizeCallback>(&NativePtr->SizeCallback);
-
-	public unsafe IntPtr SizeCallbackUserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->SizeCallbackUserData;
-		}
-		set
-		{
-			NativePtr->SizeCallbackUserData = (void*)value;
-		}
-	}
-
-	public unsafe ref float BgAlphaVal => ref Unsafe.AsRef<float>(&NativePtr->BgAlphaVal);
-
-	public unsafe ref Vector2 MenuBarOffsetMinVal => ref Unsafe.AsRef<Vector2>(&NativePtr->MenuBarOffsetMinVal);
-
-	public unsafe ImGuiNextWindowDataPtr(ImGuiNextWindowData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiNextWindowDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiNextWindowData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiNextWindowDataPtr(ImGuiNextWindowData* nativePtr)
-	{
-		return new ImGuiNextWindowDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiNextWindowData*(ImGuiNextWindowDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiNextWindowDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiNextWindowDataPtr(nativePtr);
-	}
-
-	public unsafe void ClearFlags()
-	{
-		ImGuiDebug.Log("ImGuiNextWindowData_ClearFlags #1");
-		ImGuiNative.ImGuiNextWindowData_ClearFlags(NativePtr);
-	}
-
-	public unsafe void ImGuiNextWindowData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiNextWindowData_destroy #1");
-		ImGuiNative.ImGuiNextWindowData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnData.cs Out/RG.ImGui/ImGuiNET/ImGuiOldColumnData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnData.cs	2025-05-22 18:15:44.537567100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOldColumnData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiOldColumnData
-{
-	public float OffsetNorm;
-
-	public float OffsetNormBeforeResize;
-
-	public ImGuiOldColumnFlags Flags;
-
-	public Rect ClipRect;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiOldColumnDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnDataPtr.cs	2025-05-22 18:15:44.567353300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOldColumnDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,49 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiOldColumnDataPtr
-{
-	public unsafe ImGuiOldColumnData* NativePtr { get; }
-
-	public unsafe ref float OffsetNorm => ref Unsafe.AsRef<float>(&NativePtr->OffsetNorm);
-
-	public unsafe ref float OffsetNormBeforeResize => ref Unsafe.AsRef<float>(&NativePtr->OffsetNormBeforeResize);
-
-	public unsafe ref ImGuiOldColumnFlags Flags => ref Unsafe.AsRef<ImGuiOldColumnFlags>(&NativePtr->Flags);
-
-	public unsafe ref Rect ClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->ClipRect);
-
-	public unsafe ImGuiOldColumnDataPtr(ImGuiOldColumnData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiOldColumnDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiOldColumnData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiOldColumnDataPtr(ImGuiOldColumnData* nativePtr)
-	{
-		return new ImGuiOldColumnDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiOldColumnData*(ImGuiOldColumnDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiOldColumnDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiOldColumnDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiOldColumnData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiOldColumnData_destroy #1");
-		ImGuiNative.ImGuiOldColumnData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiOldColumnFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnFlags.cs	2025-05-22 18:15:44.585883500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOldColumnFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiOldColumnFlags
-{
-	None = 0,
-	NoBorder = 1,
-	NoResize = 2,
-	NoPreserveWidths = 4,
-	NoForceWithinWindow = 8,
-	GrowParentContentsSize = 0x10
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumns.cs Out/RG.ImGui/ImGuiNET/ImGuiOldColumns.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumns.cs	2025-05-22 18:15:44.595402700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOldColumns.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,40 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiOldColumns
-{
-	public uint ID;
-
-	public ImGuiOldColumnFlags Flags;
-
-	public byte IsFirstFrame;
-
-	public byte IsBeingResized;
-
-	public int Current;
-
-	public int Count;
-
-	public float OffMinX;
-
-	public float OffMaxX;
-
-	public float LineMinY;
-
-	public float LineMaxY;
-
-	public float HostCursorPosY;
-
-	public float HostCursorMaxPosX;
-
-	public Rect HostInitialClipRect;
-
-	public Rect HostBackupClipRect;
-
-	public Rect HostBackupParentWorkRect;
-
-	public ImVector Columns;
-
-	public ImDrawListSplitter Splitter;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiOldColumnsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOldColumnsPtr.cs	2025-05-22 18:15:44.597406300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOldColumnsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,75 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiOldColumnsPtr
-{
-	public unsafe ImGuiOldColumns* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiOldColumnFlags Flags => ref Unsafe.AsRef<ImGuiOldColumnFlags>(&NativePtr->Flags);
-
-	public unsafe ref bool IsFirstFrame => ref Unsafe.AsRef<bool>(&NativePtr->IsFirstFrame);
-
-	public unsafe ref bool IsBeingResized => ref Unsafe.AsRef<bool>(&NativePtr->IsBeingResized);
-
-	public unsafe ref int Current => ref Unsafe.AsRef<int>(&NativePtr->Current);
-
-	public unsafe ref int Count => ref Unsafe.AsRef<int>(&NativePtr->Count);
-
-	public unsafe ref float OffMinX => ref Unsafe.AsRef<float>(&NativePtr->OffMinX);
-
-	public unsafe ref float OffMaxX => ref Unsafe.AsRef<float>(&NativePtr->OffMaxX);
-
-	public unsafe ref float LineMinY => ref Unsafe.AsRef<float>(&NativePtr->LineMinY);
-
-	public unsafe ref float LineMaxY => ref Unsafe.AsRef<float>(&NativePtr->LineMaxY);
-
-	public unsafe ref float HostCursorPosY => ref Unsafe.AsRef<float>(&NativePtr->HostCursorPosY);
-
-	public unsafe ref float HostCursorMaxPosX => ref Unsafe.AsRef<float>(&NativePtr->HostCursorMaxPosX);
-
-	public unsafe ref Rect HostInitialClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostInitialClipRect);
-
-	public unsafe ref Rect HostBackupClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostBackupClipRect);
-
-	public unsafe ref Rect HostBackupParentWorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostBackupParentWorkRect);
-
-	public unsafe ImPtrVector<ImGuiOldColumnDataPtr> Columns => new ImPtrVector<ImGuiOldColumnDataPtr>(NativePtr->Columns, Unsafe.SizeOf<ImGuiOldColumnData>());
-
-	public unsafe ref ImDrawListSplitter Splitter => ref Unsafe.AsRef<ImDrawListSplitter>(&NativePtr->Splitter);
-
-	public unsafe ImGuiOldColumnsPtr(ImGuiOldColumns* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiOldColumnsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiOldColumns*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiOldColumnsPtr(ImGuiOldColumns* nativePtr)
-	{
-		return new ImGuiOldColumnsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiOldColumns*(ImGuiOldColumnsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiOldColumnsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiOldColumnsPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiOldColumns_destroy()
-	{
-		ImGuiDebug.Log("ImGuiOldColumns_destroy #1");
-		ImGuiNative.ImGuiOldColumns_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOnceUponAFrame.cs Out/RG.ImGui/ImGuiNET/ImGuiOnceUponAFrame.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOnceUponAFrame.cs	2025-05-22 18:15:44.606483800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOnceUponAFrame.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiOnceUponAFrame
-{
-	public int RefFrame;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOnceUponAFramePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiOnceUponAFramePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiOnceUponAFramePtr.cs	2025-05-22 18:15:44.628567000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiOnceUponAFramePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiOnceUponAFramePtr
-{
-	public unsafe ImGuiOnceUponAFrame* NativePtr { get; }
-
-	public unsafe ref int RefFrame => ref Unsafe.AsRef<int>(&NativePtr->RefFrame);
-
-	public unsafe ImGuiOnceUponAFramePtr(ImGuiOnceUponAFrame* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiOnceUponAFramePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiOnceUponAFrame*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiOnceUponAFramePtr(ImGuiOnceUponAFrame* nativePtr)
-	{
-		return new ImGuiOnceUponAFramePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiOnceUponAFrame*(ImGuiOnceUponAFramePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiOnceUponAFramePtr(IntPtr nativePtr)
-	{
-		return new ImGuiOnceUponAFramePtr(nativePtr);
-	}
-
-	public unsafe void ImGuiOnceUponAFrame_destroy()
-	{
-		ImGuiDebug.Log("ImGuiOnceUponAFrame_destroy #1");
-		ImGuiNative.ImGuiOnceUponAFrame_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPayload.cs Out/RG.ImGui/ImGuiNET/ImGuiPayload.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPayload.cs	2025-05-22 18:15:44.639083000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPayload.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,84 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiPayload
-{
-	public unsafe void* Data;
-
-	public int DataSize;
-
-	public uint SourceId;
-
-	public uint SourceParentId;
-
-	public int DataFrameCount;
-
-	public byte DataType_0;
-
-	public byte DataType_1;
-
-	public byte DataType_2;
-
-	public byte DataType_3;
-
-	public byte DataType_4;
-
-	public byte DataType_5;
-
-	public byte DataType_6;
-
-	public byte DataType_7;
-
-	public byte DataType_8;
-
-	public byte DataType_9;
-
-	public byte DataType_10;
-
-	public byte DataType_11;
-
-	public byte DataType_12;
-
-	public byte DataType_13;
-
-	public byte DataType_14;
-
-	public byte DataType_15;
-
-	public byte DataType_16;
-
-	public byte DataType_17;
-
-	public byte DataType_18;
-
-	public byte DataType_19;
-
-	public byte DataType_20;
-
-	public byte DataType_21;
-
-	public byte DataType_22;
-
-	public byte DataType_23;
-
-	public byte DataType_24;
-
-	public byte DataType_25;
-
-	public byte DataType_26;
-
-	public byte DataType_27;
-
-	public byte DataType_28;
-
-	public byte DataType_29;
-
-	public byte DataType_30;
-
-	public byte DataType_31;
-
-	public byte DataType_32;
-
-	public byte Preview;
-
-	public byte Delivery;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPayloadPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiPayloadPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPayloadPtr.cs	2025-05-22 18:15:44.595402700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPayloadPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,108 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiPayloadPtr
-{
-	public unsafe ImGuiPayload* NativePtr { get; }
-
-	public unsafe IntPtr Data
-	{
-		get
-		{
-			return (IntPtr)NativePtr->Data;
-		}
-		set
-		{
-			NativePtr->Data = (void*)value;
-		}
-	}
-
-	public unsafe ref int DataSize => ref Unsafe.AsRef<int>(&NativePtr->DataSize);
-
-	public unsafe ref uint SourceId => ref Unsafe.AsRef<uint>(&NativePtr->SourceId);
-
-	public unsafe ref uint SourceParentId => ref Unsafe.AsRef<uint>(&NativePtr->SourceParentId);
-
-	public unsafe ref int DataFrameCount => ref Unsafe.AsRef<int>(&NativePtr->DataFrameCount);
-
-	public unsafe RangeAccessor<byte> DataType => new RangeAccessor<byte>(&NativePtr->DataType_0, 33);
-
-	public unsafe ref bool Preview => ref Unsafe.AsRef<bool>(&NativePtr->Preview);
-
-	public unsafe ref bool Delivery => ref Unsafe.AsRef<bool>(&NativePtr->Delivery);
-
-	public unsafe ImGuiPayloadPtr(ImGuiPayload* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiPayloadPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiPayload*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiPayloadPtr(ImGuiPayload* nativePtr)
-	{
-		return new ImGuiPayloadPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiPayload*(ImGuiPayloadPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiPayloadPtr(IntPtr nativePtr)
-	{
-		return new ImGuiPayloadPtr(nativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImGuiPayload_Clear #1");
-		ImGuiNative.ImGuiPayload_Clear(NativePtr);
-	}
-
-	public unsafe bool IsDataType(string type)
-	{
-		int num = 0;
-		byte* ptr;
-		if (type == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(type);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(type, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiPayload_IsDataType #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiPayload_IsDataType(NativePtr, ptr));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool IsDelivery()
-	{
-		ImGuiDebug.Log("ImGuiPayload_IsDelivery #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiPayload_IsDelivery(NativePtr));
-	}
-
-	public unsafe bool IsPreview()
-	{
-		ImGuiDebug.Log("ImGuiPayload_IsPreview #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiPayload_IsPreview(NativePtr));
-	}
-
-	public unsafe void ImGuiPayload_destroy()
-	{
-		ImGuiDebug.Log("ImGuiPayload_destroy #1");
-		ImGuiNative.ImGuiPayload_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlatformImeData.cs Out/RG.ImGui/ImGuiNET/ImGuiPlatformImeData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlatformImeData.cs	2025-05-22 18:15:44.598404100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPlatformImeData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiPlatformImeData
-{
-	public byte WantVisible;
-
-	public Vector2 InputPos;
-
-	public float InputLineHeight;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlatformImeDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiPlatformImeDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlatformImeDataPtr.cs	2025-05-22 18:15:44.629564500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPlatformImeDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,47 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiPlatformImeDataPtr
-{
-	public unsafe ImGuiPlatformImeData* NativePtr { get; }
-
-	public unsafe ref bool WantVisible => ref Unsafe.AsRef<bool>(&NativePtr->WantVisible);
-
-	public unsafe ref Vector2 InputPos => ref Unsafe.AsRef<Vector2>(&NativePtr->InputPos);
-
-	public unsafe ref float InputLineHeight => ref Unsafe.AsRef<float>(&NativePtr->InputLineHeight);
-
-	public unsafe ImGuiPlatformImeDataPtr(ImGuiPlatformImeData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiPlatformImeDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiPlatformImeData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiPlatformImeDataPtr(ImGuiPlatformImeData* nativePtr)
-	{
-		return new ImGuiPlatformImeDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiPlatformImeData*(ImGuiPlatformImeDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiPlatformImeDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiPlatformImeDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiPlatformImeData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiPlatformImeData_destroy #1");
-		ImGuiNative.ImGuiPlatformImeData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlotType.cs Out/RG.ImGui/ImGuiNET/ImGuiPlotType.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPlotType.cs	2025-05-22 18:15:44.638078900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPlotType.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiPlotType
-{
-	Lines,
-	Histogram
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPopupFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiPopupFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPopupFlags.cs	2025-05-22 18:15:44.555253700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPopupFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiPopupFlags
-{
-	None = 0,
-	MouseButtonLeft = 0,
-	MouseButtonRight = 1,
-	MouseButtonMiddle = 2,
-	MouseButtonMask_ = 31,
-	MouseButtonDefault_ = 1,
-	NoOpenOverExistingPopup = 32,
-	NoOpenOverItems = 64,
-	AnyPopupId = 128,
-	AnyPopupLevel = 256,
-	AnyPopup = 384
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPopupPositionPolicy.cs Out/RG.ImGui/ImGuiNET/ImGuiPopupPositionPolicy.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPopupPositionPolicy.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPopupPositionPolicy.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiPopupPositionPolicy
-{
-	Default,
-	ComboBox,
-	Tooltip
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPtrOrIndex.cs Out/RG.ImGui/ImGuiNET/ImGuiPtrOrIndex.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPtrOrIndex.cs	2025-05-22 18:15:44.554252100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPtrOrIndex.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiPtrOrIndex
-{
-	public IntPtr Ptr;
-
-	public int Index;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPtrOrIndexPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiPtrOrIndexPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiPtrOrIndexPtr.cs	2025-05-22 18:15:44.586893900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiPtrOrIndexPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,54 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiPtrOrIndexPtr
-{
-	public unsafe ImGuiPtrOrIndex* NativePtr { get; }
-
-	public unsafe IntPtr Ptr
-	{
-		get
-		{
-			return NativePtr->Ptr;
-		}
-		set
-		{
-			NativePtr->Ptr = value;
-		}
-	}
-
-	public unsafe ref int Index => ref Unsafe.AsRef<int>(&NativePtr->Index);
-
-	public unsafe ImGuiPtrOrIndexPtr(ImGuiPtrOrIndex* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiPtrOrIndexPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiPtrOrIndex*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiPtrOrIndexPtr(ImGuiPtrOrIndex* nativePtr)
-	{
-		return new ImGuiPtrOrIndexPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiPtrOrIndex*(ImGuiPtrOrIndexPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiPtrOrIndexPtr(IntPtr nativePtr)
-	{
-		return new ImGuiPtrOrIndexPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiPtrOrIndex_destroy()
-	{
-		ImGuiDebug.Log("ImGuiPtrOrIndex_destroy #1");
-		ImGuiNative.ImGuiPtrOrIndex_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiScrollFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiScrollFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiScrollFlags.cs	2025-05-22 18:15:44.596404200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiScrollFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,15 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiScrollFlags
-{
-	None = 0,
-	KeepVisibleEdgeX = 1,
-	KeepVisibleEdgeY = 2,
-	KeepVisibleCenterX = 4,
-	KeepVisibleCenterY = 8,
-	AlwaysCenterX = 16,
-	AlwaysCenterY = 32,
-	NoScrollParent = 64,
-	MaskX_ = 21,
-	MaskY_ = 42
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSelectableFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiSelectableFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSelectableFlags.cs	2025-05-22 18:15:44.598404100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSelectableFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSelectableFlags
-{
-	None = 0,
-	DontClosePopups = 1,
-	SpanAllColumns = 2,
-	AllowDoubleClick = 4,
-	Disabled = 8,
-	AllowItemOverlap = 0x10
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSelectableFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiSelectableFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSelectableFlagsPrivate.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSelectableFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,13 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSelectableFlagsPrivate
-{
-	NoHoldingActiveID = 0x100000,
-	SelectOnNav = 0x200000,
-	SelectOnClick = 0x400000,
-	SelectOnRelease = 0x800000,
-	SpanAvailWidth = 0x1000000,
-	DrawHoveredWhenHeld = 0x2000000,
-	SetNavIdOnHover = 0x4000000,
-	NoPadWithHalfSpacing = 0x8000000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSeparatorFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiSeparatorFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSeparatorFlags.cs	2025-05-22 18:15:44.586893900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSeparatorFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSeparatorFlags
-{
-	None = 0,
-	Horizontal = 1,
-	Vertical = 2,
-	SpanAllColumns = 4
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSettingsHandler.cs Out/RG.ImGui/ImGuiNET/ImGuiSettingsHandler.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSettingsHandler.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSettingsHandler.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,24 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiSettingsHandler
-{
-	public unsafe byte* TypeName;
-
-	public uint TypeHash;
-
-	public IntPtr ClearAllFn;
-
-	public IntPtr ReadInitFn;
-
-	public IntPtr ReadOpenFn;
-
-	public IntPtr ReadLineFn;
-
-	public IntPtr ApplyAllFn;
-
-	public IntPtr WriteAllFn;
-
-	public unsafe void* UserData;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSettingsHandlerPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiSettingsHandlerPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSettingsHandlerPtr.cs	2025-05-22 18:15:44.628567000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSettingsHandlerPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,128 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiSettingsHandlerPtr
-{
-	public unsafe ImGuiSettingsHandler* NativePtr { get; }
-
-	public unsafe ref string TypeName => ref Unsafe.AsRef<string>(&NativePtr->TypeName);
-
-	public unsafe ref uint TypeHash => ref Unsafe.AsRef<uint>(&NativePtr->TypeHash);
-
-	public unsafe IntPtr ClearAllFn
-	{
-		get
-		{
-			return NativePtr->ClearAllFn;
-		}
-		set
-		{
-			NativePtr->ClearAllFn = value;
-		}
-	}
-
-	public unsafe IntPtr ReadInitFn
-	{
-		get
-		{
-			return NativePtr->ReadInitFn;
-		}
-		set
-		{
-			NativePtr->ReadInitFn = value;
-		}
-	}
-
-	public unsafe IntPtr ReadOpenFn
-	{
-		get
-		{
-			return NativePtr->ReadOpenFn;
-		}
-		set
-		{
-			NativePtr->ReadOpenFn = value;
-		}
-	}
-
-	public unsafe IntPtr ReadLineFn
-	{
-		get
-		{
-			return NativePtr->ReadLineFn;
-		}
-		set
-		{
-			NativePtr->ReadLineFn = value;
-		}
-	}
-
-	public unsafe IntPtr ApplyAllFn
-	{
-		get
-		{
-			return NativePtr->ApplyAllFn;
-		}
-		set
-		{
-			NativePtr->ApplyAllFn = value;
-		}
-	}
-
-	public unsafe IntPtr WriteAllFn
-	{
-		get
-		{
-			return NativePtr->WriteAllFn;
-		}
-		set
-		{
-			NativePtr->WriteAllFn = value;
-		}
-	}
-
-	public unsafe IntPtr UserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->UserData;
-		}
-		set
-		{
-			NativePtr->UserData = (void*)value;
-		}
-	}
-
-	public unsafe ImGuiSettingsHandlerPtr(ImGuiSettingsHandler* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiSettingsHandlerPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiSettingsHandler*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiSettingsHandlerPtr(ImGuiSettingsHandler* nativePtr)
-	{
-		return new ImGuiSettingsHandlerPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiSettingsHandler*(ImGuiSettingsHandlerPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiSettingsHandlerPtr(IntPtr nativePtr)
-	{
-		return new ImGuiSettingsHandlerPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiSettingsHandler_destroy()
-	{
-		ImGuiDebug.Log("ImGuiSettingsHandler_destroy #1");
-		ImGuiNative.ImGuiSettingsHandler_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItem.cs Out/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItem.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItem.cs	2025-05-22 18:15:44.565350100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItem.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiShrinkWidthItem
-{
-	public int Index;
-
-	public float Width;
-
-	public float InitialWidth;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItemPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItemPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItemPtr.cs	2025-05-22 18:15:44.598404100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiShrinkWidthItemPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,40 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiShrinkWidthItemPtr
-{
-	public unsafe ImGuiShrinkWidthItem* NativePtr { get; }
-
-	public unsafe ref int Index => ref Unsafe.AsRef<int>(&NativePtr->Index);
-
-	public unsafe ref float Width => ref Unsafe.AsRef<float>(&NativePtr->Width);
-
-	public unsafe ref float InitialWidth => ref Unsafe.AsRef<float>(&NativePtr->InitialWidth);
-
-	public unsafe ImGuiShrinkWidthItemPtr(ImGuiShrinkWidthItem* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiShrinkWidthItemPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiShrinkWidthItem*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiShrinkWidthItemPtr(ImGuiShrinkWidthItem* nativePtr)
-	{
-		return new ImGuiShrinkWidthItemPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiShrinkWidthItem*(ImGuiShrinkWidthItemPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiShrinkWidthItemPtr(IntPtr nativePtr)
-	{
-		return new ImGuiShrinkWidthItemPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallback.cs Out/RG.ImGui/ImGuiNET/ImGuiSizeCallback.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallback.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSizeCallback.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-namespace ImGuiNET;
-
-public unsafe delegate void ImGuiSizeCallback(ImGuiSizeCallbackData* data);
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallbackData.cs Out/RG.ImGui/ImGuiNET/ImGuiSizeCallbackData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallbackData.cs	2025-05-22 18:15:44.567353300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSizeCallbackData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiSizeCallbackData
-{
-	public unsafe void* UserData;
-
-	public Vector2 Pos;
-
-	public Vector2 CurrentSize;
-
-	public Vector2 DesiredSize;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallbackDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiSizeCallbackDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeCallbackDataPtr.cs	2025-05-22 18:15:44.608485500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSizeCallbackDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,58 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiSizeCallbackDataPtr
-{
-	public unsafe ImGuiSizeCallbackData* NativePtr { get; }
-
-	public unsafe IntPtr UserData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->UserData;
-		}
-		set
-		{
-			NativePtr->UserData = (void*)value;
-		}
-	}
-
-	public unsafe ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&NativePtr->Pos);
-
-	public unsafe ref Vector2 CurrentSize => ref Unsafe.AsRef<Vector2>(&NativePtr->CurrentSize);
-
-	public unsafe ref Vector2 DesiredSize => ref Unsafe.AsRef<Vector2>(&NativePtr->DesiredSize);
-
-	public unsafe ImGuiSizeCallbackDataPtr(ImGuiSizeCallbackData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiSizeCallbackDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiSizeCallbackData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiSizeCallbackDataPtr(ImGuiSizeCallbackData* nativePtr)
-	{
-		return new ImGuiSizeCallbackDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiSizeCallbackData*(ImGuiSizeCallbackDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiSizeCallbackDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiSizeCallbackDataPtr(nativePtr);
-	}
-
-	public unsafe ImGuiSizeCallbackDataPtr(ref ImGuiSizeCallbackData data)
-	{
-		NativePtr = (ImGuiSizeCallbackData*)Unsafe.AsPointer(ref data);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeSafeCallback.cs Out/RG.ImGui/ImGuiNET/ImGuiSizeSafeCallback.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSizeSafeCallback.cs	2025-05-22 18:15:44.746440300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSizeSafeCallback.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-namespace ImGuiNET;
-
-public delegate void ImGuiSizeSafeCallback(ImGuiSizeCallbackDataPtr data);
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSliderFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiSliderFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSliderFlags.cs	2025-05-22 18:15:44.618536800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSliderFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSliderFlags
-{
-	None = 0,
-	AlwaysClamp = 16,
-	Logarithmic = 32,
-	NoRoundToFormat = 64,
-	NoInput = 128,
-	InvalidMask_ = 1879048207
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSliderFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiSliderFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSliderFlagsPrivate.cs	2025-05-22 18:15:44.628567000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSliderFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSliderFlagsPrivate
-{
-	Vertical = 0x100000,
-	ReadOnly = 0x200000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSortDirection.cs Out/RG.ImGui/ImGuiNET/ImGuiSortDirection.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiSortDirection.cs	2025-05-22 18:15:44.567353300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiSortDirection.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiSortDirection
-{
-	None,
-	Ascending,
-	Descending
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackLevelInfo.cs Out/RG.ImGui/ImGuiNET/ImGuiStackLevelInfo.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackLevelInfo.cs	2025-05-22 18:15:44.585883500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackLevelInfo.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,126 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiStackLevelInfo
-{
-	public uint ID;
-
-	public sbyte QueryFrameCount;
-
-	public byte QuerySuccess;
-
-	public ImGuiDataType DataType;
-
-	public byte Desc_0;
-
-	public byte Desc_1;
-
-	public byte Desc_2;
-
-	public byte Desc_3;
-
-	public byte Desc_4;
-
-	public byte Desc_5;
-
-	public byte Desc_6;
-
-	public byte Desc_7;
-
-	public byte Desc_8;
-
-	public byte Desc_9;
-
-	public byte Desc_10;
-
-	public byte Desc_11;
-
-	public byte Desc_12;
-
-	public byte Desc_13;
-
-	public byte Desc_14;
-
-	public byte Desc_15;
-
-	public byte Desc_16;
-
-	public byte Desc_17;
-
-	public byte Desc_18;
-
-	public byte Desc_19;
-
-	public byte Desc_20;
-
-	public byte Desc_21;
-
-	public byte Desc_22;
-
-	public byte Desc_23;
-
-	public byte Desc_24;
-
-	public byte Desc_25;
-
-	public byte Desc_26;
-
-	public byte Desc_27;
-
-	public byte Desc_28;
-
-	public byte Desc_29;
-
-	public byte Desc_30;
-
-	public byte Desc_31;
-
-	public byte Desc_32;
-
-	public byte Desc_33;
-
-	public byte Desc_34;
-
-	public byte Desc_35;
-
-	public byte Desc_36;
-
-	public byte Desc_37;
-
-	public byte Desc_38;
-
-	public byte Desc_39;
-
-	public byte Desc_40;
-
-	public byte Desc_41;
-
-	public byte Desc_42;
-
-	public byte Desc_43;
-
-	public byte Desc_44;
-
-	public byte Desc_45;
-
-	public byte Desc_46;
-
-	public byte Desc_47;
-
-	public byte Desc_48;
-
-	public byte Desc_49;
-
-	public byte Desc_50;
-
-	public byte Desc_51;
-
-	public byte Desc_52;
-
-	public byte Desc_53;
-
-	public byte Desc_54;
-
-	public byte Desc_55;
-
-	public byte Desc_56;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackLevelInfoPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStackLevelInfoPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackLevelInfoPtr.cs	2025-05-22 18:15:44.608485500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackLevelInfoPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,50 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiStackLevelInfoPtr
-{
-	public unsafe ImGuiStackLevelInfo* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref sbyte QueryFrameCount => ref Unsafe.AsRef<sbyte>(&NativePtr->QueryFrameCount);
-
-	public unsafe ref bool QuerySuccess => ref Unsafe.AsRef<bool>(&NativePtr->QuerySuccess);
-
-	public unsafe ref ImGuiDataType DataType => ref Unsafe.AsRef<ImGuiDataType>(&NativePtr->DataType);
-
-	public unsafe RangeAccessor<byte> Desc => new RangeAccessor<byte>(&NativePtr->Desc_0, 57);
-
-	public unsafe ImGuiStackLevelInfoPtr(ImGuiStackLevelInfo* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStackLevelInfoPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStackLevelInfo*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStackLevelInfoPtr(ImGuiStackLevelInfo* nativePtr)
-	{
-		return new ImGuiStackLevelInfoPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStackLevelInfo*(ImGuiStackLevelInfoPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStackLevelInfoPtr(IntPtr nativePtr)
-	{
-		return new ImGuiStackLevelInfoPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiStackLevelInfo_destroy()
-	{
-		ImGuiDebug.Log("ImGuiStackLevelInfo_destroy #1");
-		ImGuiNative.ImGuiStackLevelInfo_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackSizes.cs Out/RG.ImGui/ImGuiNET/ImGuiStackSizes.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackSizes.cs	2025-05-22 18:15:44.627563300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackSizes.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,22 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiStackSizes
-{
-	public short SizeOfIDStack;
-
-	public short SizeOfColorStack;
-
-	public short SizeOfStyleVarStack;
-
-	public short SizeOfFontStack;
-
-	public short SizeOfFocusScopeStack;
-
-	public short SizeOfGroupStack;
-
-	public short SizeOfItemFlagsStack;
-
-	public short SizeOfBeginPopupStack;
-
-	public short SizeOfDisabledStack;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackSizesPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStackSizesPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackSizesPtr.cs	2025-05-22 18:15:44.618536800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackSizesPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,70 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiStackSizesPtr
-{
-	public unsafe ImGuiStackSizes* NativePtr { get; }
-
-	public unsafe ref short SizeOfIDStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfIDStack);
-
-	public unsafe ref short SizeOfColorStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfColorStack);
-
-	public unsafe ref short SizeOfStyleVarStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfStyleVarStack);
-
-	public unsafe ref short SizeOfFontStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfFontStack);
-
-	public unsafe ref short SizeOfFocusScopeStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfFocusScopeStack);
-
-	public unsafe ref short SizeOfGroupStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfGroupStack);
-
-	public unsafe ref short SizeOfItemFlagsStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfItemFlagsStack);
-
-	public unsafe ref short SizeOfBeginPopupStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfBeginPopupStack);
-
-	public unsafe ref short SizeOfDisabledStack => ref Unsafe.AsRef<short>(&NativePtr->SizeOfDisabledStack);
-
-	public unsafe ImGuiStackSizesPtr(ImGuiStackSizes* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStackSizesPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStackSizes*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStackSizesPtr(ImGuiStackSizes* nativePtr)
-	{
-		return new ImGuiStackSizesPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStackSizes*(ImGuiStackSizesPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStackSizesPtr(IntPtr nativePtr)
-	{
-		return new ImGuiStackSizesPtr(nativePtr);
-	}
-
-	public unsafe void CompareWithCurrentState()
-	{
-		ImGuiDebug.Log("ImGuiStackSizes_CompareWithCurrentState #1");
-		ImGuiNative.ImGuiStackSizes_CompareWithCurrentState(NativePtr);
-	}
-
-	public unsafe void SetToCurrentState()
-	{
-		ImGuiDebug.Log("ImGuiStackSizes_SetToCurrentState #1");
-		ImGuiNative.ImGuiStackSizes_SetToCurrentState(NativePtr);
-	}
-
-	public unsafe void ImGuiStackSizes_destroy()
-	{
-		ImGuiDebug.Log("ImGuiStackSizes_destroy #1");
-		ImGuiNative.ImGuiStackSizes_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackTool.cs Out/RG.ImGui/ImGuiNET/ImGuiStackTool.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackTool.cs	2025-05-22 18:15:44.629564500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackTool.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiStackTool
-{
-	public int LastActiveFrame;
-
-	public int StackLevel;
-
-	public uint QueryId;
-
-	public ImVector Results;
-
-	public byte CopyToClipboardOnCtrlC;
-
-	public float CopyToClipboardLastTime;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackToolPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStackToolPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStackToolPtr.cs	2025-05-22 18:15:44.608485500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStackToolPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,52 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiStackToolPtr
-{
-	public unsafe ImGuiStackTool* NativePtr { get; }
-
-	public unsafe ref int LastActiveFrame => ref Unsafe.AsRef<int>(&NativePtr->LastActiveFrame);
-
-	public unsafe ref int StackLevel => ref Unsafe.AsRef<int>(&NativePtr->StackLevel);
-
-	public unsafe ref uint QueryId => ref Unsafe.AsRef<uint>(&NativePtr->QueryId);
-
-	public unsafe ImPtrVector<ImGuiStackLevelInfoPtr> Results => new ImPtrVector<ImGuiStackLevelInfoPtr>(NativePtr->Results, Unsafe.SizeOf<ImGuiStackLevelInfo>());
-
-	public unsafe ref bool CopyToClipboardOnCtrlC => ref Unsafe.AsRef<bool>(&NativePtr->CopyToClipboardOnCtrlC);
-
-	public unsafe ref float CopyToClipboardLastTime => ref Unsafe.AsRef<float>(&NativePtr->CopyToClipboardLastTime);
-
-	public unsafe ImGuiStackToolPtr(ImGuiStackTool* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStackToolPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStackTool*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStackToolPtr(ImGuiStackTool* nativePtr)
-	{
-		return new ImGuiStackToolPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStackTool*(ImGuiStackToolPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStackToolPtr(IntPtr nativePtr)
-	{
-		return new ImGuiStackToolPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiStackTool_destroy()
-	{
-		ImGuiDebug.Log("ImGuiStackTool_destroy #1");
-		ImGuiNative.ImGuiStackTool_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStorage.cs Out/RG.ImGui/ImGuiNET/ImGuiStorage.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStorage.cs	2025-05-22 18:15:44.618536800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStorage.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiStorage
-{
-	public ImVector Data;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePair.cs Out/RG.ImGui/ImGuiNET/ImGuiStoragePair.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePair.cs	2025-05-22 18:15:44.757952200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStoragePair.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiStoragePair
-{
-	public uint Key;
-
-	public UnionValue Value;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePairPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStoragePairPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePairPtr.cs	2025-05-22 18:15:44.746440300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStoragePairPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,33 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiStoragePairPtr
-{
-	public unsafe ImGuiStoragePair* NativePtr { get; }
-
-	public unsafe ImGuiStoragePairPtr(ImGuiStoragePair* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStoragePairPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStoragePair*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStoragePairPtr(ImGuiStoragePair* nativePtr)
-	{
-		return new ImGuiStoragePairPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStoragePair*(ImGuiStoragePairPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStoragePairPtr(IntPtr nativePtr)
-	{
-		return new ImGuiStoragePairPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStoragePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStoragePtr.cs	2025-05-22 18:15:44.660103800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStoragePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,172 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiStoragePtr
-{
-	public unsafe ImGuiStorage* NativePtr { get; }
-
-	public unsafe ImVector<IntPtr> Data => new ImVector<IntPtr>(NativePtr->Data);
-
-	public unsafe ImGuiStoragePtr(ImGuiStorage* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStoragePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStorage*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStoragePtr(ImGuiStorage* nativePtr)
-	{
-		return new ImGuiStoragePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStorage*(ImGuiStoragePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStoragePtr(IntPtr nativePtr)
-	{
-		return new ImGuiStoragePtr(nativePtr);
-	}
-
-	public unsafe void BuildSortByKey()
-	{
-		ImGuiDebug.Log("ImGuiStorage_BuildSortByKey #1");
-		ImGuiNative.ImGuiStorage_BuildSortByKey(NativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImGuiStorage_Clear #1");
-		ImGuiNative.ImGuiStorage_Clear(NativePtr);
-	}
-
-	public unsafe bool GetBool(uint key)
-	{
-		byte default_val = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("ImGuiStorage_GetBool #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiStorage_GetBool(NativePtr, key, default_val));
-	}
-
-	public unsafe bool GetBool(uint key, bool default_val)
-	{
-		byte default_val2 = MarshalUtils.bool_to_byte(default_val);
-		ImGuiDebug.Log("ImGuiStorage_GetBool #2");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiStorage_GetBool(NativePtr, key, default_val2));
-	}
-
-	public unsafe byte* GetBoolRef(uint key)
-	{
-		byte default_val = MarshalUtils.bool_to_byte(inBool: false);
-		ImGuiDebug.Log("ImGuiStorage_GetBoolRef #1");
-		return ImGuiNative.ImGuiStorage_GetBoolRef(NativePtr, key, default_val);
-	}
-
-	public unsafe byte* GetBoolRef(uint key, bool default_val)
-	{
-		byte default_val2 = MarshalUtils.bool_to_byte(default_val);
-		ImGuiDebug.Log("ImGuiStorage_GetBoolRef #2");
-		return ImGuiNative.ImGuiStorage_GetBoolRef(NativePtr, key, default_val2);
-	}
-
-	public unsafe float GetFloat(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetFloat #1");
-		return ImGuiNative.ImGuiStorage_GetFloat(NativePtr, key, 0f);
-	}
-
-	public unsafe float GetFloat(uint key, float default_val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetFloat #2");
-		return ImGuiNative.ImGuiStorage_GetFloat(NativePtr, key, default_val);
-	}
-
-	public unsafe float* GetFloatRef(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetFloatRef #1");
-		return ImGuiNative.ImGuiStorage_GetFloatRef(NativePtr, key, 0f);
-	}
-
-	public unsafe float* GetFloatRef(uint key, float default_val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetFloatRef #2");
-		return ImGuiNative.ImGuiStorage_GetFloatRef(NativePtr, key, default_val);
-	}
-
-	public unsafe int GetInt(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetInt #1");
-		return ImGuiNative.ImGuiStorage_GetInt(NativePtr, key, 0);
-	}
-
-	public unsafe int GetInt(uint key, int default_val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetInt #2");
-		return ImGuiNative.ImGuiStorage_GetInt(NativePtr, key, default_val);
-	}
-
-	public unsafe int* GetIntRef(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetIntRef #1");
-		return ImGuiNative.ImGuiStorage_GetIntRef(NativePtr, key, 0);
-	}
-
-	public unsafe int* GetIntRef(uint key, int default_val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetIntRef #2");
-		return ImGuiNative.ImGuiStorage_GetIntRef(NativePtr, key, default_val);
-	}
-
-	public unsafe void* GetVoidPtr(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetVoidPtr #1");
-		return MarshalUtils.IntPtr_to_pointer(ImGuiNative.ImGuiStorage_GetVoidPtr(NativePtr, key));
-	}
-
-	public unsafe void** GetVoidPtrRef(uint key)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetVoidPtrRef #1");
-		return MarshalUtils.IntPtr_to_pointerPointer(ImGuiNative.ImGuiStorage_GetVoidPtrRef(NativePtr, key, IntPtr.Zero));
-	}
-
-	public unsafe void** GetVoidPtrRef(uint key, IntPtr default_val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_GetVoidPtrRef #2");
-		return MarshalUtils.IntPtr_to_pointerPointer(ImGuiNative.ImGuiStorage_GetVoidPtrRef(NativePtr, key, default_val));
-	}
-
-	public unsafe void SetAllInt(int val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_SetAllInt #1");
-		ImGuiNative.ImGuiStorage_SetAllInt(NativePtr, val);
-	}
-
-	public unsafe void SetBool(uint key, bool val)
-	{
-		byte val2 = MarshalUtils.bool_to_byte(val);
-		ImGuiDebug.Log("ImGuiStorage_SetBool #1");
-		ImGuiNative.ImGuiStorage_SetBool(NativePtr, key, val2);
-	}
-
-	public unsafe void SetFloat(uint key, float val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_SetFloat #1");
-		ImGuiNative.ImGuiStorage_SetFloat(NativePtr, key, val);
-	}
-
-	public unsafe void SetInt(uint key, int val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_SetInt #1");
-		ImGuiNative.ImGuiStorage_SetInt(NativePtr, key, val);
-	}
-
-	public unsafe void SetVoidPtr(uint key, IntPtr val)
-	{
-		ImGuiDebug.Log("ImGuiStorage_SetVoidPtr #1");
-		ImGuiNative.ImGuiStorage_SetVoidPtr(NativePtr, key, val);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStyle.cs Out/RG.ImGui/ImGuiNET/ImGuiStyle.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStyle.cs	2025-05-22 18:15:44.662279200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStyle.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,192 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiStyle
-{
-	public float Alpha;
-
-	public float DisabledAlpha;
-
-	public Vector2 WindowPadding;
-
-	public float WindowRounding;
-
-	public float WindowBorderSize;
-
-	public Vector2 WindowMinSize;
-
-	public Vector2 WindowTitleAlign;
-
-	public ImGuiDir WindowMenuButtonPosition;
-
-	public float ChildRounding;
-
-	public float ChildBorderSize;
-
-	public float PopupRounding;
-
-	public float PopupBorderSize;
-
-	public Vector2 FramePadding;
-
-	public float FrameRounding;
-
-	public float FrameBorderSize;
-
-	public Vector2 ItemSpacing;
-
-	public Vector2 ItemInnerSpacing;
-
-	public Vector2 CellPadding;
-
-	public Vector2 TouchExtraPadding;
-
-	public float IndentSpacing;
-
-	public float ColumnsMinSpacing;
-
-	public float ScrollbarSize;
-
-	public float ScrollbarRounding;
-
-	public float GrabMinSize;
-
-	public float GrabRounding;
-
-	public float LogSliderDeadzone;
-
-	public float TabRounding;
-
-	public float TabBorderSize;
-
-	public float TabMinWidthForCloseButton;
-
-	public ImGuiDir ColorButtonPosition;
-
-	public Vector2 ButtonTextAlign;
-
-	public Vector2 SelectableTextAlign;
-
-	public Vector2 DisplayWindowPadding;
-
-	public Vector2 DisplaySafeAreaPadding;
-
-	public float MouseCursorScale;
-
-	public byte AntiAliasedLines;
-
-	public byte AntiAliasedLinesUseTex;
-
-	public byte AntiAliasedFill;
-
-	public float CurveTessellationTol;
-
-	public float CircleTessellationMaxError;
-
-	public Vector4 Colors_0;
-
-	public Vector4 Colors_1;
-
-	public Vector4 Colors_2;
-
-	public Vector4 Colors_3;
-
-	public Vector4 Colors_4;
-
-	public Vector4 Colors_5;
-
-	public Vector4 Colors_6;
-
-	public Vector4 Colors_7;
-
-	public Vector4 Colors_8;
-
-	public Vector4 Colors_9;
-
-	public Vector4 Colors_10;
-
-	public Vector4 Colors_11;
-
-	public Vector4 Colors_12;
-
-	public Vector4 Colors_13;
-
-	public Vector4 Colors_14;
-
-	public Vector4 Colors_15;
-
-	public Vector4 Colors_16;
-
-	public Vector4 Colors_17;
-
-	public Vector4 Colors_18;
-
-	public Vector4 Colors_19;
-
-	public Vector4 Colors_20;
-
-	public Vector4 Colors_21;
-
-	public Vector4 Colors_22;
-
-	public Vector4 Colors_23;
-
-	public Vector4 Colors_24;
-
-	public Vector4 Colors_25;
-
-	public Vector4 Colors_26;
-
-	public Vector4 Colors_27;
-
-	public Vector4 Colors_28;
-
-	public Vector4 Colors_29;
-
-	public Vector4 Colors_30;
-
-	public Vector4 Colors_31;
-
-	public Vector4 Colors_32;
-
-	public Vector4 Colors_33;
-
-	public Vector4 Colors_34;
-
-	public Vector4 Colors_35;
-
-	public Vector4 Colors_36;
-
-	public Vector4 Colors_37;
-
-	public Vector4 Colors_38;
-
-	public Vector4 Colors_39;
-
-	public Vector4 Colors_40;
-
-	public Vector4 Colors_41;
-
-	public Vector4 Colors_42;
-
-	public Vector4 Colors_43;
-
-	public Vector4 Colors_44;
-
-	public Vector4 Colors_45;
-
-	public Vector4 Colors_46;
-
-	public Vector4 Colors_47;
-
-	public Vector4 Colors_48;
-
-	public Vector4 Colors_49;
-
-	public Vector4 Colors_50;
-
-	public Vector4 Colors_51;
-
-	public Vector4 Colors_52;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStylePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiStylePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStylePtr.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStylePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,129 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiStylePtr
-{
-	public unsafe ImGuiStyle* NativePtr { get; }
-
-	public unsafe ref float Alpha => ref Unsafe.AsRef<float>(&NativePtr->Alpha);
-
-	public unsafe ref float DisabledAlpha => ref Unsafe.AsRef<float>(&NativePtr->DisabledAlpha);
-
-	public unsafe ref Vector2 WindowPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->WindowPadding);
-
-	public unsafe ref float WindowRounding => ref Unsafe.AsRef<float>(&NativePtr->WindowRounding);
-
-	public unsafe ref float WindowBorderSize => ref Unsafe.AsRef<float>(&NativePtr->WindowBorderSize);
-
-	public unsafe ref Vector2 WindowMinSize => ref Unsafe.AsRef<Vector2>(&NativePtr->WindowMinSize);
-
-	public unsafe ref Vector2 WindowTitleAlign => ref Unsafe.AsRef<Vector2>(&NativePtr->WindowTitleAlign);
-
-	public unsafe ref ImGuiDir WindowMenuButtonPosition => ref Unsafe.AsRef<ImGuiDir>(&NativePtr->WindowMenuButtonPosition);
-
-	public unsafe ref float ChildRounding => ref Unsafe.AsRef<float>(&NativePtr->ChildRounding);
-
-	public unsafe ref float ChildBorderSize => ref Unsafe.AsRef<float>(&NativePtr->ChildBorderSize);
-
-	public unsafe ref float PopupRounding => ref Unsafe.AsRef<float>(&NativePtr->PopupRounding);
-
-	public unsafe ref float PopupBorderSize => ref Unsafe.AsRef<float>(&NativePtr->PopupBorderSize);
-
-	public unsafe ref Vector2 FramePadding => ref Unsafe.AsRef<Vector2>(&NativePtr->FramePadding);
-
-	public unsafe ref float FrameRounding => ref Unsafe.AsRef<float>(&NativePtr->FrameRounding);
-
-	public unsafe ref float FrameBorderSize => ref Unsafe.AsRef<float>(&NativePtr->FrameBorderSize);
-
-	public unsafe ref Vector2 ItemSpacing => ref Unsafe.AsRef<Vector2>(&NativePtr->ItemSpacing);
-
-	public unsafe ref Vector2 ItemInnerSpacing => ref Unsafe.AsRef<Vector2>(&NativePtr->ItemInnerSpacing);
-
-	public unsafe ref Vector2 CellPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->CellPadding);
-
-	public unsafe ref Vector2 TouchExtraPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->TouchExtraPadding);
-
-	public unsafe ref float IndentSpacing => ref Unsafe.AsRef<float>(&NativePtr->IndentSpacing);
-
-	public unsafe ref float ColumnsMinSpacing => ref Unsafe.AsRef<float>(&NativePtr->ColumnsMinSpacing);
-
-	public unsafe ref float ScrollbarSize => ref Unsafe.AsRef<float>(&NativePtr->ScrollbarSize);
-
-	public unsafe ref float ScrollbarRounding => ref Unsafe.AsRef<float>(&NativePtr->ScrollbarRounding);
-
-	public unsafe ref float GrabMinSize => ref Unsafe.AsRef<float>(&NativePtr->GrabMinSize);
-
-	public unsafe ref float GrabRounding => ref Unsafe.AsRef<float>(&NativePtr->GrabRounding);
-
-	public unsafe ref float LogSliderDeadzone => ref Unsafe.AsRef<float>(&NativePtr->LogSliderDeadzone);
-
-	public unsafe ref float TabRounding => ref Unsafe.AsRef<float>(&NativePtr->TabRounding);
-
-	public unsafe ref float TabBorderSize => ref Unsafe.AsRef<float>(&NativePtr->TabBorderSize);
-
-	public unsafe ref float TabMinWidthForCloseButton => ref Unsafe.AsRef<float>(&NativePtr->TabMinWidthForCloseButton);
-
-	public unsafe ref ImGuiDir ColorButtonPosition => ref Unsafe.AsRef<ImGuiDir>(&NativePtr->ColorButtonPosition);
-
-	public unsafe ref Vector2 ButtonTextAlign => ref Unsafe.AsRef<Vector2>(&NativePtr->ButtonTextAlign);
-
-	public unsafe ref Vector2 SelectableTextAlign => ref Unsafe.AsRef<Vector2>(&NativePtr->SelectableTextAlign);
-
-	public unsafe ref Vector2 DisplayWindowPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplayWindowPadding);
-
-	public unsafe ref Vector2 DisplaySafeAreaPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->DisplaySafeAreaPadding);
-
-	public unsafe ref float MouseCursorScale => ref Unsafe.AsRef<float>(&NativePtr->MouseCursorScale);
-
-	public unsafe ref bool AntiAliasedLines => ref Unsafe.AsRef<bool>(&NativePtr->AntiAliasedLines);
-
-	public unsafe ref bool AntiAliasedLinesUseTex => ref Unsafe.AsRef<bool>(&NativePtr->AntiAliasedLinesUseTex);
-
-	public unsafe ref bool AntiAliasedFill => ref Unsafe.AsRef<bool>(&NativePtr->AntiAliasedFill);
-
-	public unsafe ref float CurveTessellationTol => ref Unsafe.AsRef<float>(&NativePtr->CurveTessellationTol);
-
-	public unsafe ref float CircleTessellationMaxError => ref Unsafe.AsRef<float>(&NativePtr->CircleTessellationMaxError);
-
-	public unsafe RangeAccessor<Vector4> Colors => new RangeAccessor<Vector4>(&NativePtr->Colors_0, 53);
-
-	public unsafe ImGuiStylePtr(ImGuiStyle* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiStylePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiStyle*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiStylePtr(ImGuiStyle* nativePtr)
-	{
-		return new ImGuiStylePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiStyle*(ImGuiStylePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiStylePtr(IntPtr nativePtr)
-	{
-		return new ImGuiStylePtr(nativePtr);
-	}
-
-	public unsafe void ScaleAllSizes(float scale_factor)
-	{
-		ImGuiDebug.Log("ImGuiStyle_ScaleAllSizes #1");
-		ImGuiNative.ImGuiStyle_ScaleAllSizes(NativePtr, scale_factor);
-	}
-
-	public unsafe void ImGuiStyle_destroy()
-	{
-		ImGuiDebug.Log("ImGuiStyle_destroy #1");
-		ImGuiNative.ImGuiStyle_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStyleVar.cs Out/RG.ImGui/ImGuiNET/ImGuiStyleVar.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiStyleVar.cs	2025-05-22 18:15:44.786070800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiStyleVar.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,31 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiStyleVar
-{
-	Alpha,
-	DisabledAlpha,
-	WindowPadding,
-	WindowRounding,
-	WindowBorderSize,
-	WindowMinSize,
-	WindowTitleAlign,
-	ChildRounding,
-	ChildBorderSize,
-	PopupRounding,
-	PopupBorderSize,
-	FramePadding,
-	FrameRounding,
-	FrameBorderSize,
-	ItemSpacing,
-	ItemInnerSpacing,
-	IndentSpacing,
-	CellPadding,
-	ScrollbarSize,
-	ScrollbarRounding,
-	GrabMinSize,
-	GrabRounding,
-	TabRounding,
-	ButtonTextAlign,
-	SelectableTextAlign,
-	COUNT
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBar.cs Out/RG.ImGui/ImGuiNET/ImGuiTabBar.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBar.cs	2025-05-22 18:15:44.596404200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabBar.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,68 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTabBar
-{
-	public ImVector Tabs;
-
-	public ImGuiTabBarFlags Flags;
-
-	public uint ID;
-
-	public uint SelectedTabId;
-
-	public uint NextSelectedTabId;
-
-	public uint VisibleTabId;
-
-	public int CurrFrameVisible;
-
-	public int PrevFrameVisible;
-
-	public Rect BarRect;
-
-	public float CurrTabsContentsHeight;
-
-	public float PrevTabsContentsHeight;
-
-	public float WidthAllTabs;
-
-	public float WidthAllTabsIdeal;
-
-	public float ScrollingAnim;
-
-	public float ScrollingTarget;
-
-	public float ScrollingTargetDistToVisibility;
-
-	public float ScrollingSpeed;
-
-	public float ScrollingRectMinX;
-
-	public float ScrollingRectMaxX;
-
-	public uint ReorderRequestTabId;
-
-	public short ReorderRequestOffset;
-
-	public sbyte BeginCount;
-
-	public byte WantLayout;
-
-	public byte VisibleTabWasSubmitted;
-
-	public byte TabsAddedNew;
-
-	public short TabsActiveCount;
-
-	public short LastTabItemIdx;
-
-	public float ItemSpacingY;
-
-	public Vector2 FramePadding;
-
-	public Vector2 BackupCursorPos;
-
-	public ImGuiTextBuffer TabsNames;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTabBarFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarFlags.cs	2025-05-22 18:15:44.736918800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabBarFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTabBarFlags
-{
-	None = 0,
-	Reorderable = 1,
-	AutoSelectNewTabs = 2,
-	TabListPopupButton = 4,
-	NoCloseWithMiddleMouseButton = 8,
-	NoTabListScrollingButtons = 16,
-	NoTooltip = 32,
-	FittingPolicyResizeDown = 64,
-	FittingPolicyScroll = 128,
-	FittingPolicyMask_ = 192,
-	FittingPolicyDefault_ = 64
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiTabBarFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarFlagsPrivate.cs	2025-05-22 18:15:44.738924400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabBarFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTabBarFlagsPrivate
-{
-	DockNode = 0x100000,
-	IsFocused = 0x200000,
-	SaveSettings = 0x400000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTabBarPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabBarPtr.cs	2025-05-22 18:15:44.727418100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabBarPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,115 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTabBarPtr
-{
-	public unsafe ImGuiTabBar* NativePtr { get; }
-
-	public unsafe ImPtrVector<ImGuiTabItemPtr> Tabs => new ImPtrVector<ImGuiTabItemPtr>(NativePtr->Tabs, Unsafe.SizeOf<ImGuiTabItem>());
-
-	public unsafe ref ImGuiTabBarFlags Flags => ref Unsafe.AsRef<ImGuiTabBarFlags>(&NativePtr->Flags);
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref uint SelectedTabId => ref Unsafe.AsRef<uint>(&NativePtr->SelectedTabId);
-
-	public unsafe ref uint NextSelectedTabId => ref Unsafe.AsRef<uint>(&NativePtr->NextSelectedTabId);
-
-	public unsafe ref uint VisibleTabId => ref Unsafe.AsRef<uint>(&NativePtr->VisibleTabId);
-
-	public unsafe ref int CurrFrameVisible => ref Unsafe.AsRef<int>(&NativePtr->CurrFrameVisible);
-
-	public unsafe ref int PrevFrameVisible => ref Unsafe.AsRef<int>(&NativePtr->PrevFrameVisible);
-
-	public unsafe ref Rect BarRect => ref Unsafe.AsRef<Rect>(&NativePtr->BarRect);
-
-	public unsafe ref float CurrTabsContentsHeight => ref Unsafe.AsRef<float>(&NativePtr->CurrTabsContentsHeight);
-
-	public unsafe ref float PrevTabsContentsHeight => ref Unsafe.AsRef<float>(&NativePtr->PrevTabsContentsHeight);
-
-	public unsafe ref float WidthAllTabs => ref Unsafe.AsRef<float>(&NativePtr->WidthAllTabs);
-
-	public unsafe ref float WidthAllTabsIdeal => ref Unsafe.AsRef<float>(&NativePtr->WidthAllTabsIdeal);
-
-	public unsafe ref float ScrollingAnim => ref Unsafe.AsRef<float>(&NativePtr->ScrollingAnim);
-
-	public unsafe ref float ScrollingTarget => ref Unsafe.AsRef<float>(&NativePtr->ScrollingTarget);
-
-	public unsafe ref float ScrollingTargetDistToVisibility => ref Unsafe.AsRef<float>(&NativePtr->ScrollingTargetDistToVisibility);
-
-	public unsafe ref float ScrollingSpeed => ref Unsafe.AsRef<float>(&NativePtr->ScrollingSpeed);
-
-	public unsafe ref float ScrollingRectMinX => ref Unsafe.AsRef<float>(&NativePtr->ScrollingRectMinX);
-
-	public unsafe ref float ScrollingRectMaxX => ref Unsafe.AsRef<float>(&NativePtr->ScrollingRectMaxX);
-
-	public unsafe ref uint ReorderRequestTabId => ref Unsafe.AsRef<uint>(&NativePtr->ReorderRequestTabId);
-
-	public unsafe ref short ReorderRequestOffset => ref Unsafe.AsRef<short>(&NativePtr->ReorderRequestOffset);
-
-	public unsafe ref sbyte BeginCount => ref Unsafe.AsRef<sbyte>(&NativePtr->BeginCount);
-
-	public unsafe ref bool WantLayout => ref Unsafe.AsRef<bool>(&NativePtr->WantLayout);
-
-	public unsafe ref bool VisibleTabWasSubmitted => ref Unsafe.AsRef<bool>(&NativePtr->VisibleTabWasSubmitted);
-
-	public unsafe ref bool TabsAddedNew => ref Unsafe.AsRef<bool>(&NativePtr->TabsAddedNew);
-
-	public unsafe ref short TabsActiveCount => ref Unsafe.AsRef<short>(&NativePtr->TabsActiveCount);
-
-	public unsafe ref short LastTabItemIdx => ref Unsafe.AsRef<short>(&NativePtr->LastTabItemIdx);
-
-	public unsafe ref float ItemSpacingY => ref Unsafe.AsRef<float>(&NativePtr->ItemSpacingY);
-
-	public unsafe ref Vector2 FramePadding => ref Unsafe.AsRef<Vector2>(&NativePtr->FramePadding);
-
-	public unsafe ref Vector2 BackupCursorPos => ref Unsafe.AsRef<Vector2>(&NativePtr->BackupCursorPos);
-
-	public unsafe ref ImGuiTextBuffer TabsNames => ref Unsafe.AsRef<ImGuiTextBuffer>(&NativePtr->TabsNames);
-
-	public unsafe ImGuiTabBarPtr(ImGuiTabBar* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTabBarPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTabBar*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTabBarPtr(ImGuiTabBar* nativePtr)
-	{
-		return new ImGuiTabBarPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTabBar*(ImGuiTabBarPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTabBarPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTabBarPtr(nativePtr);
-	}
-
-	public unsafe string GetTabName(ImGuiTabItemPtr tab)
-	{
-		ImGuiDebug.Log("ImGuiTabBar_GetTabName #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.ImGuiTabBar_GetTabName(NativePtr, tab));
-	}
-
-	public unsafe int GetTabOrder(ImGuiTabItemPtr tab)
-	{
-		ImGuiDebug.Log("ImGuiTabBar_GetTabOrder #1");
-		return ImGuiNative.ImGuiTabBar_GetTabOrder(NativePtr, tab);
-	}
-
-	public unsafe void ImGuiTabBar_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTabBar_destroy #1");
-		ImGuiNative.ImGuiTabBar_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItem.cs Out/RG.ImGui/ImGuiNET/ImGuiTabItem.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItem.cs	2025-05-22 18:15:44.598404100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabItem.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,28 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTabItem
-{
-	public uint ID;
-
-	public ImGuiTabItemFlags Flags;
-
-	public int LastFrameVisible;
-
-	public int LastFrameSelected;
-
-	public float Offset;
-
-	public float Width;
-
-	public float ContentWidth;
-
-	public float RequestedWidth;
-
-	public int NameOffset;
-
-	public short BeginOrder;
-
-	public short IndexDuringLayout;
-
-	public byte WantClose;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTabItemFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemFlags.cs	2025-05-22 18:15:44.684317000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabItemFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTabItemFlags
-{
-	None = 0,
-	UnsavedDocument = 1,
-	SetSelected = 2,
-	NoCloseWithMiddleMouseButton = 4,
-	NoPushId = 8,
-	NoTooltip = 0x10,
-	NoReorder = 0x20,
-	Leading = 0x40,
-	Trailing = 0x80
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiTabItemFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemFlagsPrivate.cs	2025-05-22 18:15:44.694354300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabItemFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTabItemFlagsPrivate
-{
-	SectionMask_ = 192,
-	NoCloseButton = 1048576,
-	Button = 2097152
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTabItemPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTabItemPtr.cs	2025-05-22 18:15:44.674807400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTabItemPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,64 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTabItemPtr
-{
-	public unsafe ImGuiTabItem* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiTabItemFlags Flags => ref Unsafe.AsRef<ImGuiTabItemFlags>(&NativePtr->Flags);
-
-	public unsafe ref int LastFrameVisible => ref Unsafe.AsRef<int>(&NativePtr->LastFrameVisible);
-
-	public unsafe ref int LastFrameSelected => ref Unsafe.AsRef<int>(&NativePtr->LastFrameSelected);
-
-	public unsafe ref float Offset => ref Unsafe.AsRef<float>(&NativePtr->Offset);
-
-	public unsafe ref float Width => ref Unsafe.AsRef<float>(&NativePtr->Width);
-
-	public unsafe ref float ContentWidth => ref Unsafe.AsRef<float>(&NativePtr->ContentWidth);
-
-	public unsafe ref float RequestedWidth => ref Unsafe.AsRef<float>(&NativePtr->RequestedWidth);
-
-	public unsafe ref int NameOffset => ref Unsafe.AsRef<int>(&NativePtr->NameOffset);
-
-	public unsafe ref short BeginOrder => ref Unsafe.AsRef<short>(&NativePtr->BeginOrder);
-
-	public unsafe ref short IndexDuringLayout => ref Unsafe.AsRef<short>(&NativePtr->IndexDuringLayout);
-
-	public unsafe ref bool WantClose => ref Unsafe.AsRef<bool>(&NativePtr->WantClose);
-
-	public unsafe ImGuiTabItemPtr(ImGuiTabItem* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTabItemPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTabItem*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTabItemPtr(ImGuiTabItem* nativePtr)
-	{
-		return new ImGuiTabItemPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTabItem*(ImGuiTabItemPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTabItemPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTabItemPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTabItem_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTabItem_destroy #1");
-		ImGuiNative.ImGuiTabItem_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTable.cs Out/RG.ImGui/ImGuiNET/ImGuiTable.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTable.cs	2025-05-22 18:15:44.617537300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTable.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,214 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTable
-{
-	public uint ID;
-
-	public ImGuiTableFlags Flags;
-
-	public unsafe void* RawData;
-
-	public unsafe ImGuiTableTempData* TempData;
-
-	public ImSpan Columns;
-
-	public ImSpan DisplayOrderToIndex;
-
-	public ImSpan RowCellData;
-
-	public ulong EnabledMaskByDisplayOrder;
-
-	public ulong EnabledMaskByIndex;
-
-	public ulong VisibleMaskByIndex;
-
-	public ulong RequestOutputMaskByIndex;
-
-	public ImGuiTableFlags SettingsLoadedFlags;
-
-	public int SettingsOffset;
-
-	public int LastFrameActive;
-
-	public int ColumnsCount;
-
-	public int CurrentRow;
-
-	public int CurrentColumn;
-
-	public short InstanceCurrent;
-
-	public short InstanceInteracted;
-
-	public float RowPosY1;
-
-	public float RowPosY2;
-
-	public float RowMinHeight;
-
-	public float RowTextBaseline;
-
-	public float RowIndentOffsetX;
-
-	public ImGuiTableRowFlags RowFlags;
-
-	public ImGuiTableRowFlags LastRowFlags;
-
-	public int RowBgColorCounter;
-
-	public unsafe fixed uint RowBgColor[2];
-
-	public uint BorderColorStrong;
-
-	public uint BorderColorLight;
-
-	public float BorderX1;
-
-	public float BorderX2;
-
-	public float HostIndentX;
-
-	public float MinColumnWidth;
-
-	public float OuterPaddingX;
-
-	public float CellPaddingX;
-
-	public float CellPaddingY;
-
-	public float CellSpacingX1;
-
-	public float CellSpacingX2;
-
-	public float InnerWidth;
-
-	public float ColumnsGivenWidth;
-
-	public float ColumnsAutoFitWidth;
-
-	public float ColumnsStretchSumWeights;
-
-	public float ResizedColumnNextWidth;
-
-	public float ResizeLockMinContentsX2;
-
-	public float RefScale;
-
-	public Rect OuterRect;
-
-	public Rect InnerRect;
-
-	public Rect WorkRect;
-
-	public Rect InnerClipRect;
-
-	public Rect BgClipRect;
-
-	public Rect Bg0ClipRectForDrawCmd;
-
-	public Rect Bg2ClipRectForDrawCmd;
-
-	public Rect HostClipRect;
-
-	public Rect HostBackupInnerClipRect;
-
-	public unsafe ImGuiWindow* OuterWindow;
-
-	public unsafe ImGuiWindow* InnerWindow;
-
-	public ImGuiTextBuffer ColumnsNames;
-
-	public unsafe ImDrawListSplitter* DrawSplitter;
-
-	public ImGuiTableInstanceData InstanceDataFirst;
-
-	public ImVector InstanceDataExtra;
-
-	public ImGuiTableColumnSortSpecs SortSpecsSingle;
-
-	public ImVector SortSpecsMulti;
-
-	public ImGuiTableSortSpecs SortSpecs;
-
-	public sbyte SortSpecsCount;
-
-	public sbyte ColumnsEnabledCount;
-
-	public sbyte ColumnsEnabledFixedCount;
-
-	public sbyte DeclColumnsCount;
-
-	public sbyte HoveredColumnBody;
-
-	public sbyte HoveredColumnBorder;
-
-	public sbyte AutoFitSingleColumn;
-
-	public sbyte ResizedColumn;
-
-	public sbyte LastResizedColumn;
-
-	public sbyte HeldHeaderColumn;
-
-	public sbyte ReorderColumn;
-
-	public sbyte ReorderColumnDir;
-
-	public sbyte LeftMostEnabledColumn;
-
-	public sbyte RightMostEnabledColumn;
-
-	public sbyte LeftMostStretchedColumn;
-
-	public sbyte RightMostStretchedColumn;
-
-	public sbyte ContextPopupColumn;
-
-	public sbyte FreezeRowsRequest;
-
-	public sbyte FreezeRowsCount;
-
-	public sbyte FreezeColumnsRequest;
-
-	public sbyte FreezeColumnsCount;
-
-	public sbyte RowCellDataCurrent;
-
-	public byte DummyDrawChannel;
-
-	public byte Bg2DrawChannelCurrent;
-
-	public byte Bg2DrawChannelUnfrozen;
-
-	public byte IsLayoutLocked;
-
-	public byte IsInsideRow;
-
-	public byte IsInitializing;
-
-	public byte IsSortSpecsDirty;
-
-	public byte IsUsingHeaders;
-
-	public byte IsContextPopupOpen;
-
-	public byte IsSettingsRequestLoad;
-
-	public byte IsSettingsDirty;
-
-	public byte IsDefaultDisplayOrder;
-
-	public byte IsResetAllRequest;
-
-	public byte IsResetDisplayOrderRequest;
-
-	public byte IsUnfrozenRows;
-
-	public byte IsDefaultSizingPolicy;
-
-	public byte MemoryCompacted;
-
-	public byte HostSkipItems;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableBgTarget.cs Out/RG.ImGui/ImGuiNET/ImGuiTableBgTarget.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableBgTarget.cs	2025-05-22 18:15:44.864373500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableBgTarget.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTableBgTarget
-{
-	None,
-	RowBg0,
-	RowBg1,
-	CellBg
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableCellData.cs Out/RG.ImGui/ImGuiNET/ImGuiTableCellData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableCellData.cs	2025-05-22 18:15:44.864373500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableCellData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableCellData
-{
-	public uint BgColor;
-
-	public sbyte Column;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableCellDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableCellDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableCellDataPtr.cs	2025-05-22 18:15:44.628567000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableCellDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableCellDataPtr
-{
-	public unsafe ImGuiTableCellData* NativePtr { get; }
-
-	public unsafe ref uint BgColor => ref Unsafe.AsRef<uint>(&NativePtr->BgColor);
-
-	public unsafe ref sbyte Column => ref Unsafe.AsRef<sbyte>(&NativePtr->Column);
-
-	public unsafe ImGuiTableCellDataPtr(ImGuiTableCellData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableCellDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableCellData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableCellDataPtr(ImGuiTableCellData* nativePtr)
-	{
-		return new ImGuiTableCellDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableCellData*(ImGuiTableCellDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableCellDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableCellDataPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumn.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumn.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumn.cs	2025-05-22 18:15:44.638078900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumn.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,88 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableColumn
-{
-	public ImGuiTableColumnFlags Flags;
-
-	public float WidthGiven;
-
-	public float MinX;
-
-	public float MaxX;
-
-	public float WidthRequest;
-
-	public float WidthAuto;
-
-	public float StretchWeight;
-
-	public float InitStretchWeightOrWidth;
-
-	public Rect ClipRect;
-
-	public uint UserID;
-
-	public float WorkMinX;
-
-	public float WorkMaxX;
-
-	public float ItemWidth;
-
-	public float ContentMaxXFrozen;
-
-	public float ContentMaxXUnfrozen;
-
-	public float ContentMaxXHeadersUsed;
-
-	public float ContentMaxXHeadersIdeal;
-
-	public short NameOffset;
-
-	public sbyte DisplayOrder;
-
-	public sbyte IndexWithinEnabledSet;
-
-	public sbyte PrevEnabledColumn;
-
-	public sbyte NextEnabledColumn;
-
-	public sbyte SortOrder;
-
-	public byte DrawChannelCurrent;
-
-	public byte DrawChannelFrozen;
-
-	public byte DrawChannelUnfrozen;
-
-	public byte IsEnabled;
-
-	public byte IsUserEnabled;
-
-	public byte IsUserEnabledNextFrame;
-
-	public byte IsVisibleX;
-
-	public byte IsVisibleY;
-
-	public byte IsRequestOutput;
-
-	public byte IsSkipItems;
-
-	public byte IsPreserveWidthAuto;
-
-	public sbyte NavLayerCurrent;
-
-	public byte AutoFitQueue;
-
-	public byte CannotSkipItemsQueue;
-
-	public byte SortDirection;
-
-	public byte SortDirectionsAvailCount;
-
-	public byte SortDirectionsAvailMask;
-
-	public byte SortDirectionsAvailList;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnFlags.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,32 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTableColumnFlags
-{
-	None = 0,
-	Disabled = 1,
-	DefaultHide = 2,
-	DefaultSort = 4,
-	WidthStretch = 8,
-	WidthFixed = 16,
-	NoResize = 32,
-	NoReorder = 64,
-	NoHide = 128,
-	NoClip = 256,
-	NoSort = 512,
-	NoSortAscending = 1024,
-	NoSortDescending = 2048,
-	NoHeaderLabel = 4096,
-	NoHeaderWidth = 8192,
-	PreferSortAscending = 16384,
-	PreferSortDescending = 32768,
-	IndentEnable = 65536,
-	IndentDisable = 131072,
-	IsEnabled = 16777216,
-	IsVisible = 33554432,
-	IsSorted = 67108864,
-	IsHovered = 134217728,
-	WidthMask_ = 24,
-	IndentMask_ = 196608,
-	StatusMask_ = 251658240,
-	NoDirectResize_ = 1073741824
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnPtr.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,123 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableColumnPtr
-{
-	public unsafe ImGuiTableColumn* NativePtr { get; }
-
-	public unsafe ref ImGuiTableColumnFlags Flags => ref Unsafe.AsRef<ImGuiTableColumnFlags>(&NativePtr->Flags);
-
-	public unsafe ref float WidthGiven => ref Unsafe.AsRef<float>(&NativePtr->WidthGiven);
-
-	public unsafe ref float MinX => ref Unsafe.AsRef<float>(&NativePtr->MinX);
-
-	public unsafe ref float MaxX => ref Unsafe.AsRef<float>(&NativePtr->MaxX);
-
-	public unsafe ref float WidthRequest => ref Unsafe.AsRef<float>(&NativePtr->WidthRequest);
-
-	public unsafe ref float WidthAuto => ref Unsafe.AsRef<float>(&NativePtr->WidthAuto);
-
-	public unsafe ref float StretchWeight => ref Unsafe.AsRef<float>(&NativePtr->StretchWeight);
-
-	public unsafe ref float InitStretchWeightOrWidth => ref Unsafe.AsRef<float>(&NativePtr->InitStretchWeightOrWidth);
-
-	public unsafe ref Rect ClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->ClipRect);
-
-	public unsafe ref uint UserID => ref Unsafe.AsRef<uint>(&NativePtr->UserID);
-
-	public unsafe ref float WorkMinX => ref Unsafe.AsRef<float>(&NativePtr->WorkMinX);
-
-	public unsafe ref float WorkMaxX => ref Unsafe.AsRef<float>(&NativePtr->WorkMaxX);
-
-	public unsafe ref float ItemWidth => ref Unsafe.AsRef<float>(&NativePtr->ItemWidth);
-
-	public unsafe ref float ContentMaxXFrozen => ref Unsafe.AsRef<float>(&NativePtr->ContentMaxXFrozen);
-
-	public unsafe ref float ContentMaxXUnfrozen => ref Unsafe.AsRef<float>(&NativePtr->ContentMaxXUnfrozen);
-
-	public unsafe ref float ContentMaxXHeadersUsed => ref Unsafe.AsRef<float>(&NativePtr->ContentMaxXHeadersUsed);
-
-	public unsafe ref float ContentMaxXHeadersIdeal => ref Unsafe.AsRef<float>(&NativePtr->ContentMaxXHeadersIdeal);
-
-	public unsafe ref short NameOffset => ref Unsafe.AsRef<short>(&NativePtr->NameOffset);
-
-	public unsafe ref sbyte DisplayOrder => ref Unsafe.AsRef<sbyte>(&NativePtr->DisplayOrder);
-
-	public unsafe ref sbyte IndexWithinEnabledSet => ref Unsafe.AsRef<sbyte>(&NativePtr->IndexWithinEnabledSet);
-
-	public unsafe ref sbyte PrevEnabledColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->PrevEnabledColumn);
-
-	public unsafe ref sbyte NextEnabledColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->NextEnabledColumn);
-
-	public unsafe ref sbyte SortOrder => ref Unsafe.AsRef<sbyte>(&NativePtr->SortOrder);
-
-	public unsafe ref byte DrawChannelCurrent => ref Unsafe.AsRef<byte>(&NativePtr->DrawChannelCurrent);
-
-	public unsafe ref byte DrawChannelFrozen => ref Unsafe.AsRef<byte>(&NativePtr->DrawChannelFrozen);
-
-	public unsafe ref byte DrawChannelUnfrozen => ref Unsafe.AsRef<byte>(&NativePtr->DrawChannelUnfrozen);
-
-	public unsafe ref bool IsEnabled => ref Unsafe.AsRef<bool>(&NativePtr->IsEnabled);
-
-	public unsafe ref bool IsUserEnabled => ref Unsafe.AsRef<bool>(&NativePtr->IsUserEnabled);
-
-	public unsafe ref bool IsUserEnabledNextFrame => ref Unsafe.AsRef<bool>(&NativePtr->IsUserEnabledNextFrame);
-
-	public unsafe ref bool IsVisibleX => ref Unsafe.AsRef<bool>(&NativePtr->IsVisibleX);
-
-	public unsafe ref bool IsVisibleY => ref Unsafe.AsRef<bool>(&NativePtr->IsVisibleY);
-
-	public unsafe ref bool IsRequestOutput => ref Unsafe.AsRef<bool>(&NativePtr->IsRequestOutput);
-
-	public unsafe ref bool IsSkipItems => ref Unsafe.AsRef<bool>(&NativePtr->IsSkipItems);
-
-	public unsafe ref bool IsPreserveWidthAuto => ref Unsafe.AsRef<bool>(&NativePtr->IsPreserveWidthAuto);
-
-	public unsafe ref sbyte NavLayerCurrent => ref Unsafe.AsRef<sbyte>(&NativePtr->NavLayerCurrent);
-
-	public unsafe ref byte AutoFitQueue => ref Unsafe.AsRef<byte>(&NativePtr->AutoFitQueue);
-
-	public unsafe ref byte CannotSkipItemsQueue => ref Unsafe.AsRef<byte>(&NativePtr->CannotSkipItemsQueue);
-
-	public unsafe ref byte SortDirection => ref Unsafe.AsRef<byte>(&NativePtr->SortDirection);
-
-	public unsafe ref byte SortDirectionsAvailCount => ref Unsafe.AsRef<byte>(&NativePtr->SortDirectionsAvailCount);
-
-	public unsafe ref byte SortDirectionsAvailMask => ref Unsafe.AsRef<byte>(&NativePtr->SortDirectionsAvailMask);
-
-	public unsafe ref byte SortDirectionsAvailList => ref Unsafe.AsRef<byte>(&NativePtr->SortDirectionsAvailList);
-
-	public unsafe ImGuiTableColumnPtr(ImGuiTableColumn* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableColumnPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableColumn*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableColumnPtr(ImGuiTableColumn* nativePtr)
-	{
-		return new ImGuiTableColumnPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableColumn*(ImGuiTableColumnPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableColumnPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableColumnPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableColumn_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableColumn_destroy #1");
-		ImGuiNative.ImGuiTableColumn_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSettings.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSettings.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSettings.cs	2025-05-22 18:15:44.627563300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSettings.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,20 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableColumnSettings
-{
-	public float WidthOrWeight;
-
-	public uint UserID;
-
-	public sbyte Index;
-
-	public sbyte DisplayOrder;
-
-	public sbyte SortOrder;
-
-	public byte SortDirection;
-
-	public byte IsEnabled;
-
-	public byte IsStretch;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSettingsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSettingsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSettingsPtr.cs	2025-05-22 18:15:44.684317000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSettingsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,56 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableColumnSettingsPtr
-{
-	public unsafe ImGuiTableColumnSettings* NativePtr { get; }
-
-	public unsafe ref float WidthOrWeight => ref Unsafe.AsRef<float>(&NativePtr->WidthOrWeight);
-
-	public unsafe ref uint UserID => ref Unsafe.AsRef<uint>(&NativePtr->UserID);
-
-	public unsafe ref sbyte Index => ref Unsafe.AsRef<sbyte>(&NativePtr->Index);
-
-	public unsafe ref sbyte DisplayOrder => ref Unsafe.AsRef<sbyte>(&NativePtr->DisplayOrder);
-
-	public unsafe ref sbyte SortOrder => ref Unsafe.AsRef<sbyte>(&NativePtr->SortOrder);
-
-	public unsafe ref byte SortDirection => ref Unsafe.AsRef<byte>(&NativePtr->SortDirection);
-
-	public unsafe ref byte IsEnabled => ref Unsafe.AsRef<byte>(&NativePtr->IsEnabled);
-
-	public unsafe ref byte IsStretch => ref Unsafe.AsRef<byte>(&NativePtr->IsStretch);
-
-	public unsafe ImGuiTableColumnSettingsPtr(ImGuiTableColumnSettings* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableColumnSettingsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableColumnSettings*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableColumnSettingsPtr(ImGuiTableColumnSettings* nativePtr)
-	{
-		return new ImGuiTableColumnSettingsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableColumnSettings*(ImGuiTableColumnSettingsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableColumnSettingsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableColumnSettingsPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableColumnSettings_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableColumnSettings_destroy #1");
-		ImGuiNative.ImGuiTableColumnSettings_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecs.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecs.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecs.cs	2025-05-22 18:15:44.628567000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecs.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableColumnSortSpecs
-{
-	public uint ColumnUserID;
-
-	public short ColumnIndex;
-
-	public short SortOrder;
-
-	public ImGuiSortDirection SortDirection;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecsPtr.cs	2025-05-22 18:15:44.673807800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableColumnSortSpecsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,48 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableColumnSortSpecsPtr
-{
-	public unsafe ImGuiTableColumnSortSpecs* NativePtr { get; }
-
-	public unsafe ref uint ColumnUserID => ref Unsafe.AsRef<uint>(&NativePtr->ColumnUserID);
-
-	public unsafe ref short ColumnIndex => ref Unsafe.AsRef<short>(&NativePtr->ColumnIndex);
-
-	public unsafe ref short SortOrder => ref Unsafe.AsRef<short>(&NativePtr->SortOrder);
-
-	public unsafe ref ImGuiSortDirection SortDirection => ref Unsafe.AsRef<ImGuiSortDirection>(&NativePtr->SortDirection);
-
-	public unsafe ImGuiTableColumnSortSpecsPtr(ImGuiTableColumnSortSpecs* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableColumnSortSpecsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableColumnSortSpecs*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableColumnSortSpecsPtr(ImGuiTableColumnSortSpecs* nativePtr)
-	{
-		return new ImGuiTableColumnSortSpecsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableColumnSortSpecs*(ImGuiTableColumnSortSpecsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableColumnSortSpecsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableColumnSortSpecsPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableColumnSortSpecs_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableColumnSortSpecs_destroy #1");
-		ImGuiNative.ImGuiTableColumnSortSpecs_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTableFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableFlags.cs	2025-05-22 18:15:44.683312300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,41 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTableFlags
-{
-	None = 0,
-	Resizable = 1,
-	Reorderable = 2,
-	Hideable = 4,
-	Sortable = 8,
-	NoSavedSettings = 16,
-	ContextMenuInBody = 32,
-	RowBg = 64,
-	BordersInnerH = 128,
-	BordersOuterH = 256,
-	BordersInnerV = 512,
-	BordersOuterV = 1024,
-	BordersH = 384,
-	BordersV = 1536,
-	BordersInner = 640,
-	BordersOuter = 1280,
-	Borders = 1920,
-	NoBordersInBody = 2048,
-	NoBordersInBodyUntilResize = 4096,
-	SizingFixedFit = 8192,
-	SizingFixedSame = 16384,
-	SizingStretchProp = 24576,
-	SizingStretchSame = 32768,
-	NoHostExtendX = 65536,
-	NoHostExtendY = 131072,
-	NoKeepColumnsVisible = 262144,
-	PreciseWidths = 524288,
-	NoClip = 1048576,
-	PadOuterX = 2097152,
-	NoPadOuterX = 4194304,
-	NoPadInnerX = 8388608,
-	ScrollX = 16777216,
-	ScrollY = 33554432,
-	SortMulti = 67108864,
-	SortTristate = 134217728,
-	SizingMask_ = 57344
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableInstanceData.cs Out/RG.ImGui/ImGuiNET/ImGuiTableInstanceData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableInstanceData.cs	2025-05-22 18:15:44.694354300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableInstanceData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableInstanceData
-{
-	public float LastOuterHeight;
-
-	public float LastFirstRowHeight;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableInstanceDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableInstanceDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableInstanceDataPtr.cs	2025-05-22 18:15:44.661282100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableInstanceDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,44 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableInstanceDataPtr
-{
-	public unsafe ImGuiTableInstanceData* NativePtr { get; }
-
-	public unsafe ref float LastOuterHeight => ref Unsafe.AsRef<float>(&NativePtr->LastOuterHeight);
-
-	public unsafe ref float LastFirstRowHeight => ref Unsafe.AsRef<float>(&NativePtr->LastFirstRowHeight);
-
-	public unsafe ImGuiTableInstanceDataPtr(ImGuiTableInstanceData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableInstanceDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableInstanceData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableInstanceDataPtr(ImGuiTableInstanceData* nativePtr)
-	{
-		return new ImGuiTableInstanceDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableInstanceData*(ImGuiTableInstanceDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableInstanceDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableInstanceDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableInstanceData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableInstanceData_destroy #1");
-		ImGuiNative.ImGuiTableInstanceData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTablePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTablePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTablePtr.cs	2025-05-22 18:15:44.855795000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTablePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,266 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTablePtr
-{
-	public unsafe ImGuiTable* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiTableFlags Flags => ref Unsafe.AsRef<ImGuiTableFlags>(&NativePtr->Flags);
-
-	public unsafe IntPtr RawData
-	{
-		get
-		{
-			return (IntPtr)NativePtr->RawData;
-		}
-		set
-		{
-			NativePtr->RawData = (void*)value;
-		}
-	}
-
-	public unsafe ref ImGuiTableTempDataPtr TempData => ref Unsafe.AsRef<ImGuiTableTempDataPtr>(&NativePtr->TempData);
-
-	public unsafe ref ImSpan Columns => ref Unsafe.AsRef<ImSpan>(&NativePtr->Columns);
-
-	public unsafe ref ImSpan DisplayOrderToIndex => ref Unsafe.AsRef<ImSpan>(&NativePtr->DisplayOrderToIndex);
-
-	public unsafe ref ImSpan RowCellData => ref Unsafe.AsRef<ImSpan>(&NativePtr->RowCellData);
-
-	public unsafe ref ulong EnabledMaskByDisplayOrder => ref Unsafe.AsRef<ulong>(&NativePtr->EnabledMaskByDisplayOrder);
-
-	public unsafe ref ulong EnabledMaskByIndex => ref Unsafe.AsRef<ulong>(&NativePtr->EnabledMaskByIndex);
-
-	public unsafe ref ulong VisibleMaskByIndex => ref Unsafe.AsRef<ulong>(&NativePtr->VisibleMaskByIndex);
-
-	public unsafe ref ulong RequestOutputMaskByIndex => ref Unsafe.AsRef<ulong>(&NativePtr->RequestOutputMaskByIndex);
-
-	public unsafe ref ImGuiTableFlags SettingsLoadedFlags => ref Unsafe.AsRef<ImGuiTableFlags>(&NativePtr->SettingsLoadedFlags);
-
-	public unsafe ref int SettingsOffset => ref Unsafe.AsRef<int>(&NativePtr->SettingsOffset);
-
-	public unsafe ref int LastFrameActive => ref Unsafe.AsRef<int>(&NativePtr->LastFrameActive);
-
-	public unsafe ref int ColumnsCount => ref Unsafe.AsRef<int>(&NativePtr->ColumnsCount);
-
-	public unsafe ref int CurrentRow => ref Unsafe.AsRef<int>(&NativePtr->CurrentRow);
-
-	public unsafe ref int CurrentColumn => ref Unsafe.AsRef<int>(&NativePtr->CurrentColumn);
-
-	public unsafe ref short InstanceCurrent => ref Unsafe.AsRef<short>(&NativePtr->InstanceCurrent);
-
-	public unsafe ref short InstanceInteracted => ref Unsafe.AsRef<short>(&NativePtr->InstanceInteracted);
-
-	public unsafe ref float RowPosY1 => ref Unsafe.AsRef<float>(&NativePtr->RowPosY1);
-
-	public unsafe ref float RowPosY2 => ref Unsafe.AsRef<float>(&NativePtr->RowPosY2);
-
-	public unsafe ref float RowMinHeight => ref Unsafe.AsRef<float>(&NativePtr->RowMinHeight);
-
-	public unsafe ref float RowTextBaseline => ref Unsafe.AsRef<float>(&NativePtr->RowTextBaseline);
-
-	public unsafe ref float RowIndentOffsetX => ref Unsafe.AsRef<float>(&NativePtr->RowIndentOffsetX);
-
-	public unsafe ref ImGuiTableRowFlags RowFlags => ref Unsafe.AsRef<ImGuiTableRowFlags>(&NativePtr->RowFlags);
-
-	public unsafe ref ImGuiTableRowFlags LastRowFlags => ref Unsafe.AsRef<ImGuiTableRowFlags>(&NativePtr->LastRowFlags);
-
-	public unsafe ref int RowBgColorCounter => ref Unsafe.AsRef<int>(&NativePtr->RowBgColorCounter);
-
-	public unsafe RangeAccessor<uint> RowBgColor
-	{
-		get
-		{
-			uint* ptr = NativePtr->RowBgColor;
-			return new RangeAccessor<uint>(&ptr, 2);
-		}
-	}
-
-	public unsafe ref uint BorderColorStrong => ref Unsafe.AsRef<uint>(&NativePtr->BorderColorStrong);
-
-	public unsafe ref uint BorderColorLight => ref Unsafe.AsRef<uint>(&NativePtr->BorderColorLight);
-
-	public unsafe ref float BorderX1 => ref Unsafe.AsRef<float>(&NativePtr->BorderX1);
-
-	public unsafe ref float BorderX2 => ref Unsafe.AsRef<float>(&NativePtr->BorderX2);
-
-	public unsafe ref float HostIndentX => ref Unsafe.AsRef<float>(&NativePtr->HostIndentX);
-
-	public unsafe ref float MinColumnWidth => ref Unsafe.AsRef<float>(&NativePtr->MinColumnWidth);
-
-	public unsafe ref float OuterPaddingX => ref Unsafe.AsRef<float>(&NativePtr->OuterPaddingX);
-
-	public unsafe ref float CellPaddingX => ref Unsafe.AsRef<float>(&NativePtr->CellPaddingX);
-
-	public unsafe ref float CellPaddingY => ref Unsafe.AsRef<float>(&NativePtr->CellPaddingY);
-
-	public unsafe ref float CellSpacingX1 => ref Unsafe.AsRef<float>(&NativePtr->CellSpacingX1);
-
-	public unsafe ref float CellSpacingX2 => ref Unsafe.AsRef<float>(&NativePtr->CellSpacingX2);
-
-	public unsafe ref float InnerWidth => ref Unsafe.AsRef<float>(&NativePtr->InnerWidth);
-
-	public unsafe ref float ColumnsGivenWidth => ref Unsafe.AsRef<float>(&NativePtr->ColumnsGivenWidth);
-
-	public unsafe ref float ColumnsAutoFitWidth => ref Unsafe.AsRef<float>(&NativePtr->ColumnsAutoFitWidth);
-
-	public unsafe ref float ColumnsStretchSumWeights => ref Unsafe.AsRef<float>(&NativePtr->ColumnsStretchSumWeights);
-
-	public unsafe ref float ResizedColumnNextWidth => ref Unsafe.AsRef<float>(&NativePtr->ResizedColumnNextWidth);
-
-	public unsafe ref float ResizeLockMinContentsX2 => ref Unsafe.AsRef<float>(&NativePtr->ResizeLockMinContentsX2);
-
-	public unsafe ref float RefScale => ref Unsafe.AsRef<float>(&NativePtr->RefScale);
-
-	public unsafe ref Rect OuterRect => ref Unsafe.AsRef<Rect>(&NativePtr->OuterRect);
-
-	public unsafe ref Rect InnerRect => ref Unsafe.AsRef<Rect>(&NativePtr->InnerRect);
-
-	public unsafe ref Rect WorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->WorkRect);
-
-	public unsafe ref Rect InnerClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->InnerClipRect);
-
-	public unsafe ref Rect BgClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->BgClipRect);
-
-	public unsafe ref Rect Bg0ClipRectForDrawCmd => ref Unsafe.AsRef<Rect>(&NativePtr->Bg0ClipRectForDrawCmd);
-
-	public unsafe ref Rect Bg2ClipRectForDrawCmd => ref Unsafe.AsRef<Rect>(&NativePtr->Bg2ClipRectForDrawCmd);
-
-	public unsafe ref Rect HostClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostClipRect);
-
-	public unsafe ref Rect HostBackupInnerClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostBackupInnerClipRect);
-
-	public unsafe ref ImGuiWindowPtr OuterWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->OuterWindow);
-
-	public unsafe ref ImGuiWindowPtr InnerWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->InnerWindow);
-
-	public unsafe ref ImGuiTextBuffer ColumnsNames => ref Unsafe.AsRef<ImGuiTextBuffer>(&NativePtr->ColumnsNames);
-
-	public unsafe ref ImDrawListSplitterPtr DrawSplitter => ref Unsafe.AsRef<ImDrawListSplitterPtr>(&NativePtr->DrawSplitter);
-
-	public unsafe ref ImGuiTableInstanceData InstanceDataFirst => ref Unsafe.AsRef<ImGuiTableInstanceData>(&NativePtr->InstanceDataFirst);
-
-	public unsafe ImPtrVector<ImGuiTableInstanceDataPtr> InstanceDataExtra => new ImPtrVector<ImGuiTableInstanceDataPtr>(NativePtr->InstanceDataExtra, Unsafe.SizeOf<ImGuiTableInstanceData>());
-
-	public unsafe ref ImGuiTableColumnSortSpecs SortSpecsSingle => ref Unsafe.AsRef<ImGuiTableColumnSortSpecs>(&NativePtr->SortSpecsSingle);
-
-	public unsafe ImPtrVector<ImGuiTableColumnSortSpecsPtr> SortSpecsMulti => new ImPtrVector<ImGuiTableColumnSortSpecsPtr>(NativePtr->SortSpecsMulti, Unsafe.SizeOf<ImGuiTableColumnSortSpecs>());
-
-	public unsafe ref ImGuiTableSortSpecs SortSpecs => ref Unsafe.AsRef<ImGuiTableSortSpecs>(&NativePtr->SortSpecs);
-
-	public unsafe ref sbyte SortSpecsCount => ref Unsafe.AsRef<sbyte>(&NativePtr->SortSpecsCount);
-
-	public unsafe ref sbyte ColumnsEnabledCount => ref Unsafe.AsRef<sbyte>(&NativePtr->ColumnsEnabledCount);
-
-	public unsafe ref sbyte ColumnsEnabledFixedCount => ref Unsafe.AsRef<sbyte>(&NativePtr->ColumnsEnabledFixedCount);
-
-	public unsafe ref sbyte DeclColumnsCount => ref Unsafe.AsRef<sbyte>(&NativePtr->DeclColumnsCount);
-
-	public unsafe ref sbyte HoveredColumnBody => ref Unsafe.AsRef<sbyte>(&NativePtr->HoveredColumnBody);
-
-	public unsafe ref sbyte HoveredColumnBorder => ref Unsafe.AsRef<sbyte>(&NativePtr->HoveredColumnBorder);
-
-	public unsafe ref sbyte AutoFitSingleColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->AutoFitSingleColumn);
-
-	public unsafe ref sbyte ResizedColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->ResizedColumn);
-
-	public unsafe ref sbyte LastResizedColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->LastResizedColumn);
-
-	public unsafe ref sbyte HeldHeaderColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->HeldHeaderColumn);
-
-	public unsafe ref sbyte ReorderColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->ReorderColumn);
-
-	public unsafe ref sbyte ReorderColumnDir => ref Unsafe.AsRef<sbyte>(&NativePtr->ReorderColumnDir);
-
-	public unsafe ref sbyte LeftMostEnabledColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->LeftMostEnabledColumn);
-
-	public unsafe ref sbyte RightMostEnabledColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->RightMostEnabledColumn);
-
-	public unsafe ref sbyte LeftMostStretchedColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->LeftMostStretchedColumn);
-
-	public unsafe ref sbyte RightMostStretchedColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->RightMostStretchedColumn);
-
-	public unsafe ref sbyte ContextPopupColumn => ref Unsafe.AsRef<sbyte>(&NativePtr->ContextPopupColumn);
-
-	public unsafe ref sbyte FreezeRowsRequest => ref Unsafe.AsRef<sbyte>(&NativePtr->FreezeRowsRequest);
-
-	public unsafe ref sbyte FreezeRowsCount => ref Unsafe.AsRef<sbyte>(&NativePtr->FreezeRowsCount);
-
-	public unsafe ref sbyte FreezeColumnsRequest => ref Unsafe.AsRef<sbyte>(&NativePtr->FreezeColumnsRequest);
-
-	public unsafe ref sbyte FreezeColumnsCount => ref Unsafe.AsRef<sbyte>(&NativePtr->FreezeColumnsCount);
-
-	public unsafe ref sbyte RowCellDataCurrent => ref Unsafe.AsRef<sbyte>(&NativePtr->RowCellDataCurrent);
-
-	public unsafe ref byte DummyDrawChannel => ref Unsafe.AsRef<byte>(&NativePtr->DummyDrawChannel);
-
-	public unsafe ref byte Bg2DrawChannelCurrent => ref Unsafe.AsRef<byte>(&NativePtr->Bg2DrawChannelCurrent);
-
-	public unsafe ref byte Bg2DrawChannelUnfrozen => ref Unsafe.AsRef<byte>(&NativePtr->Bg2DrawChannelUnfrozen);
-
-	public unsafe ref bool IsLayoutLocked => ref Unsafe.AsRef<bool>(&NativePtr->IsLayoutLocked);
-
-	public unsafe ref bool IsInsideRow => ref Unsafe.AsRef<bool>(&NativePtr->IsInsideRow);
-
-	public unsafe ref bool IsInitializing => ref Unsafe.AsRef<bool>(&NativePtr->IsInitializing);
-
-	public unsafe ref bool IsSortSpecsDirty => ref Unsafe.AsRef<bool>(&NativePtr->IsSortSpecsDirty);
-
-	public unsafe ref bool IsUsingHeaders => ref Unsafe.AsRef<bool>(&NativePtr->IsUsingHeaders);
-
-	public unsafe ref bool IsContextPopupOpen => ref Unsafe.AsRef<bool>(&NativePtr->IsContextPopupOpen);
-
-	public unsafe ref bool IsSettingsRequestLoad => ref Unsafe.AsRef<bool>(&NativePtr->IsSettingsRequestLoad);
-
-	public unsafe ref bool IsSettingsDirty => ref Unsafe.AsRef<bool>(&NativePtr->IsSettingsDirty);
-
-	public unsafe ref bool IsDefaultDisplayOrder => ref Unsafe.AsRef<bool>(&NativePtr->IsDefaultDisplayOrder);
-
-	public unsafe ref bool IsResetAllRequest => ref Unsafe.AsRef<bool>(&NativePtr->IsResetAllRequest);
-
-	public unsafe ref bool IsResetDisplayOrderRequest => ref Unsafe.AsRef<bool>(&NativePtr->IsResetDisplayOrderRequest);
-
-	public unsafe ref bool IsUnfrozenRows => ref Unsafe.AsRef<bool>(&NativePtr->IsUnfrozenRows);
-
-	public unsafe ref bool IsDefaultSizingPolicy => ref Unsafe.AsRef<bool>(&NativePtr->IsDefaultSizingPolicy);
-
-	public unsafe ref bool MemoryCompacted => ref Unsafe.AsRef<bool>(&NativePtr->MemoryCompacted);
-
-	public unsafe ref bool HostSkipItems => ref Unsafe.AsRef<bool>(&NativePtr->HostSkipItems);
-
-	public unsafe ImGuiTablePtr(ImGuiTable* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTablePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTable*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTablePtr(ImGuiTable* nativePtr)
-	{
-		return new ImGuiTablePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTable*(ImGuiTablePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTablePtr(IntPtr nativePtr)
-	{
-		return new ImGuiTablePtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTable_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTable_destroy #1");
-		ImGuiNative.ImGuiTable_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableRowFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTableRowFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableRowFlags.cs	2025-05-22 18:15:44.672805800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableRowFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTableRowFlags
-{
-	None,
-	Headers
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSettings.cs Out/RG.ImGui/ImGuiNET/ImGuiTableSettings.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSettings.cs	2025-05-22 18:15:44.673807800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableSettings.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableSettings
-{
-	public uint ID;
-
-	public ImGuiTableFlags SaveFlags;
-
-	public float RefScale;
-
-	public sbyte ColumnsCount;
-
-	public sbyte ColumnsCountMax;
-
-	public byte WantApply;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSettingsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableSettingsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSettingsPtr.cs	2025-05-22 18:15:44.706403800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableSettingsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,59 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableSettingsPtr
-{
-	public unsafe ImGuiTableSettings* NativePtr { get; }
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiTableFlags SaveFlags => ref Unsafe.AsRef<ImGuiTableFlags>(&NativePtr->SaveFlags);
-
-	public unsafe ref float RefScale => ref Unsafe.AsRef<float>(&NativePtr->RefScale);
-
-	public unsafe ref sbyte ColumnsCount => ref Unsafe.AsRef<sbyte>(&NativePtr->ColumnsCount);
-
-	public unsafe ref sbyte ColumnsCountMax => ref Unsafe.AsRef<sbyte>(&NativePtr->ColumnsCountMax);
-
-	public unsafe ref bool WantApply => ref Unsafe.AsRef<bool>(&NativePtr->WantApply);
-
-	public unsafe ImGuiTableSettingsPtr(ImGuiTableSettings* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableSettingsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableSettings*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableSettingsPtr(ImGuiTableSettings* nativePtr)
-	{
-		return new ImGuiTableSettingsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableSettings*(ImGuiTableSettingsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableSettingsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableSettingsPtr(nativePtr);
-	}
-
-	public unsafe ImGuiTableColumnSettingsPtr GetColumnSettings()
-	{
-		ImGuiDebug.Log("ImGuiTableSettings_GetColumnSettings #1");
-		ImGuiTableColumnSettings* nativePtr = ImGuiNative.ImGuiTableSettings_GetColumnSettings(NativePtr);
-		return new ImGuiTableColumnSettingsPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableSettings_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableSettings_destroy #1");
-		ImGuiNative.ImGuiTableSettings_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSortSpecs.cs Out/RG.ImGui/ImGuiNET/ImGuiTableSortSpecs.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSortSpecs.cs	2025-05-22 18:15:44.638078900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableSortSpecs.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTableSortSpecs
-{
-	public unsafe ImGuiTableColumnSortSpecs* Specs;
-
-	public int SpecsCount;
-
-	public byte SpecsDirty;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSortSpecsPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableSortSpecsPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableSortSpecsPtr.cs	2025-05-22 18:15:44.674807400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableSortSpecsPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,46 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableSortSpecsPtr
-{
-	public unsafe ImGuiTableSortSpecs* NativePtr { get; }
-
-	public unsafe ref ImGuiTableColumnSortSpecsPtr Specs => ref Unsafe.AsRef<ImGuiTableColumnSortSpecsPtr>(&NativePtr->Specs);
-
-	public unsafe ref int SpecsCount => ref Unsafe.AsRef<int>(&NativePtr->SpecsCount);
-
-	public unsafe ref bool SpecsDirty => ref Unsafe.AsRef<bool>(&NativePtr->SpecsDirty);
-
-	public unsafe ImGuiTableSortSpecsPtr(ImGuiTableSortSpecs* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableSortSpecsPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableSortSpecs*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableSortSpecsPtr(ImGuiTableSortSpecs* nativePtr)
-	{
-		return new ImGuiTableSortSpecsPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableSortSpecs*(ImGuiTableSortSpecsPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableSortSpecsPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableSortSpecsPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableSortSpecs_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableSortSpecs_destroy #1");
-		ImGuiNative.ImGuiTableSortSpecs_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableTempData.cs Out/RG.ImGui/ImGuiNET/ImGuiTableTempData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableTempData.cs	2025-05-22 18:15:44.684317000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableTempData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,30 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableTempData
-{
-	public int TableIndex;
-
-	public float LastTimeActive;
-
-	public Vector2 UserOuterSize;
-
-	public ImDrawListSplitter DrawSplitter;
-
-	public Rect HostBackupWorkRect;
-
-	public Rect HostBackupParentWorkRect;
-
-	public Vector2 HostBackupPrevLineSize;
-
-	public Vector2 HostBackupCurrLineSize;
-
-	public Vector2 HostBackupCursorMaxPos;
-
-	public ImVec1 HostBackupColumnsOffset;
-
-	public float HostBackupItemWidth;
-
-	public int HostBackupItemWidthStackSize;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableTempDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTableTempDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTableTempDataPtr.cs	2025-05-22 18:15:44.737924000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTableTempDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,65 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiTableTempDataPtr
-{
-	public unsafe ImGuiTableTempData* NativePtr { get; }
-
-	public unsafe ref int TableIndex => ref Unsafe.AsRef<int>(&NativePtr->TableIndex);
-
-	public unsafe ref float LastTimeActive => ref Unsafe.AsRef<float>(&NativePtr->LastTimeActive);
-
-	public unsafe ref Vector2 UserOuterSize => ref Unsafe.AsRef<Vector2>(&NativePtr->UserOuterSize);
-
-	public unsafe ref ImDrawListSplitter DrawSplitter => ref Unsafe.AsRef<ImDrawListSplitter>(&NativePtr->DrawSplitter);
-
-	public unsafe ref Rect HostBackupWorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostBackupWorkRect);
-
-	public unsafe ref Rect HostBackupParentWorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->HostBackupParentWorkRect);
-
-	public unsafe ref Vector2 HostBackupPrevLineSize => ref Unsafe.AsRef<Vector2>(&NativePtr->HostBackupPrevLineSize);
-
-	public unsafe ref Vector2 HostBackupCurrLineSize => ref Unsafe.AsRef<Vector2>(&NativePtr->HostBackupCurrLineSize);
-
-	public unsafe ref Vector2 HostBackupCursorMaxPos => ref Unsafe.AsRef<Vector2>(&NativePtr->HostBackupCursorMaxPos);
-
-	public unsafe ref ImVec1 HostBackupColumnsOffset => ref Unsafe.AsRef<ImVec1>(&NativePtr->HostBackupColumnsOffset);
-
-	public unsafe ref float HostBackupItemWidth => ref Unsafe.AsRef<float>(&NativePtr->HostBackupItemWidth);
-
-	public unsafe ref int HostBackupItemWidthStackSize => ref Unsafe.AsRef<int>(&NativePtr->HostBackupItemWidthStackSize);
-
-	public unsafe ImGuiTableTempDataPtr(ImGuiTableTempData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTableTempDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTableTempData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTableTempDataPtr(ImGuiTableTempData* nativePtr)
-	{
-		return new ImGuiTableTempDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTableTempData*(ImGuiTableTempDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTableTempDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTableTempDataPtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTableTempData_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTableTempData_destroy #1");
-		ImGuiNative.ImGuiTableTempData_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextBuffer.cs Out/RG.ImGui/ImGuiNET/ImGuiTextBuffer.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextBuffer.cs	2025-05-22 18:15:44.638078900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextBuffer.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTextBuffer
-{
-	public ImVector Buf;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextBufferPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTextBufferPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextBufferPtr.cs	2025-05-22 18:15:44.726412400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextBufferPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,192 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImGuiTextBufferPtr
-{
-	public unsafe ImGuiTextBuffer* NativePtr { get; }
-
-	public unsafe ImVector<byte> Buf => new ImVector<byte>(NativePtr->Buf);
-
-	public unsafe ImGuiTextBufferPtr(ImGuiTextBuffer* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTextBufferPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTextBuffer*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTextBufferPtr(ImGuiTextBuffer* nativePtr)
-	{
-		return new ImGuiTextBufferPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTextBuffer*(ImGuiTextBufferPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTextBufferPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTextBufferPtr(nativePtr);
-	}
-
-	public unsafe void append(string str)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextBuffer_append #1");
-		ImGuiNative.ImGuiTextBuffer_append(NativePtr, ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void append(string str, string str_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextBuffer_append #2");
-		ImGuiNative.ImGuiTextBuffer_append(NativePtr, ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void appendf(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextBuffer_appendf #1");
-		ImGuiNative.ImGuiTextBuffer_appendf(NativePtr, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe void appendfv(string fmt)
-	{
-		int num = 0;
-		byte* ptr;
-		if (fmt == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(fmt);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(fmt, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextBuffer_appendfv #1");
-		ImGuiNative.ImGuiTextBuffer_appendfv(NativePtr, ptr);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-	}
-
-	public unsafe string begin()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_begin #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.ImGuiTextBuffer_begin(NativePtr));
-	}
-
-	public unsafe string c_str()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_c_str #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.ImGuiTextBuffer_c_str(NativePtr));
-	}
-
-	public unsafe void clear()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_clear #1");
-		ImGuiNative.ImGuiTextBuffer_clear(NativePtr);
-	}
-
-	public unsafe void ImGuiTextBuffer_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_destroy #1");
-		ImGuiNative.ImGuiTextBuffer_destroy(NativePtr);
-	}
-
-	public unsafe bool empty()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_empty #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextBuffer_empty(NativePtr));
-	}
-
-	public unsafe string end()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_end #1");
-		return MarshalUtils.bytePointer_to_string(ImGuiNative.ImGuiTextBuffer_end(NativePtr));
-	}
-
-	public unsafe void reserve(int capacity)
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_reserve #1");
-		ImGuiNative.ImGuiTextBuffer_reserve(NativePtr, capacity);
-	}
-
-	public unsafe int size()
-	{
-		ImGuiDebug.Log("ImGuiTextBuffer_size #1");
-		return ImGuiNative.ImGuiTextBuffer_size(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFilter.cs Out/RG.ImGui/ImGuiNET/ImGuiTextFilter.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFilter.cs	2025-05-22 18:15:44.661282100 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextFilter.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,520 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTextFilter
-{
-	public byte InputBuf_0;
-
-	public byte InputBuf_1;
-
-	public byte InputBuf_2;
-
-	public byte InputBuf_3;
-
-	public byte InputBuf_4;
-
-	public byte InputBuf_5;
-
-	public byte InputBuf_6;
-
-	public byte InputBuf_7;
-
-	public byte InputBuf_8;
-
-	public byte InputBuf_9;
-
-	public byte InputBuf_10;
-
-	public byte InputBuf_11;
-
-	public byte InputBuf_12;
-
-	public byte InputBuf_13;
-
-	public byte InputBuf_14;
-
-	public byte InputBuf_15;
-
-	public byte InputBuf_16;
-
-	public byte InputBuf_17;
-
-	public byte InputBuf_18;
-
-	public byte InputBuf_19;
-
-	public byte InputBuf_20;
-
-	public byte InputBuf_21;
-
-	public byte InputBuf_22;
-
-	public byte InputBuf_23;
-
-	public byte InputBuf_24;
-
-	public byte InputBuf_25;
-
-	public byte InputBuf_26;
-
-	public byte InputBuf_27;
-
-	public byte InputBuf_28;
-
-	public byte InputBuf_29;
-
-	public byte InputBuf_30;
-
-	public byte InputBuf_31;
-
-	public byte InputBuf_32;
-
-	public byte InputBuf_33;
-
-	public byte InputBuf_34;
-
-	public byte InputBuf_35;
-
-	public byte InputBuf_36;
-
-	public byte InputBuf_37;
-
-	public byte InputBuf_38;
-
-	public byte InputBuf_39;
-
-	public byte InputBuf_40;
-
-	public byte InputBuf_41;
-
-	public byte InputBuf_42;
-
-	public byte InputBuf_43;
-
-	public byte InputBuf_44;
-
-	public byte InputBuf_45;
-
-	public byte InputBuf_46;
-
-	public byte InputBuf_47;
-
-	public byte InputBuf_48;
-
-	public byte InputBuf_49;
-
-	public byte InputBuf_50;
-
-	public byte InputBuf_51;
-
-	public byte InputBuf_52;
-
-	public byte InputBuf_53;
-
-	public byte InputBuf_54;
-
-	public byte InputBuf_55;
-
-	public byte InputBuf_56;
-
-	public byte InputBuf_57;
-
-	public byte InputBuf_58;
-
-	public byte InputBuf_59;
-
-	public byte InputBuf_60;
-
-	public byte InputBuf_61;
-
-	public byte InputBuf_62;
-
-	public byte InputBuf_63;
-
-	public byte InputBuf_64;
-
-	public byte InputBuf_65;
-
-	public byte InputBuf_66;
-
-	public byte InputBuf_67;
-
-	public byte InputBuf_68;
-
-	public byte InputBuf_69;
-
-	public byte InputBuf_70;
-
-	public byte InputBuf_71;
-
-	public byte InputBuf_72;
-
-	public byte InputBuf_73;
-
-	public byte InputBuf_74;
-
-	public byte InputBuf_75;
-
-	public byte InputBuf_76;
-
-	public byte InputBuf_77;
-
-	public byte InputBuf_78;
-
-	public byte InputBuf_79;
-
-	public byte InputBuf_80;
-
-	public byte InputBuf_81;
-
-	public byte InputBuf_82;
-
-	public byte InputBuf_83;
-
-	public byte InputBuf_84;
-
-	public byte InputBuf_85;
-
-	public byte InputBuf_86;
-
-	public byte InputBuf_87;
-
-	public byte InputBuf_88;
-
-	public byte InputBuf_89;
-
-	public byte InputBuf_90;
-
-	public byte InputBuf_91;
-
-	public byte InputBuf_92;
-
-	public byte InputBuf_93;
-
-	public byte InputBuf_94;
-
-	public byte InputBuf_95;
-
-	public byte InputBuf_96;
-
-	public byte InputBuf_97;
-
-	public byte InputBuf_98;
-
-	public byte InputBuf_99;
-
-	public byte InputBuf_100;
-
-	public byte InputBuf_101;
-
-	public byte InputBuf_102;
-
-	public byte InputBuf_103;
-
-	public byte InputBuf_104;
-
-	public byte InputBuf_105;
-
-	public byte InputBuf_106;
-
-	public byte InputBuf_107;
-
-	public byte InputBuf_108;
-
-	public byte InputBuf_109;
-
-	public byte InputBuf_110;
-
-	public byte InputBuf_111;
-
-	public byte InputBuf_112;
-
-	public byte InputBuf_113;
-
-	public byte InputBuf_114;
-
-	public byte InputBuf_115;
-
-	public byte InputBuf_116;
-
-	public byte InputBuf_117;
-
-	public byte InputBuf_118;
-
-	public byte InputBuf_119;
-
-	public byte InputBuf_120;
-
-	public byte InputBuf_121;
-
-	public byte InputBuf_122;
-
-	public byte InputBuf_123;
-
-	public byte InputBuf_124;
-
-	public byte InputBuf_125;
-
-	public byte InputBuf_126;
-
-	public byte InputBuf_127;
-
-	public byte InputBuf_128;
-
-	public byte InputBuf_129;
-
-	public byte InputBuf_130;
-
-	public byte InputBuf_131;
-
-	public byte InputBuf_132;
-
-	public byte InputBuf_133;
-
-	public byte InputBuf_134;
-
-	public byte InputBuf_135;
-
-	public byte InputBuf_136;
-
-	public byte InputBuf_137;
-
-	public byte InputBuf_138;
-
-	public byte InputBuf_139;
-
-	public byte InputBuf_140;
-
-	public byte InputBuf_141;
-
-	public byte InputBuf_142;
-
-	public byte InputBuf_143;
-
-	public byte InputBuf_144;
-
-	public byte InputBuf_145;
-
-	public byte InputBuf_146;
-
-	public byte InputBuf_147;
-
-	public byte InputBuf_148;
-
-	public byte InputBuf_149;
-
-	public byte InputBuf_150;
-
-	public byte InputBuf_151;
-
-	public byte InputBuf_152;
-
-	public byte InputBuf_153;
-
-	public byte InputBuf_154;
-
-	public byte InputBuf_155;
-
-	public byte InputBuf_156;
-
-	public byte InputBuf_157;
-
-	public byte InputBuf_158;
-
-	public byte InputBuf_159;
-
-	public byte InputBuf_160;
-
-	public byte InputBuf_161;
-
-	public byte InputBuf_162;
-
-	public byte InputBuf_163;
-
-	public byte InputBuf_164;
-
-	public byte InputBuf_165;
-
-	public byte InputBuf_166;
-
-	public byte InputBuf_167;
-
-	public byte InputBuf_168;
-
-	public byte InputBuf_169;
-
-	public byte InputBuf_170;
-
-	public byte InputBuf_171;
-
-	public byte InputBuf_172;
-
-	public byte InputBuf_173;
-
-	public byte InputBuf_174;
-
-	public byte InputBuf_175;
-
-	public byte InputBuf_176;
-
-	public byte InputBuf_177;
-
-	public byte InputBuf_178;
-
-	public byte InputBuf_179;
-
-	public byte InputBuf_180;
-
-	public byte InputBuf_181;
-
-	public byte InputBuf_182;
-
-	public byte InputBuf_183;
-
-	public byte InputBuf_184;
-
-	public byte InputBuf_185;
-
-	public byte InputBuf_186;
-
-	public byte InputBuf_187;
-
-	public byte InputBuf_188;
-
-	public byte InputBuf_189;
-
-	public byte InputBuf_190;
-
-	public byte InputBuf_191;
-
-	public byte InputBuf_192;
-
-	public byte InputBuf_193;
-
-	public byte InputBuf_194;
-
-	public byte InputBuf_195;
-
-	public byte InputBuf_196;
-
-	public byte InputBuf_197;
-
-	public byte InputBuf_198;
-
-	public byte InputBuf_199;
-
-	public byte InputBuf_200;
-
-	public byte InputBuf_201;
-
-	public byte InputBuf_202;
-
-	public byte InputBuf_203;
-
-	public byte InputBuf_204;
-
-	public byte InputBuf_205;
-
-	public byte InputBuf_206;
-
-	public byte InputBuf_207;
-
-	public byte InputBuf_208;
-
-	public byte InputBuf_209;
-
-	public byte InputBuf_210;
-
-	public byte InputBuf_211;
-
-	public byte InputBuf_212;
-
-	public byte InputBuf_213;
-
-	public byte InputBuf_214;
-
-	public byte InputBuf_215;
-
-	public byte InputBuf_216;
-
-	public byte InputBuf_217;
-
-	public byte InputBuf_218;
-
-	public byte InputBuf_219;
-
-	public byte InputBuf_220;
-
-	public byte InputBuf_221;
-
-	public byte InputBuf_222;
-
-	public byte InputBuf_223;
-
-	public byte InputBuf_224;
-
-	public byte InputBuf_225;
-
-	public byte InputBuf_226;
-
-	public byte InputBuf_227;
-
-	public byte InputBuf_228;
-
-	public byte InputBuf_229;
-
-	public byte InputBuf_230;
-
-	public byte InputBuf_231;
-
-	public byte InputBuf_232;
-
-	public byte InputBuf_233;
-
-	public byte InputBuf_234;
-
-	public byte InputBuf_235;
-
-	public byte InputBuf_236;
-
-	public byte InputBuf_237;
-
-	public byte InputBuf_238;
-
-	public byte InputBuf_239;
-
-	public byte InputBuf_240;
-
-	public byte InputBuf_241;
-
-	public byte InputBuf_242;
-
-	public byte InputBuf_243;
-
-	public byte InputBuf_244;
-
-	public byte InputBuf_245;
-
-	public byte InputBuf_246;
-
-	public byte InputBuf_247;
-
-	public byte InputBuf_248;
-
-	public byte InputBuf_249;
-
-	public byte InputBuf_250;
-
-	public byte InputBuf_251;
-
-	public byte InputBuf_252;
-
-	public byte InputBuf_253;
-
-	public byte InputBuf_254;
-
-	public byte InputBuf_255;
-
-	public ImVector Filters;
-
-	public int CountGrep;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFilterPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTextFilterPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFilterPtr.cs	2025-05-22 18:15:44.738924400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextFilterPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,214 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTextFilterPtr
-{
-	public unsafe ImGuiTextFilter* NativePtr { get; }
-
-	public unsafe RangeAccessor<byte> InputBuf => new RangeAccessor<byte>(&NativePtr->InputBuf_0, 256);
-
-	public unsafe ImPtrVector<ImGuiTextRangePtr> Filters => new ImPtrVector<ImGuiTextRangePtr>(NativePtr->Filters, Unsafe.SizeOf<ImGuiTextRange>());
-
-	public unsafe ref int CountGrep => ref Unsafe.AsRef<int>(&NativePtr->CountGrep);
-
-	public unsafe ImGuiTextFilterPtr(ImGuiTextFilter* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTextFilterPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTextFilter*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTextFilterPtr(ImGuiTextFilter* nativePtr)
-	{
-		return new ImGuiTextFilterPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTextFilter*(ImGuiTextFilterPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTextFilterPtr(IntPtr nativePtr)
-	{
-		return new ImGuiTextFilterPtr(nativePtr);
-	}
-
-	public unsafe void Build()
-	{
-		ImGuiDebug.Log("ImGuiTextFilter_Build #1");
-		ImGuiNative.ImGuiTextFilter_Build(NativePtr);
-	}
-
-	public unsafe void Clear()
-	{
-		ImGuiDebug.Log("ImGuiTextFilter_Clear #1");
-		ImGuiNative.ImGuiTextFilter_Clear(NativePtr);
-	}
-
-	public unsafe bool Draw()
-	{
-		int num = 0;
-		num = MarshalUtils.GetByteCount("Filter(inc,-exc)");
-		byte* ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-		int utf = MarshalUtils.GetUtf8("Filter(inc,-exc)", ptr, num);
-		ptr[utf] = 0;
-		ImGuiDebug.Log("ImGuiTextFilter_Draw #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_Draw(NativePtr, ptr, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool Draw(string label)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextFilter_Draw #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_Draw(NativePtr, ptr, 0f));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool Draw(float width)
-	{
-		int num = 0;
-		num = MarshalUtils.GetByteCount("Filter(inc,-exc)");
-		byte* ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-		int utf = MarshalUtils.GetUtf8("Filter(inc,-exc)", ptr, num);
-		ptr[utf] = 0;
-		ImGuiDebug.Log("ImGuiTextFilter_Draw #3");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_Draw(NativePtr, ptr, width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool Draw(string label, float width)
-	{
-		int num = 0;
-		byte* ptr;
-		if (label == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(label);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(label, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextFilter_Draw #4");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_Draw(NativePtr, ptr, width));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool IsActive()
-	{
-		ImGuiDebug.Log("ImGuiTextFilter_IsActive #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_IsActive(NativePtr));
-	}
-
-	public unsafe bool PassFilter(string text)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextFilter_PassFilter #1");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_PassFilter(NativePtr, ptr, null));
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe bool PassFilter(string text, string text_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (text == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(text);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(text, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (text_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(text_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(text_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImGuiTextFilter_PassFilter #2");
-		bool result = MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextFilter_PassFilter(NativePtr, ptr, ptr2));
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe void ImGuiTextFilter_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTextFilter_destroy #1");
-		ImGuiNative.ImGuiTextFilter_destroy(NativePtr);
-	}
-
-	public unsafe ImGuiTextFilterPtr(ref ImGuiTextFilter filter)
-	{
-		NativePtr = (ImGuiTextFilter*)Unsafe.AsPointer(ref filter);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTextFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextFlags.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTextFlags
-{
-	None,
-	NoWidthForLargeClippedText
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextRange.cs Out/RG.ImGui/ImGuiNET/ImGuiTextRange.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextRange.cs	2025-05-22 18:15:44.746440300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextRange.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImGuiTextRange
-{
-	public unsafe byte* b;
-
-	public unsafe byte* e;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextRangePtr.cs Out/RG.ImGui/ImGuiNET/ImGuiTextRangePtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTextRangePtr.cs	2025-05-22 18:15:44.673807800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTextRangePtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,56 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImGuiTextRangePtr
-{
-	public unsafe ImGuiTextRange* NativePtr { get; }
-
-	public unsafe ref string b => ref Unsafe.AsRef<string>(&NativePtr->b);
-
-	public unsafe ref string e => ref Unsafe.AsRef<string>(&NativePtr->e);
-
-	public unsafe ImGuiTextRangePtr(ImGuiTextRange* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiTextRangePtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiTextRange*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiTextRangePtr(ImGuiTextRange* nativePtr)
-	{
-		return new ImGuiTextRangePtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiTextRange*(ImGuiTextRangePtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiTextRangePtr(IntPtr nativePtr)
-	{
-		return new ImGuiTextRangePtr(nativePtr);
-	}
-
-	public unsafe void ImGuiTextRange_destroy()
-	{
-		ImGuiDebug.Log("ImGuiTextRange_destroy #1");
-		ImGuiNative.ImGuiTextRange_destroy(NativePtr);
-	}
-
-	public unsafe bool empty()
-	{
-		ImGuiDebug.Log("ImGuiTextRange_empty #1");
-		return MarshalUtils.byte_to_bool(ImGuiNative.ImGuiTextRange_empty(NativePtr));
-	}
-
-	public unsafe void split(byte separator, ImVector @out)
-	{
-		ImGuiDebug.Log("ImGuiTextRange_split #1");
-		ImGuiNative.ImGuiTextRange_split(NativePtr, separator, @out);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTooltipFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTooltipFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTooltipFlags.cs	2025-05-22 18:15:44.683312300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTooltipFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTooltipFlags
-{
-	None,
-	OverridePreviousTooltip
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlags.cs	2025-05-22 18:15:44.685826000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,21 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTreeNodeFlags
-{
-	None = 0,
-	Selected = 1,
-	Framed = 2,
-	AllowItemOverlap = 4,
-	NoTreePushOnOpen = 8,
-	NoAutoOpenOnLog = 16,
-	DefaultOpen = 32,
-	OpenOnDoubleClick = 64,
-	OpenOnArrow = 128,
-	Leaf = 256,
-	Bullet = 512,
-	FramePadding = 1024,
-	SpanAvailWidth = 2048,
-	SpanFullWidth = 4096,
-	NavLeftJumpsBackHere = 8192,
-	CollapsingHeader = 26
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlagsPrivate.cs Out/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlagsPrivate.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlagsPrivate.cs	2025-05-22 18:15:44.705401500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiTreeNodeFlagsPrivate.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiTreeNodeFlagsPrivate
-{
-	ClipLabelForTrailingButton = 0x100000
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewport.cs Out/RG.ImGui/ImGuiNET/ImGuiViewport.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewport.cs	2025-05-22 18:15:44.660103800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiViewport.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-using System;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiViewport
-{
-	public ImGuiViewportFlags Flags;
-
-	public Vector2 Pos;
-
-	public Vector2 Size;
-
-	public Vector2 WorkPos;
-
-	public Vector2 WorkSize;
-
-	public IntPtr PlatformHandleRaw;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiViewportFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportFlags.cs	2025-05-22 18:15:44.726412400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiViewportFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiViewportFlags
-{
-	None = 0,
-	IsPlatformWindow = 1,
-	IsPlatformMonitor = 2,
-	OwnedByApp = 4
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportP.cs Out/RG.ImGui/ImGuiNET/ImGuiViewportP.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportP.cs	2025-05-22 18:15:44.736918800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiViewportP.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,26 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiViewportP
-{
-	public ImGuiViewport _ImGuiViewport;
-
-	public unsafe fixed int DrawListsLastFrame[2];
-
-	public unsafe ImDrawList* DrawLists_0;
-
-	public unsafe ImDrawList* DrawLists_1;
-
-	public ImDrawData DrawDataP;
-
-	public ImDrawDataBuilder DrawDataBuilder;
-
-	public Vector2 WorkOffsetMin;
-
-	public Vector2 WorkOffsetMax;
-
-	public Vector2 BuildWorkOffsetMin;
-
-	public Vector2 BuildWorkOffsetMax;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportPPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiViewportPPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportPPtr.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiViewportPPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,112 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiViewportPPtr
-{
-	public unsafe ImGuiViewportP* NativePtr { get; }
-
-	public unsafe ref ImGuiViewport _ImGuiViewport => ref Unsafe.AsRef<ImGuiViewport>(&NativePtr->_ImGuiViewport);
-
-	public unsafe RangeAccessor<int> DrawListsLastFrame
-	{
-		get
-		{
-			int* ptr = NativePtr->DrawListsLastFrame;
-			return new RangeAccessor<int>(&ptr, 2);
-		}
-	}
-
-	public unsafe RangeAccessor<ImDrawListPtr> DrawLists => new RangeAccessor<ImDrawListPtr>(&NativePtr->DrawLists_0, 2);
-
-	public unsafe ref ImDrawData DrawDataP => ref Unsafe.AsRef<ImDrawData>(&NativePtr->DrawDataP);
-
-	public unsafe ref ImDrawDataBuilder DrawDataBuilder => ref Unsafe.AsRef<ImDrawDataBuilder>(&NativePtr->DrawDataBuilder);
-
-	public unsafe ref Vector2 WorkOffsetMin => ref Unsafe.AsRef<Vector2>(&NativePtr->WorkOffsetMin);
-
-	public unsafe ref Vector2 WorkOffsetMax => ref Unsafe.AsRef<Vector2>(&NativePtr->WorkOffsetMax);
-
-	public unsafe ref Vector2 BuildWorkOffsetMin => ref Unsafe.AsRef<Vector2>(&NativePtr->BuildWorkOffsetMin);
-
-	public unsafe ref Vector2 BuildWorkOffsetMax => ref Unsafe.AsRef<Vector2>(&NativePtr->BuildWorkOffsetMax);
-
-	public unsafe ImGuiViewportPPtr(ImGuiViewportP* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiViewportPPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiViewportP*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiViewportPPtr(ImGuiViewportP* nativePtr)
-	{
-		return new ImGuiViewportPPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiViewportP*(ImGuiViewportPPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiViewportPPtr(IntPtr nativePtr)
-	{
-		return new ImGuiViewportPPtr(nativePtr);
-	}
-
-	public unsafe Vector2 CalcWorkRectPos(Vector2 off_min)
-	{
-		ImGuiDebug.Log("ImGuiViewportP_CalcWorkRectPos #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImGuiViewportP_CalcWorkRectPos(&result, NativePtr, off_min);
-		return result;
-	}
-
-	public unsafe Vector2 CalcWorkRectSize(Vector2 off_min, Vector2 off_max)
-	{
-		ImGuiDebug.Log("ImGuiViewportP_CalcWorkRectSize #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImGuiViewportP_CalcWorkRectSize(&result, NativePtr, off_min, off_max);
-		return result;
-	}
-
-	public unsafe Rect GetBuildWorkRect()
-	{
-		ImGuiDebug.Log("ImGuiViewportP_GetBuildWorkRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiViewportP_GetBuildWorkRect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe Rect GetMainRect()
-	{
-		ImGuiDebug.Log("ImGuiViewportP_GetMainRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiViewportP_GetMainRect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe Rect GetWorkRect()
-	{
-		ImGuiDebug.Log("ImGuiViewportP_GetWorkRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiViewportP_GetWorkRect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe void UpdateWorkRect()
-	{
-		ImGuiDebug.Log("ImGuiViewportP_UpdateWorkRect #1");
-		ImGuiNative.ImGuiViewportP_UpdateWorkRect(NativePtr);
-	}
-
-	public unsafe void ImGuiViewportP_destroy()
-	{
-		ImGuiDebug.Log("ImGuiViewportP_destroy #1");
-		ImGuiNative.ImGuiViewportP_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiViewportPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiViewportPtr.cs	2025-05-22 18:15:44.705401500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiViewportPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,79 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiViewportPtr
-{
-	public unsafe ImGuiViewport* NativePtr { get; }
-
-	public unsafe ref ImGuiViewportFlags Flags => ref Unsafe.AsRef<ImGuiViewportFlags>(&NativePtr->Flags);
-
-	public unsafe ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&NativePtr->Pos);
-
-	public unsafe ref Vector2 Size => ref Unsafe.AsRef<Vector2>(&NativePtr->Size);
-
-	public unsafe ref Vector2 WorkPos => ref Unsafe.AsRef<Vector2>(&NativePtr->WorkPos);
-
-	public unsafe ref Vector2 WorkSize => ref Unsafe.AsRef<Vector2>(&NativePtr->WorkSize);
-
-	public unsafe IntPtr PlatformHandleRaw
-	{
-		get
-		{
-			return NativePtr->PlatformHandleRaw;
-		}
-		set
-		{
-			NativePtr->PlatformHandleRaw = value;
-		}
-	}
-
-	public unsafe ImGuiViewportPtr(ImGuiViewport* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiViewportPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiViewport*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiViewportPtr(ImGuiViewport* nativePtr)
-	{
-		return new ImGuiViewportPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiViewport*(ImGuiViewportPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiViewportPtr(IntPtr nativePtr)
-	{
-		return new ImGuiViewportPtr(nativePtr);
-	}
-
-	public unsafe Vector2 GetCenter()
-	{
-		ImGuiDebug.Log("ImGuiViewport_GetCenter #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImGuiViewport_GetCenter(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe Vector2 GetWorkCenter()
-	{
-		ImGuiDebug.Log("ImGuiViewport_GetWorkCenter #1");
-		Vector2 result = default(Vector2);
-		ImGuiNative.ImGuiViewport_GetWorkCenter(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe void ImGuiViewport_destroy()
-	{
-		ImGuiDebug.Log("ImGuiViewport_destroy #1");
-		ImGuiNative.ImGuiViewport_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindow.cs Out/RG.ImGui/ImGuiNET/ImGuiWindow.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindow.cs	2025-05-22 18:15:44.695355000 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiWindow.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,182 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiWindow
-{
-	public unsafe byte* Name;
-
-	public uint ID;
-
-	public ImGuiWindowFlags Flags;
-
-	public unsafe ImGuiViewportP* Viewport;
-
-	public Vector2 Pos;
-
-	public Vector2 Size;
-
-	public Vector2 SizeFull;
-
-	public Vector2 ContentSize;
-
-	public Vector2 ContentSizeIdeal;
-
-	public Vector2 ContentSizeExplicit;
-
-	public Vector2 WindowPadding;
-
-	public float WindowRounding;
-
-	public float WindowBorderSize;
-
-	public int NameBufLen;
-
-	public uint MoveId;
-
-	public uint ChildId;
-
-	public Vector2 Scroll;
-
-	public Vector2 ScrollMax;
-
-	public Vector2 ScrollTarget;
-
-	public Vector2 ScrollTargetCenterRatio;
-
-	public Vector2 ScrollTargetEdgeSnapDist;
-
-	public Vector2 ScrollbarSizes;
-
-	public byte ScrollbarX;
-
-	public byte ScrollbarY;
-
-	public byte Active;
-
-	public byte WasActive;
-
-	public byte WriteAccessed;
-
-	public byte Collapsed;
-
-	public byte WantCollapseToggle;
-
-	public byte SkipItems;
-
-	public byte Appearing;
-
-	public byte Hidden;
-
-	public byte IsFallbackWindow;
-
-	public byte IsExplicitChild;
-
-	public byte HasCloseButton;
-
-	public sbyte ResizeBorderHeld;
-
-	public short BeginCount;
-
-	public short BeginOrderWithinParent;
-
-	public short BeginOrderWithinContext;
-
-	public short FocusOrder;
-
-	public uint PopupId;
-
-	public sbyte AutoFitFramesX;
-
-	public sbyte AutoFitFramesY;
-
-	public sbyte AutoFitChildAxises;
-
-	public byte AutoFitOnlyGrows;
-
-	public ImGuiDir AutoPosLastDirection;
-
-	public sbyte HiddenFramesCanSkipItems;
-
-	public sbyte HiddenFramesCannotSkipItems;
-
-	public sbyte HiddenFramesForRenderOnly;
-
-	public sbyte DisableInputsFrames;
-
-	public ImGuiCond SetWindowPosAllowFlags;
-
-	public ImGuiCond SetWindowSizeAllowFlags;
-
-	public ImGuiCond SetWindowCollapsedAllowFlags;
-
-	public Vector2 SetWindowPosVal;
-
-	public Vector2 SetWindowPosPivot;
-
-	public ImVector IDStack;
-
-	public ImGuiWindowTempData DC;
-
-	public Rect OuterRectClipped;
-
-	public Rect InnerRect;
-
-	public Rect InnerClipRect;
-
-	public Rect WorkRect;
-
-	public Rect ParentWorkRect;
-
-	public Rect ClipRect;
-
-	public Rect ContentRegionRect;
-
-	public Vector2ih HitTestHoleSize;
-
-	public Vector2ih HitTestHoleOffset;
-
-	public int LastFrameActive;
-
-	public float LastTimeActive;
-
-	public float ItemWidthDefault;
-
-	public ImGuiStorage StateStorage;
-
-	public ImVector ColumnsStorage;
-
-	public float FontWindowScale;
-
-	public int SettingsOffset;
-
-	public unsafe ImDrawList* DrawList;
-
-	public ImDrawList DrawListInst;
-
-	public unsafe ImGuiWindow* ParentWindow;
-
-	public unsafe ImGuiWindow* ParentWindowInBeginStack;
-
-	public unsafe ImGuiWindow* RootWindow;
-
-	public unsafe ImGuiWindow* RootWindowPopupTree;
-
-	public unsafe ImGuiWindow* RootWindowForTitleBarHighlight;
-
-	public unsafe ImGuiWindow* RootWindowForNav;
-
-	public unsafe ImGuiWindow* NavLastChildNavWindow;
-
-	public unsafe fixed uint NavLastIds[2];
-
-	public Rect NavRectRel_0;
-
-	public Rect NavRectRel_1;
-
-	public int MemoryDrawListIdxCapacity;
-
-	public int MemoryDrawListVtxCapacity;
-
-	public byte MemoryCompacted;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowFlags.cs Out/RG.ImGui/ImGuiNET/ImGuiWindowFlags.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowFlags.cs	2025-05-22 18:15:44.895546500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiWindowFlags.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,35 +0,0 @@
-namespace ImGuiNET;
-
-public enum ImGuiWindowFlags
-{
-	None = 0,
-	NoTitleBar = 1,
-	NoResize = 2,
-	NoMove = 4,
-	NoScrollbar = 8,
-	NoScrollWithMouse = 16,
-	NoCollapse = 32,
-	AlwaysAutoResize = 64,
-	NoBackground = 128,
-	NoSavedSettings = 256,
-	NoMouseInputs = 512,
-	MenuBar = 1024,
-	HorizontalScrollbar = 2048,
-	NoFocusOnAppearing = 4096,
-	NoBringToFrontOnFocus = 8192,
-	AlwaysVerticalScrollbar = 16384,
-	AlwaysHorizontalScrollbar = 32768,
-	AlwaysUseWindowPadding = 65536,
-	NoNavInputs = 262144,
-	NoNavFocus = 524288,
-	UnsavedDocument = 1048576,
-	NoNav = 786432,
-	NoDecoration = 43,
-	NoInputs = 786944,
-	NavFlattened = 8388608,
-	ChildWindow = 16777216,
-	Tooltip = 33554432,
-	Popup = 67108864,
-	Modal = 134217728,
-	ChildMenu = 268435456
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiWindowPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowPtr.cs	2025-05-22 18:15:44.894544900 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiWindowPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,357 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiWindowPtr
-{
-	public unsafe ImGuiWindow* NativePtr { get; }
-
-	public unsafe IntPtr Name
-	{
-		get
-		{
-			return (IntPtr)NativePtr->Name;
-		}
-		set
-		{
-			NativePtr->Name = (byte*)(void*)value;
-		}
-	}
-
-	public unsafe ref uint ID => ref Unsafe.AsRef<uint>(&NativePtr->ID);
-
-	public unsafe ref ImGuiWindowFlags Flags => ref Unsafe.AsRef<ImGuiWindowFlags>(&NativePtr->Flags);
-
-	public unsafe ref ImGuiViewportPPtr Viewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&NativePtr->Viewport);
-
-	public unsafe ref Vector2 Pos => ref Unsafe.AsRef<Vector2>(&NativePtr->Pos);
-
-	public unsafe ref Vector2 Size => ref Unsafe.AsRef<Vector2>(&NativePtr->Size);
-
-	public unsafe ref Vector2 SizeFull => ref Unsafe.AsRef<Vector2>(&NativePtr->SizeFull);
-
-	public unsafe ref Vector2 ContentSize => ref Unsafe.AsRef<Vector2>(&NativePtr->ContentSize);
-
-	public unsafe ref Vector2 ContentSizeIdeal => ref Unsafe.AsRef<Vector2>(&NativePtr->ContentSizeIdeal);
-
-	public unsafe ref Vector2 ContentSizeExplicit => ref Unsafe.AsRef<Vector2>(&NativePtr->ContentSizeExplicit);
-
-	public unsafe ref Vector2 WindowPadding => ref Unsafe.AsRef<Vector2>(&NativePtr->WindowPadding);
-
-	public unsafe ref float WindowRounding => ref Unsafe.AsRef<float>(&NativePtr->WindowRounding);
-
-	public unsafe ref float WindowBorderSize => ref Unsafe.AsRef<float>(&NativePtr->WindowBorderSize);
-
-	public unsafe ref int NameBufLen => ref Unsafe.AsRef<int>(&NativePtr->NameBufLen);
-
-	public unsafe ref uint MoveId => ref Unsafe.AsRef<uint>(&NativePtr->MoveId);
-
-	public unsafe ref uint ChildId => ref Unsafe.AsRef<uint>(&NativePtr->ChildId);
-
-	public unsafe ref Vector2 Scroll => ref Unsafe.AsRef<Vector2>(&NativePtr->Scroll);
-
-	public unsafe ref Vector2 ScrollMax => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollMax);
-
-	public unsafe ref Vector2 ScrollTarget => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollTarget);
-
-	public unsafe ref Vector2 ScrollTargetCenterRatio => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollTargetCenterRatio);
-
-	public unsafe ref Vector2 ScrollTargetEdgeSnapDist => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollTargetEdgeSnapDist);
-
-	public unsafe ref Vector2 ScrollbarSizes => ref Unsafe.AsRef<Vector2>(&NativePtr->ScrollbarSizes);
-
-	public unsafe ref bool ScrollbarX => ref Unsafe.AsRef<bool>(&NativePtr->ScrollbarX);
-
-	public unsafe ref bool ScrollbarY => ref Unsafe.AsRef<bool>(&NativePtr->ScrollbarY);
-
-	public unsafe ref bool Active => ref Unsafe.AsRef<bool>(&NativePtr->Active);
-
-	public unsafe ref bool WasActive => ref Unsafe.AsRef<bool>(&NativePtr->WasActive);
-
-	public unsafe ref bool WriteAccessed => ref Unsafe.AsRef<bool>(&NativePtr->WriteAccessed);
-
-	public unsafe ref bool Collapsed => ref Unsafe.AsRef<bool>(&NativePtr->Collapsed);
-
-	public unsafe ref bool WantCollapseToggle => ref Unsafe.AsRef<bool>(&NativePtr->WantCollapseToggle);
-
-	public unsafe ref bool SkipItems => ref Unsafe.AsRef<bool>(&NativePtr->SkipItems);
-
-	public unsafe ref bool Appearing => ref Unsafe.AsRef<bool>(&NativePtr->Appearing);
-
-	public unsafe ref bool Hidden => ref Unsafe.AsRef<bool>(&NativePtr->Hidden);
-
-	public unsafe ref bool IsFallbackWindow => ref Unsafe.AsRef<bool>(&NativePtr->IsFallbackWindow);
-
-	public unsafe ref bool IsExplicitChild => ref Unsafe.AsRef<bool>(&NativePtr->IsExplicitChild);
-
-	public unsafe ref bool HasCloseButton => ref Unsafe.AsRef<bool>(&NativePtr->HasCloseButton);
-
-	public unsafe ref sbyte ResizeBorderHeld => ref Unsafe.AsRef<sbyte>(&NativePtr->ResizeBorderHeld);
-
-	public unsafe ref short BeginCount => ref Unsafe.AsRef<short>(&NativePtr->BeginCount);
-
-	public unsafe ref short BeginOrderWithinParent => ref Unsafe.AsRef<short>(&NativePtr->BeginOrderWithinParent);
-
-	public unsafe ref short BeginOrderWithinContext => ref Unsafe.AsRef<short>(&NativePtr->BeginOrderWithinContext);
-
-	public unsafe ref short FocusOrder => ref Unsafe.AsRef<short>(&NativePtr->FocusOrder);
-
-	public unsafe ref uint PopupId => ref Unsafe.AsRef<uint>(&NativePtr->PopupId);
-
-	public unsafe ref sbyte AutoFitFramesX => ref Unsafe.AsRef<sbyte>(&NativePtr->AutoFitFramesX);
-
-	public unsafe ref sbyte AutoFitFramesY => ref Unsafe.AsRef<sbyte>(&NativePtr->AutoFitFramesY);
-
-	public unsafe ref sbyte AutoFitChildAxises => ref Unsafe.AsRef<sbyte>(&NativePtr->AutoFitChildAxises);
-
-	public unsafe ref bool AutoFitOnlyGrows => ref Unsafe.AsRef<bool>(&NativePtr->AutoFitOnlyGrows);
-
-	public unsafe ref ImGuiDir AutoPosLastDirection => ref Unsafe.AsRef<ImGuiDir>(&NativePtr->AutoPosLastDirection);
-
-	public unsafe ref sbyte HiddenFramesCanSkipItems => ref Unsafe.AsRef<sbyte>(&NativePtr->HiddenFramesCanSkipItems);
-
-	public unsafe ref sbyte HiddenFramesCannotSkipItems => ref Unsafe.AsRef<sbyte>(&NativePtr->HiddenFramesCannotSkipItems);
-
-	public unsafe ref sbyte HiddenFramesForRenderOnly => ref Unsafe.AsRef<sbyte>(&NativePtr->HiddenFramesForRenderOnly);
-
-	public unsafe ref sbyte DisableInputsFrames => ref Unsafe.AsRef<sbyte>(&NativePtr->DisableInputsFrames);
-
-	public unsafe ref ImGuiCond SetWindowPosAllowFlags => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->SetWindowPosAllowFlags);
-
-	public unsafe ref ImGuiCond SetWindowSizeAllowFlags => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->SetWindowSizeAllowFlags);
-
-	public unsafe ref ImGuiCond SetWindowCollapsedAllowFlags => ref Unsafe.AsRef<ImGuiCond>(&NativePtr->SetWindowCollapsedAllowFlags);
-
-	public unsafe ref Vector2 SetWindowPosVal => ref Unsafe.AsRef<Vector2>(&NativePtr->SetWindowPosVal);
-
-	public unsafe ref Vector2 SetWindowPosPivot => ref Unsafe.AsRef<Vector2>(&NativePtr->SetWindowPosPivot);
-
-	public unsafe ImVector<uint> IDStack => new ImVector<uint>(NativePtr->IDStack);
-
-	public unsafe ref ImGuiWindowTempData DC => ref Unsafe.AsRef<ImGuiWindowTempData>(&NativePtr->DC);
-
-	public unsafe ref Rect OuterRectClipped => ref Unsafe.AsRef<Rect>(&NativePtr->OuterRectClipped);
-
-	public unsafe ref Rect InnerRect => ref Unsafe.AsRef<Rect>(&NativePtr->InnerRect);
-
-	public unsafe ref Rect InnerClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->InnerClipRect);
-
-	public unsafe ref Rect WorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->WorkRect);
-
-	public unsafe ref Rect ParentWorkRect => ref Unsafe.AsRef<Rect>(&NativePtr->ParentWorkRect);
-
-	public unsafe ref Rect ClipRect => ref Unsafe.AsRef<Rect>(&NativePtr->ClipRect);
-
-	public unsafe ref Rect ContentRegionRect => ref Unsafe.AsRef<Rect>(&NativePtr->ContentRegionRect);
-
-	public unsafe ref Vector2ih HitTestHoleSize => ref Unsafe.AsRef<Vector2ih>(&NativePtr->HitTestHoleSize);
-
-	public unsafe ref Vector2ih HitTestHoleOffset => ref Unsafe.AsRef<Vector2ih>(&NativePtr->HitTestHoleOffset);
-
-	public unsafe ref int LastFrameActive => ref Unsafe.AsRef<int>(&NativePtr->LastFrameActive);
-
-	public unsafe ref float LastTimeActive => ref Unsafe.AsRef<float>(&NativePtr->LastTimeActive);
-
-	public unsafe ref float ItemWidthDefault => ref Unsafe.AsRef<float>(&NativePtr->ItemWidthDefault);
-
-	public unsafe ref ImGuiStorage StateStorage => ref Unsafe.AsRef<ImGuiStorage>(&NativePtr->StateStorage);
-
-	public unsafe ImPtrVector<ImGuiOldColumnsPtr> ColumnsStorage => new ImPtrVector<ImGuiOldColumnsPtr>(NativePtr->ColumnsStorage, Unsafe.SizeOf<ImGuiOldColumns>());
-
-	public unsafe ref float FontWindowScale => ref Unsafe.AsRef<float>(&NativePtr->FontWindowScale);
-
-	public unsafe ref int SettingsOffset => ref Unsafe.AsRef<int>(&NativePtr->SettingsOffset);
-
-	public unsafe ref ImDrawListPtr DrawList => ref Unsafe.AsRef<ImDrawListPtr>(&NativePtr->DrawList);
-
-	public unsafe ref ImDrawList DrawListInst => ref Unsafe.AsRef<ImDrawList>(&NativePtr->DrawListInst);
-
-	public unsafe ref ImGuiWindowPtr ParentWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->ParentWindow);
-
-	public unsafe ref ImGuiWindowPtr ParentWindowInBeginStack => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->ParentWindowInBeginStack);
-
-	public unsafe ref ImGuiWindowPtr RootWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->RootWindow);
-
-	public unsafe ref ImGuiWindowPtr RootWindowPopupTree => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->RootWindowPopupTree);
-
-	public unsafe ref ImGuiWindowPtr RootWindowForTitleBarHighlight => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->RootWindowForTitleBarHighlight);
-
-	public unsafe ref ImGuiWindowPtr RootWindowForNav => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->RootWindowForNav);
-
-	public unsafe ref ImGuiWindowPtr NavLastChildNavWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&NativePtr->NavLastChildNavWindow);
-
-	public unsafe RangeAccessor<uint> NavLastIds
-	{
-		get
-		{
-			uint* ptr = NativePtr->NavLastIds;
-			return new RangeAccessor<uint>(&ptr, 2);
-		}
-	}
-
-	public unsafe RangeAccessor<Rect> NavRectRel => new RangeAccessor<Rect>(&NativePtr->NavRectRel_0, 2);
-
-	public unsafe ref int MemoryDrawListIdxCapacity => ref Unsafe.AsRef<int>(&NativePtr->MemoryDrawListIdxCapacity);
-
-	public unsafe ref int MemoryDrawListVtxCapacity => ref Unsafe.AsRef<int>(&NativePtr->MemoryDrawListVtxCapacity);
-
-	public unsafe ref bool MemoryCompacted => ref Unsafe.AsRef<bool>(&NativePtr->MemoryCompacted);
-
-	public unsafe ImGuiWindowPtr(ImGuiWindow* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiWindowPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiWindow*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiWindowPtr(ImGuiWindow* nativePtr)
-	{
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiWindow*(ImGuiWindowPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiWindowPtr(IntPtr nativePtr)
-	{
-		return new ImGuiWindowPtr(nativePtr);
-	}
-
-	public unsafe float CalcFontSize()
-	{
-		ImGuiDebug.Log("ImGuiWindow_CalcFontSize #1");
-		return ImGuiNative.ImGuiWindow_CalcFontSize(NativePtr);
-	}
-
-	public unsafe uint GetID(string str)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		ImGuiDebug.Log("ImGuiWindow_GetID_Str #1");
-		uint result = ImGuiNative.ImGuiWindow_GetID_Str(NativePtr, ptr, null);
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe uint GetID(string str, string str_end)
-	{
-		int num = 0;
-		byte* ptr;
-		if (str == null)
-		{
-			ptr = null;
-		}
-		else
-		{
-			num = MarshalUtils.GetByteCount(str);
-			ptr = ((num <= 2048) ? stackalloc byte[(int)(uint)(num + 1)] : MarshalUtils.Allocate(num + 1));
-			int utf = MarshalUtils.GetUtf8(str, ptr, num);
-			ptr[utf] = 0;
-		}
-		int num2 = 0;
-		byte* ptr2;
-		if (str_end == null)
-		{
-			ptr2 = null;
-		}
-		else
-		{
-			num2 = MarshalUtils.GetByteCount(str_end);
-			ptr2 = ((num2 <= 2048) ? stackalloc byte[(int)(uint)(num2 + 1)] : MarshalUtils.Allocate(num2 + 1));
-			int utf2 = MarshalUtils.GetUtf8(str_end, ptr2, num2);
-			ptr2[utf2] = 0;
-		}
-		ImGuiDebug.Log("ImGuiWindow_GetID_Str #2");
-		uint result = ImGuiNative.ImGuiWindow_GetID_Str(NativePtr, ptr, ptr2);
-		if (num2 > 2048)
-		{
-			MarshalUtils.Free(ptr2);
-		}
-		if (num > 2048)
-		{
-			MarshalUtils.Free(ptr);
-		}
-		return result;
-	}
-
-	public unsafe uint GetID(IntPtr ptr)
-	{
-		ImGuiDebug.Log("ImGuiWindow_GetID_Ptr #2");
-		return ImGuiNative.ImGuiWindow_GetID_Ptr(NativePtr, ptr);
-	}
-
-	public unsafe uint GetID(int n)
-	{
-		ImGuiDebug.Log("ImGuiWindow_GetID_Int #3");
-		return ImGuiNative.ImGuiWindow_GetID_Int(NativePtr, n);
-	}
-
-	public unsafe uint GetIDFromRectangle(Rect r_abs)
-	{
-		ImGuiDebug.Log("ImGuiWindow_GetIDFromRectangle #1");
-		return ImGuiNative.ImGuiWindow_GetIDFromRectangle(NativePtr, r_abs);
-	}
-
-	public unsafe float MenuBarHeight()
-	{
-		ImGuiDebug.Log("ImGuiWindow_MenuBarHeight #1");
-		return ImGuiNative.ImGuiWindow_MenuBarHeight(NativePtr);
-	}
-
-	public unsafe Rect MenuBarRect()
-	{
-		ImGuiDebug.Log("ImGuiWindow_MenuBarRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiWindow_MenuBarRect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe Rect Rect()
-	{
-		ImGuiDebug.Log("ImGuiWindow_Rect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiWindow_Rect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe float TitleBarHeight()
-	{
-		ImGuiDebug.Log("ImGuiWindow_TitleBarHeight #1");
-		return ImGuiNative.ImGuiWindow_TitleBarHeight(NativePtr);
-	}
-
-	public unsafe Rect TitleBarRect()
-	{
-		ImGuiDebug.Log("ImGuiWindow_TitleBarRect #1");
-		Rect result = default(Rect);
-		ImGuiNative.ImGuiWindow_TitleBarRect(&result, NativePtr);
-		return result;
-	}
-
-	public unsafe void ImGuiWindow_destroy()
-	{
-		ImGuiDebug.Log("ImGuiWindow_destroy #1");
-		ImGuiNative.ImGuiWindow_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowTempData.cs Out/RG.ImGui/ImGuiNET/ImGuiWindowTempData.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowTempData.cs	2025-05-22 18:15:44.895546500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiWindowTempData.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,76 +0,0 @@
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiWindowTempData
-{
-	public Vector2 CursorPos;
-
-	public Vector2 CursorPosPrevLine;
-
-	public Vector2 CursorStartPos;
-
-	public Vector2 CursorMaxPos;
-
-	public Vector2 IdealMaxPos;
-
-	public Vector2 CurrLineSize;
-
-	public Vector2 PrevLineSize;
-
-	public float CurrLineTextBaseOffset;
-
-	public float PrevLineTextBaseOffset;
-
-	public byte IsSameLine;
-
-	public ImVec1 Indent;
-
-	public ImVec1 ColumnsOffset;
-
-	public ImVec1 GroupOffset;
-
-	public Vector2 CursorStartPosLossyness;
-
-	public ImGuiNavLayer NavLayerCurrent;
-
-	public short NavLayersActiveMask;
-
-	public short NavLayersActiveMaskNext;
-
-	public uint NavFocusScopeIdCurrent;
-
-	public byte NavHideHighlightOneFrame;
-
-	public byte NavHasScroll;
-
-	public byte MenuBarAppending;
-
-	public Vector2 MenuBarOffset;
-
-	public ImGuiMenuColumns MenuColumns;
-
-	public int TreeDepth;
-
-	public uint TreeJumpToParentOnPopMask;
-
-	public ImVector ChildWindows;
-
-	public unsafe ImGuiStorage* StateStorage;
-
-	public unsafe ImGuiOldColumns* CurrentColumns;
-
-	public int CurrentTableIdx;
-
-	public ImGuiLayoutType LayoutType;
-
-	public ImGuiLayoutType ParentLayoutType;
-
-	public float ItemWidth;
-
-	public float TextWrapPos;
-
-	public ImVector ItemWidthStack;
-
-	public ImVector TextWrapPosStack;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowTempDataPtr.cs Out/RG.ImGui/ImGuiNET/ImGuiWindowTempDataPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImGuiWindowTempDataPtr.cs	2025-05-22 18:15:44.794649700 -0700
+++ Out/RG.ImGui/ImGuiNET/ImGuiWindowTempDataPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,105 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-using UnityEngine;
-
-namespace ImGuiNET;
-
-public struct ImGuiWindowTempDataPtr
-{
-	public unsafe ImGuiWindowTempData* NativePtr { get; }
-
-	public unsafe ref Vector2 CursorPos => ref Unsafe.AsRef<Vector2>(&NativePtr->CursorPos);
-
-	public unsafe ref Vector2 CursorPosPrevLine => ref Unsafe.AsRef<Vector2>(&NativePtr->CursorPosPrevLine);
-
-	public unsafe ref Vector2 CursorStartPos => ref Unsafe.AsRef<Vector2>(&NativePtr->CursorStartPos);
-
-	public unsafe ref Vector2 CursorMaxPos => ref Unsafe.AsRef<Vector2>(&NativePtr->CursorMaxPos);
-
-	public unsafe ref Vector2 IdealMaxPos => ref Unsafe.AsRef<Vector2>(&NativePtr->IdealMaxPos);
-
-	public unsafe ref Vector2 CurrLineSize => ref Unsafe.AsRef<Vector2>(&NativePtr->CurrLineSize);
-
-	public unsafe ref Vector2 PrevLineSize => ref Unsafe.AsRef<Vector2>(&NativePtr->PrevLineSize);
-
-	public unsafe ref float CurrLineTextBaseOffset => ref Unsafe.AsRef<float>(&NativePtr->CurrLineTextBaseOffset);
-
-	public unsafe ref float PrevLineTextBaseOffset => ref Unsafe.AsRef<float>(&NativePtr->PrevLineTextBaseOffset);
-
-	public unsafe ref bool IsSameLine => ref Unsafe.AsRef<bool>(&NativePtr->IsSameLine);
-
-	public unsafe ref ImVec1 Indent => ref Unsafe.AsRef<ImVec1>(&NativePtr->Indent);
-
-	public unsafe ref ImVec1 ColumnsOffset => ref Unsafe.AsRef<ImVec1>(&NativePtr->ColumnsOffset);
-
-	public unsafe ref ImVec1 GroupOffset => ref Unsafe.AsRef<ImVec1>(&NativePtr->GroupOffset);
-
-	public unsafe ref Vector2 CursorStartPosLossyness => ref Unsafe.AsRef<Vector2>(&NativePtr->CursorStartPosLossyness);
-
-	public unsafe ref ImGuiNavLayer NavLayerCurrent => ref Unsafe.AsRef<ImGuiNavLayer>(&NativePtr->NavLayerCurrent);
-
-	public unsafe ref short NavLayersActiveMask => ref Unsafe.AsRef<short>(&NativePtr->NavLayersActiveMask);
-
-	public unsafe ref short NavLayersActiveMaskNext => ref Unsafe.AsRef<short>(&NativePtr->NavLayersActiveMaskNext);
-
-	public unsafe ref uint NavFocusScopeIdCurrent => ref Unsafe.AsRef<uint>(&NativePtr->NavFocusScopeIdCurrent);
-
-	public unsafe ref bool NavHideHighlightOneFrame => ref Unsafe.AsRef<bool>(&NativePtr->NavHideHighlightOneFrame);
-
-	public unsafe ref bool NavHasScroll => ref Unsafe.AsRef<bool>(&NativePtr->NavHasScroll);
-
-	public unsafe ref bool MenuBarAppending => ref Unsafe.AsRef<bool>(&NativePtr->MenuBarAppending);
-
-	public unsafe ref Vector2 MenuBarOffset => ref Unsafe.AsRef<Vector2>(&NativePtr->MenuBarOffset);
-
-	public unsafe ref ImGuiMenuColumns MenuColumns => ref Unsafe.AsRef<ImGuiMenuColumns>(&NativePtr->MenuColumns);
-
-	public unsafe ref int TreeDepth => ref Unsafe.AsRef<int>(&NativePtr->TreeDepth);
-
-	public unsafe ref uint TreeJumpToParentOnPopMask => ref Unsafe.AsRef<uint>(&NativePtr->TreeJumpToParentOnPopMask);
-
-	public unsafe ImVector<ImGuiWindowPtr> ChildWindows => new ImVector<ImGuiWindowPtr>(NativePtr->ChildWindows);
-
-	public unsafe ref ImGuiStoragePtr StateStorage => ref Unsafe.AsRef<ImGuiStoragePtr>(&NativePtr->StateStorage);
-
-	public unsafe ref ImGuiOldColumnsPtr CurrentColumns => ref Unsafe.AsRef<ImGuiOldColumnsPtr>(&NativePtr->CurrentColumns);
-
-	public unsafe ref int CurrentTableIdx => ref Unsafe.AsRef<int>(&NativePtr->CurrentTableIdx);
-
-	public unsafe ref ImGuiLayoutType LayoutType => ref Unsafe.AsRef<ImGuiLayoutType>(&NativePtr->LayoutType);
-
-	public unsafe ref ImGuiLayoutType ParentLayoutType => ref Unsafe.AsRef<ImGuiLayoutType>(&NativePtr->ParentLayoutType);
-
-	public unsafe ref float ItemWidth => ref Unsafe.AsRef<float>(&NativePtr->ItemWidth);
-
-	public unsafe ref float TextWrapPos => ref Unsafe.AsRef<float>(&NativePtr->TextWrapPos);
-
-	public unsafe ImVector<float> ItemWidthStack => new ImVector<float>(NativePtr->ItemWidthStack);
-
-	public unsafe ImVector<float> TextWrapPosStack => new ImVector<float>(NativePtr->TextWrapPosStack);
-
-	public unsafe ImGuiWindowTempDataPtr(ImGuiWindowTempData* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImGuiWindowTempDataPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImGuiWindowTempData*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImGuiWindowTempDataPtr(ImGuiWindowTempData* nativePtr)
-	{
-		return new ImGuiWindowTempDataPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImGuiWindowTempData*(ImGuiWindowTempDataPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImGuiWindowTempDataPtr(IntPtr nativePtr)
-	{
-		return new ImGuiWindowTempDataPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImPtrSpan.cs Out/RG.ImGui/ImGuiNET/ImPtrSpan.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImPtrSpan.cs	2025-05-22 18:15:44.755947200 -0700
+++ Out/RG.ImGui/ImGuiNET/ImPtrSpan.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImPtrSpan<T>
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	private readonly int _stride;
-
-	public unsafe T this[int index]
-	{
-		get
-		{
-			byte* ptr = (byte*)(void*)Data + index * _stride;
-			return Unsafe.Read<T>(&ptr);
-		}
-	}
-
-	public ImPtrSpan(ImSpan vector, int stride)
-		: this(vector.Size, vector.Capacity, vector.Data, stride)
-	{
-	}
-
-	public ImPtrSpan(int size, int capacity, IntPtr data, int stride)
-	{
-		Size = size;
-		Capacity = capacity;
-		Data = data;
-		_stride = stride;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImPtrVector.cs Out/RG.ImGui/ImGuiNET/ImPtrVector.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImPtrVector.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImPtrVector.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImPtrVector<T>
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	private readonly int _stride;
-
-	public unsafe T this[int index]
-	{
-		get
-		{
-			byte* ptr = (byte*)(void*)Data + index * _stride;
-			return Unsafe.Read<T>(&ptr);
-		}
-	}
-
-	public ImPtrVector(ImVector vector, int stride)
-		: this(vector.Size, vector.Capacity, vector.Data, stride)
-	{
-	}
-
-	public ImPtrVector(int size, int capacity, IntPtr data, int stride)
-	{
-		Size = size;
-		Capacity = capacity;
-		Data = data;
-		_stride = stride;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpan.cs Out/RG.ImGui/ImGuiNET/ImSpan.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpan.cs	2025-05-22 18:15:44.745437300 -0700
+++ Out/RG.ImGui/ImGuiNET/ImSpan.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,47 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImSpan
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	public unsafe ref T Ref<T>(int index)
-	{
-		return ref Unsafe.AsRef<T>((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-	}
-
-	public unsafe IntPtr Address<T>(int index)
-	{
-		return (IntPtr)((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-	}
-}
-public struct ImSpan<T>
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	public unsafe ref T this[int index] => ref Unsafe.AsRef<T>((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-
-	public ImSpan(ImSpan vector)
-	{
-		Size = vector.Size;
-		Capacity = vector.Capacity;
-		Data = vector.Data;
-	}
-
-	public ImSpan(int size, int capacity, IntPtr data)
-	{
-		Size = size;
-		Capacity = capacity;
-		Data = data;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpanAllocator.cs Out/RG.ImGui/ImGuiNET/ImSpanAllocator.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpanAllocator.cs	2025-05-22 18:15:44.795653600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImSpanAllocator.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-using System.Runtime.InteropServices;
-
-namespace ImGuiNET;
-
-[StructLayout(LayoutKind.Sequential, Size = 1)]
-public struct ImSpanAllocator
-{
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpanAllocatorPtr.cs Out/RG.ImGui/ImGuiNET/ImSpanAllocatorPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImSpanAllocatorPtr.cs	2025-05-22 18:15:44.806176400 -0700
+++ Out/RG.ImGui/ImGuiNET/ImSpanAllocatorPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,75 +0,0 @@
-using System;
-
-namespace ImGuiNET;
-
-public struct ImSpanAllocatorPtr
-{
-	public unsafe ImSpanAllocator* NativePtr { get; }
-
-	public unsafe ImSpanAllocatorPtr(ImSpanAllocator* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImSpanAllocatorPtr(IntPtr nativePtr)
-	{
-		NativePtr = (ImSpanAllocator*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImSpanAllocatorPtr(ImSpanAllocator* nativePtr)
-	{
-		return new ImSpanAllocatorPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImSpanAllocator*(ImSpanAllocatorPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImSpanAllocatorPtr(IntPtr nativePtr)
-	{
-		return new ImSpanAllocatorPtr(nativePtr);
-	}
-
-	public unsafe int GetArenaSizeInBytes()
-	{
-		ImGuiDebug.Log("ImSpanAllocator_GetArenaSizeInBytes #1");
-		return ImGuiNative.ImSpanAllocator_GetArenaSizeInBytes(NativePtr);
-	}
-
-	public unsafe void* GetSpanPtrBegin(int n)
-	{
-		ImGuiDebug.Log("ImSpanAllocator_GetSpanPtrBegin #1");
-		return MarshalUtils.IntPtr_to_pointer(ImGuiNative.ImSpanAllocator_GetSpanPtrBegin(NativePtr, n));
-	}
-
-	public unsafe void* GetSpanPtrEnd(int n)
-	{
-		ImGuiDebug.Log("ImSpanAllocator_GetSpanPtrEnd #1");
-		return MarshalUtils.IntPtr_to_pointer(ImGuiNative.ImSpanAllocator_GetSpanPtrEnd(NativePtr, n));
-	}
-
-	public unsafe void Reserve(int n, uint sz)
-	{
-		ImGuiDebug.Log("ImSpanAllocator_Reserve #1");
-		ImGuiNative.ImSpanAllocator_Reserve(NativePtr, n, sz, 4);
-	}
-
-	public unsafe void Reserve(int n, uint sz, int a)
-	{
-		ImGuiDebug.Log("ImSpanAllocator_Reserve #2");
-		ImGuiNative.ImSpanAllocator_Reserve(NativePtr, n, sz, a);
-	}
-
-	public unsafe void SetArenaBasePtr(IntPtr base_ptr)
-	{
-		ImGuiDebug.Log("ImSpanAllocator_SetArenaBasePtr #1");
-		ImGuiNative.ImSpanAllocator_SetArenaBasePtr(NativePtr, base_ptr);
-	}
-
-	public unsafe void ImSpanAllocator_destroy()
-	{
-		ImGuiDebug.Log("ImSpanAllocator_destroy #1");
-		ImGuiNative.ImSpanAllocator_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImVec1.cs Out/RG.ImGui/ImGuiNET/ImVec1.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImVec1.cs	2025-05-22 18:15:44.807176500 -0700
+++ Out/RG.ImGui/ImGuiNET/ImVec1.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,6 +0,0 @@
-namespace ImGuiNET;
-
-public struct ImVec1
-{
-	public float x;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImVec1Ptr.cs Out/RG.ImGui/ImGuiNET/ImVec1Ptr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImVec1Ptr.cs	2025-05-22 18:15:44.736918800 -0700
+++ Out/RG.ImGui/ImGuiNET/ImVec1Ptr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImVec1Ptr
-{
-	public unsafe ImVec1* NativePtr { get; }
-
-	public unsafe ref float x => ref Unsafe.AsRef<float>(&NativePtr->x);
-
-	public unsafe ImVec1Ptr(ImVec1* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe ImVec1Ptr(IntPtr nativePtr)
-	{
-		NativePtr = (ImVec1*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator ImVec1Ptr(ImVec1* nativePtr)
-	{
-		return new ImVec1Ptr(nativePtr);
-	}
-
-	public unsafe static implicit operator ImVec1*(ImVec1Ptr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator ImVec1Ptr(IntPtr nativePtr)
-	{
-		return new ImVec1Ptr(nativePtr);
-	}
-
-	public unsafe void ImVec1_destroy()
-	{
-		ImGuiDebug.Log("ImVec1_destroy #1");
-		ImGuiNative.ImVec1_destroy(NativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/ImVector.cs Out/RG.ImGui/ImGuiNET/ImVector.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/ImVector.cs	2025-05-22 18:15:44.766528600 -0700
+++ Out/RG.ImGui/ImGuiNET/ImVector.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,47 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct ImVector
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	public unsafe ref T Ref<T>(int index)
-	{
-		return ref Unsafe.AsRef<T>((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-	}
-
-	public unsafe IntPtr Address<T>(int index)
-	{
-		return (IntPtr)((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-	}
-}
-public struct ImVector<T>
-{
-	public readonly int Size;
-
-	public readonly int Capacity;
-
-	public readonly IntPtr Data;
-
-	public unsafe ref T this[int index] => ref Unsafe.AsRef<T>((byte*)(void*)Data + index * Unsafe.SizeOf<T>());
-
-	public ImVector(ImVector vector)
-	{
-		Size = vector.Size;
-		Capacity = vector.Capacity;
-		Data = vector.Data;
-	}
-
-	public ImVector(int size, int capacity, IntPtr data)
-	{
-		Size = size;
-		Capacity = capacity;
-		Data = data;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/IntPtrEqualityComparer.cs Out/RG.ImGui/ImGuiNET/IntPtrEqualityComparer.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/IntPtrEqualityComparer.cs	2025-05-22 18:15:44.754944300 -0700
+++ Out/RG.ImGui/ImGuiNET/IntPtrEqualityComparer.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,27 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public class IntPtrEqualityComparer : IEqualityComparer<IntPtr>
-{
-	public static IntPtrEqualityComparer Instance { get; } = new IntPtrEqualityComparer();
-
-
-	private IntPtrEqualityComparer()
-	{
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public bool Equals(IntPtr p1, IntPtr p2)
-	{
-		return p1 == p2;
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	public int GetHashCode(IntPtr ptr)
-	{
-		return ptr.GetHashCode();
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/MarshalUtils.cs Out/RG.ImGui/ImGuiNET/MarshalUtils.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/MarshalUtils.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/MarshalUtils.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,88 +0,0 @@
-using System;
-using System.Runtime.InteropServices;
-using System.Text;
-
-namespace ImGuiNET;
-
-public static class MarshalUtils
-{
-	internal const int StackAllocationSizeLimit = 2048;
-
-	public unsafe static IntPtr pointer_to_IntPtr(void* inData)
-	{
-		return new IntPtr(inData);
-	}
-
-	public unsafe static void* IntPtr_to_pointer(IntPtr inData)
-	{
-		return inData.ToPointer();
-	}
-
-	public unsafe static void** IntPtr_to_pointerPointer(IntPtr inData)
-	{
-		return (void**)inData.ToPointer();
-	}
-
-	public static bool byte_to_bool(byte inByte)
-	{
-		return inByte != 0;
-	}
-
-	public static byte bool_to_byte(bool inBool)
-	{
-		return Convert.ToByte(inBool);
-	}
-
-	public unsafe static byte boolPointer_to_byte(bool* inBoolPointer)
-	{
-		return Convert.ToByte(*inBoolPointer);
-	}
-
-	public unsafe static string bytePointer_to_string(byte* inLiteral)
-	{
-		int i;
-		for (i = 0; inLiteral[i] != 0; i++)
-		{
-		}
-		return Encoding.UTF8.GetString(inLiteral, i);
-	}
-
-	internal unsafe static byte* Allocate(int byteCount)
-	{
-		return (byte*)(void*)Marshal.AllocHGlobal(byteCount);
-	}
-
-	internal unsafe static void Free(byte* pointer)
-	{
-		Marshal.FreeHGlobal((IntPtr)pointer);
-	}
-
-	internal unsafe static bool AreStringsEqual(byte* a, int aLength, byte* b)
-	{
-		for (int i = 0; i < aLength; i++)
-		{
-			if (a[i] != b[i])
-			{
-				return false;
-			}
-		}
-		if (b[aLength] != 0)
-		{
-			return false;
-		}
-		return true;
-	}
-
-	internal unsafe static int GetUtf8(string s, byte* utf8Bytes, int utf8ByteCount)
-	{
-		fixed (char* chars = s)
-		{
-			return Encoding.UTF8.GetBytes(chars, s.Length, utf8Bytes, utf8ByteCount);
-		}
-	}
-
-	public static int GetByteCount(string inString)
-	{
-		return Encoding.UTF8.GetByteCount(inString);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/NullTerminatedString.cs Out/RG.ImGui/ImGuiNET/NullTerminatedString.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/NullTerminatedString.cs	2025-05-22 18:15:44.756952300 -0700
+++ Out/RG.ImGui/ImGuiNET/NullTerminatedString.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,28 +0,0 @@
-using System.Text;
-
-namespace ImGuiNET;
-
-public struct NullTerminatedString
-{
-	public unsafe readonly byte* Data;
-
-	public unsafe NullTerminatedString(byte* data)
-	{
-		Data = data;
-	}
-
-	public unsafe override string ToString()
-	{
-		int num = 0;
-		for (byte* ptr = Data; *ptr != 0; ptr++)
-		{
-			num++;
-		}
-		return Encoding.ASCII.GetString(Data, num);
-	}
-
-	public static implicit operator string(NullTerminatedString nts)
-	{
-		return nts.ToString();
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/RangeAccessor.cs Out/RG.ImGui/ImGuiNET/RangeAccessor.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/RangeAccessor.cs	2025-05-22 18:15:44.746440300 -0700
+++ Out/RG.ImGui/ImGuiNET/RangeAccessor.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,36 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct RangeAccessor<T> where T : struct
-{
-	private static readonly int s_sizeOfT = Unsafe.SizeOf<T>();
-
-	public unsafe readonly void* Data;
-
-	public readonly int Count;
-
-	public unsafe ref T this[int index]
-	{
-		get
-		{
-			if (index < 0 || index >= Count)
-			{
-				throw new IndexOutOfRangeException();
-			}
-			return ref Unsafe.AsRef<T>((byte*)Data + s_sizeOfT * index);
-		}
-	}
-
-	public unsafe RangeAccessor(IntPtr data, int count)
-		: this(data.ToPointer(), count)
-	{
-	}
-
-	public unsafe RangeAccessor(void* data, int count)
-	{
-		Data = data;
-		Count = count;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/RangeAccessorExtensions.cs Out/RG.ImGui/ImGuiNET/RangeAccessorExtensions.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/RangeAccessorExtensions.cs	2025-05-22 18:15:44.765529400 -0700
+++ Out/RG.ImGui/ImGuiNET/RangeAccessorExtensions.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-using System.Text;
-
-namespace ImGuiNET;
-
-public static class RangeAccessorExtensions
-{
-	public unsafe static string GetStringASCII(this RangeAccessor<byte> stringAccessor)
-	{
-		return Encoding.ASCII.GetString((byte*)stringAccessor.Data, stringAccessor.Count);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/RangePtrAccessor.cs Out/RG.ImGui/ImGuiNET/RangePtrAccessor.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/RangePtrAccessor.cs	2025-05-22 18:15:44.764526600 -0700
+++ Out/RG.ImGui/ImGuiNET/RangePtrAccessor.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,34 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct RangePtrAccessor<T> where T : struct
-{
-	public unsafe readonly void* Data;
-
-	public readonly int Count;
-
-	public unsafe T this[int index]
-	{
-		get
-		{
-			if (index < 0 || index >= Count)
-			{
-				throw new IndexOutOfRangeException();
-			}
-			return Unsafe.Read<T>((byte*)Data + sizeof(void*) * index);
-		}
-	}
-
-	public unsafe RangePtrAccessor(IntPtr data, int count)
-		: this(data.ToPointer(), count)
-	{
-	}
-
-	public unsafe RangePtrAccessor(void* data, int count)
-	{
-		Data = data;
-		Count = count;
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/StbTexteditRow.cs Out/RG.ImGui/ImGuiNET/StbTexteditRow.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/StbTexteditRow.cs	2025-05-22 18:15:44.784558400 -0700
+++ Out/RG.ImGui/ImGuiNET/StbTexteditRow.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,16 +0,0 @@
-namespace ImGuiNET;
-
-public struct StbTexteditRow
-{
-	public float x0;
-
-	public float x1;
-
-	public float baseline_y_delta;
-
-	public float ymin;
-
-	public float ymax;
-
-	public int num_chars;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/StbTexteditRowPtr.cs Out/RG.ImGui/ImGuiNET/StbTexteditRowPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/StbTexteditRowPtr.cs	2025-05-22 18:15:44.805176100 -0700
+++ Out/RG.ImGui/ImGuiNET/StbTexteditRowPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,46 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct StbTexteditRowPtr
-{
-	public unsafe StbTexteditRow* NativePtr { get; }
-
-	public unsafe ref float x0 => ref Unsafe.AsRef<float>(&NativePtr->x0);
-
-	public unsafe ref float x1 => ref Unsafe.AsRef<float>(&NativePtr->x1);
-
-	public unsafe ref float baseline_y_delta => ref Unsafe.AsRef<float>(&NativePtr->baseline_y_delta);
-
-	public unsafe ref float ymin => ref Unsafe.AsRef<float>(&NativePtr->ymin);
-
-	public unsafe ref float ymax => ref Unsafe.AsRef<float>(&NativePtr->ymax);
-
-	public unsafe ref int num_chars => ref Unsafe.AsRef<int>(&NativePtr->num_chars);
-
-	public unsafe StbTexteditRowPtr(StbTexteditRow* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe StbTexteditRowPtr(IntPtr nativePtr)
-	{
-		NativePtr = (StbTexteditRow*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator StbTexteditRowPtr(StbTexteditRow* nativePtr)
-	{
-		return new StbTexteditRowPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator StbTexteditRow*(StbTexteditRowPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator StbTexteditRowPtr(IntPtr nativePtr)
-	{
-		return new StbTexteditRowPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/StbUndoRecord.cs Out/RG.ImGui/ImGuiNET/StbUndoRecord.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/StbUndoRecord.cs	2025-05-22 18:15:44.805176100 -0700
+++ Out/RG.ImGui/ImGuiNET/StbUndoRecord.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,12 +0,0 @@
-namespace ImGuiNET;
-
-public struct StbUndoRecord
-{
-	public int where;
-
-	public int insert_length;
-
-	public int delete_length;
-
-	public int char_storage;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/StbUndoRecordPtr.cs Out/RG.ImGui/ImGuiNET/StbUndoRecordPtr.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/StbUndoRecordPtr.cs	2025-05-22 18:15:44.823251300 -0700
+++ Out/RG.ImGui/ImGuiNET/StbUndoRecordPtr.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,42 +0,0 @@
-using System;
-using System.Runtime.CompilerServices;
-
-namespace ImGuiNET;
-
-public struct StbUndoRecordPtr
-{
-	public unsafe StbUndoRecord* NativePtr { get; }
-
-	public unsafe ref int where => ref Unsafe.AsRef<int>(&NativePtr->where);
-
-	public unsafe ref int insert_length => ref Unsafe.AsRef<int>(&NativePtr->insert_length);
-
-	public unsafe ref int delete_length => ref Unsafe.AsRef<int>(&NativePtr->delete_length);
-
-	public unsafe ref int char_storage => ref Unsafe.AsRef<int>(&NativePtr->char_storage);
-
-	public unsafe StbUndoRecordPtr(StbUndoRecord* nativePtr)
-	{
-		NativePtr = nativePtr;
-	}
-
-	public unsafe StbUndoRecordPtr(IntPtr nativePtr)
-	{
-		NativePtr = (StbUndoRecord*)(void*)nativePtr;
-	}
-
-	public unsafe static implicit operator StbUndoRecordPtr(StbUndoRecord* nativePtr)
-	{
-		return new StbUndoRecordPtr(nativePtr);
-	}
-
-	public unsafe static implicit operator StbUndoRecord*(StbUndoRecordPtr wrappedPtr)
-	{
-		return wrappedPtr.NativePtr;
-	}
-
-	public static implicit operator StbUndoRecordPtr(IntPtr nativePtr)
-	{
-		return new StbUndoRecordPtr(nativePtr);
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/UnionValue.cs Out/RG.ImGui/ImGuiNET/UnionValue.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/UnionValue.cs	2025-05-22 18:15:44.747439100 -0700
+++ Out/RG.ImGui/ImGuiNET/UnionValue.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,17 +0,0 @@
-using System;
-using System.Runtime.InteropServices;
-
-namespace ImGuiNET;
-
-[StructLayout(LayoutKind.Explicit)]
-public struct UnionValue
-{
-	[FieldOffset(0)]
-	public int ValueI32;
-
-	[FieldOffset(0)]
-	public float ValueF32;
-
-	[FieldOffset(0)]
-	public IntPtr ValuePtr;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/Util.cs Out/RG.ImGui/ImGuiNET/Util.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/Util.cs	2025-05-22 18:15:44.754944300 -0700
+++ Out/RG.ImGui/ImGuiNET/Util.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,53 +0,0 @@
-using System;
-using System.Runtime.InteropServices;
-using System.Text;
-
-namespace ImGuiNET;
-
-internal static class Util
-{
-	internal const int StackAllocationSizeLimit = 2048;
-
-	public unsafe static string StringFromPtr(byte* ptr)
-	{
-		int i;
-		for (i = 0; ptr[i] != 0; i++)
-		{
-		}
-		return Encoding.UTF8.GetString(ptr, i);
-	}
-
-	internal unsafe static bool AreStringsEqual(byte* a, int aLength, byte* b)
-	{
-		for (int i = 0; i < aLength; i++)
-		{
-			if (a[i] != b[i])
-			{
-				return false;
-			}
-		}
-		if (b[aLength] != 0)
-		{
-			return false;
-		}
-		return true;
-	}
-
-	internal unsafe static byte* Allocate(int byteCount)
-	{
-		return (byte*)(void*)Marshal.AllocHGlobal(byteCount);
-	}
-
-	internal unsafe static void Free(byte* ptr)
-	{
-		Marshal.FreeHGlobal((IntPtr)ptr);
-	}
-
-	internal unsafe static int GetUtf8(string s, byte* utf8Bytes, int utf8ByteCount)
-	{
-		fixed (char* chars = s)
-		{
-			return Encoding.UTF8.GetBytes(chars, s.Length, utf8Bytes, utf8ByteCount);
-		}
-	}
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui/ImGuiNET/Vector2ih.cs Out/RG.ImGui/ImGuiNET/Vector2ih.cs
--- Temp\PatchSource/RG.ImGui/ImGuiNET/Vector2ih.cs	2025-05-22 18:15:44.755947200 -0700
+++ Out/RG.ImGui/ImGuiNET/Vector2ih.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,8 +0,0 @@
-namespace ImGuiNET;
-
-public struct Vector2ih
-{
-	public short x;
-
-	public short y;
-}
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RG.ImGui.Unity/ImGuiNET/Unity/CursorShapesAsset.cs Out/RG.ImGui.Unity/ImGuiNET/Unity/CursorShapesAsset.cs
--- Temp\PatchSource/RG.ImGui.Unity/ImGuiNET/Unity/CursorShapesAsset.cs	2025-05-22 18:15:46.821699500 -0700
+++ Out/RG.ImGui.Unity/ImGuiNET/Unity/CursorShapesAsset.cs	2025-05-22 17:41:18.288752000 -0700
@@ -41,17 +41,17 @@
 	[Tooltip("When hovering something with disabled interaction. Usually a crossed circle.")]
 	public CursorShape NotAllowed;
 
-	public ref CursorShape this[ImGuiMouseCursor cursor] => cursor switch
+	public CursorShape this[ImGuiMouseCursor cursor] => cursor switch
 	{
-		ImGuiMouseCursor.Arrow => ref Arrow, 
-		ImGuiMouseCursor.TextInput => ref TextInput, 
-		ImGuiMouseCursor.ResizeAll => ref ResizeAll, 
-		ImGuiMouseCursor.ResizeEW => ref ResizeEW, 
-		ImGuiMouseCursor.ResizeNS => ref ResizeNS, 
-		ImGuiMouseCursor.ResizeNESW => ref ResizeNESW, 
-		ImGuiMouseCursor.ResizeNWSE => ref ResizeNWSE, 
-		ImGuiMouseCursor.Hand => ref Hand, 
-		ImGuiMouseCursor.NotAllowed => ref NotAllowed, 
-		_ => ref Arrow, 
+		ImGuiMouseCursor.Arrow => Arrow, 
+		ImGuiMouseCursor.TextInput => TextInput, 
+		ImGuiMouseCursor.ResizeAll => ResizeAll, 
+		ImGuiMouseCursor.ResizeEW => ResizeEW, 
+		ImGuiMouseCursor.ResizeNS => ResizeNS, 
+		ImGuiMouseCursor.ResizeNESW => ResizeNESW, 
+		ImGuiMouseCursor.ResizeNWSE => ResizeNWSE, 
+		ImGuiMouseCursor.Hand => Hand, 
+		ImGuiMouseCursor.NotAllowed => NotAllowed, 
+		_ => Arrow, 
 	};
 }
diff -Naur -x '*.csproj' -x obj -x bin Temp\PatchSource/RW.RocketNet/UnitySourceGeneratedAssemblyMonoScriptTypes_v1.cs Out/RW.RocketNet/UnitySourceGeneratedAssemblyMonoScriptTypes_v1.cs
--- Temp\PatchSource/RW.RocketNet/UnitySourceGeneratedAssemblyMonoScriptTypes_v1.cs	2025-05-22 18:15:46.895760800 -0700
+++ Out/RW.RocketNet/UnitySourceGeneratedAssemblyMonoScriptTypes_v1.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,65 +0,0 @@
-using System.CodeDom.Compiler;
-using System.ComponentModel;
-using System.Runtime.CompilerServices;
-
-[CompilerGenerated]
-[EditorBrowsable(EditorBrowsableState.Never)]
-[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
-internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
-{
-	private struct MonoScriptData
-	{
-		public byte[] FilePathsData;
-
-		public byte[] TypesData;
-
-		public int TotalTypes;
-
-		public int TotalFiles;
-
-		public bool IsEditorOnly;
-	}
-
-	[MethodImpl(MethodImplOptions.AggressiveInlining)]
-	private static MonoScriptData Get()
-	{
-		MonoScriptData result = default(MonoScriptData);
-		result.FilePathsData = new byte[125]
-		{
-			0, 0, 0, 2, 0, 0, 0, 57, 92, 80,
-			97, 99, 107, 97, 103, 101, 115, 92, 82, 111,
-			99, 107, 101, 116, 78, 101, 116, 92, 82, 117,
-			110, 116, 105, 109, 101, 92, 80, 101, 110, 100,
-			105, 110, 103, 82, 111, 99, 107, 101, 116, 78,
-			101, 116, 80, 97, 99, 107, 101, 116, 46, 103,
-			101, 110, 46, 99, 115, 0, 0, 0, 2, 0,
-			0, 0, 52, 92, 80, 97, 99, 107, 97, 103,
-			101, 115, 92, 82, 111, 99, 107, 101, 116, 78,
-			101, 116, 92, 82, 117, 110, 116, 105, 109, 101,
-			92, 82, 111, 99, 107, 101, 116, 78, 101, 116,
-			73, 110, 115, 116, 97, 110, 99, 101, 46, 103,
-			101, 110, 46, 99, 115
-		};
-		result.TypesData = new byte[138]
-		{
-			1, 0, 0, 0, 32, 82, 111, 99, 107, 101,
-			116, 78, 101, 116, 124, 80, 101, 110, 100, 105,
-			110, 103, 82, 111, 99, 107, 101, 116, 78, 101,
-			116, 80, 97, 99, 107, 101, 116, 1, 0, 0,
-			0, 32, 82, 111, 99, 107, 101, 116, 78, 101,
-			116, 124, 80, 101, 110, 100, 105, 110, 103, 82,
-			111, 99, 107, 101, 116, 78, 101, 116, 80, 97,
-			99, 107, 101, 116, 1, 0, 0, 0, 27, 82,
-			111, 99, 107, 101, 116, 78, 101, 116, 124, 82,
-			111, 99, 107, 101, 116, 78, 101, 116, 73, 110,
-			115, 116, 97, 110, 99, 101, 1, 0, 0, 0,
-			27, 82, 111, 99, 107, 101, 116, 78, 101, 116,
-			124, 82, 111, 99, 107, 101, 116, 78, 101, 116,
-			73, 110, 115, 116, 97, 110, 99, 101
-		};
-		result.TotalFiles = 2;
-		result.TotalTypes = 4;
-		result.IsEditorOnly = false;
-		return result;
-	}
-}
